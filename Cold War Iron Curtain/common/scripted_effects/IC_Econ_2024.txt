setup_job_basewage = {
		for_each_loop = {
			array = THIS.state_Development
			value = i
			set_variable = {
				state_development_i = THIS.state_development
			}
			multiply_variable = {
				state_development_i = 0.25
			}
			add_to_array = {
				array = THIS.basewage
				value = state_development_i
			}
		}
}

check_state_developement = {
	every_owned_state = {
	    if = {
	        limit = {
	            OR = {
   					has_state_category = pop1
   					has_state_category = pop2
   					has_state_category = pop3
   					has_state_category = pop4
   					has_state_category = pop5
   					has_state_category = pop7   
   					has_state_category = pop10
   					has_state_category = pop15
   					has_state_category = pop20     										   					   					   					   					
	            }
	        }
		    set_variable = {
		        state_development = 1
		    }
	    }
	    else_if = {
	        limit = {
	            OR = {
   					has_state_category = pop1dev1
   					has_state_category = pop2dev1
   					has_state_category = pop3dev1
   					has_state_category = pop4dev1
   					has_state_category = pop5dev1
   					has_state_category = pop7dev1   
   					has_state_category = pop10dev1
   					has_state_category = pop15dev1
   					has_state_category = pop20dev1     										   					   					   					   					
	            }
	        }
		    set_variable = {
		        state_development = 2
		    }
	    }
	    else_if = {
	        limit = {
	            OR = {
   					has_state_category = pop1dev2
   					has_state_category = pop2dev2
   					has_state_category = pop3dev2
   					has_state_category = pop4dev2
   					has_state_category = pop5dev2
   					has_state_category = pop7dev2 
   					has_state_category = pop10dev2
   					has_state_category = pop15dev2
   					has_state_category = pop20dev2     										   					   					   					   					
	            }
	        }
		    set_variable = {
		        state_development = 3
		    }
	    }
	    else_if = {
	        limit = {
	            OR = {
   					has_state_category = pop1dev3
   					has_state_category = pop2dev3
   					has_state_category = pop3dev3
   					has_state_category = pop4dev3
   					has_state_category = pop5dev3
   					has_state_category = pop7dev3 
   					has_state_category = pop10dev3
   					has_state_category = pop15dev3
   					has_state_category = pop20dev3    										   					   					   					   					
	            }
	        }
		    set_variable = {
		        state_development = 4
		    }
	    }
	    else_if = {
	        limit = {
	            OR = {
   					has_state_category = pop1dev4
   					has_state_category = pop2dev4
   					has_state_category = pop3dev4
   					has_state_category = pop4dev4
   					has_state_category = pop5dev4
   					has_state_category = pop7dev4 
   					has_state_category = pop10dev4
   					has_state_category = pop15dev4
   					has_state_category = pop20dev4    										   					   					   					   					
	            }
	        }
		    set_variable = {
		        state_development = 5
		    }
	    }
	    else = {
			    set_variable = {
			        state_development = 6
			    }
		    }
	    #log = "[?THIS.state_development] at [THIS.GetID]"    	    		    		    
	}
}	


check_buildings = {
	every_owned_state = {

		set_temp_variable = {
			total_building_sum = 0
		}
		set_temp_variable = {
			powerplants_sum = 0
		}

		#Add Civs to Array
		add_to_array = {
			array = THIS.buildings
			index = 0
			value = building_level@industrial_complex
		}
		add_to_temp_variable = {
			total_building_sum = building_level@industrial_complex
		}

		#Add Mils to Array
		add_to_array = {
			array = THIS.buildings
			index = 1
			value = building_level@arms_factory
		}
		add_to_temp_variable = {
			total_building_sum = building_level@arms_factory
		}		

		#Add Docks to Array
		add_to_array = {
			array = THIS.buildings
			index = 2
			value = building_level@dockyard
		}	
		add_to_temp_variable = {
			total_building_sum = building_level@dockyard
		}			

		#Add Offices to Array
		add_to_array = {
			array = THIS.buildings
			index = 3
			value = building_level@office_park
		}
		add_to_temp_variable = {
			total_building_sum = building_level@office_park
		}			

		#Add Agri to Array
		add_to_array = {
			array = THIS.buildings
			index = 4
			value = building_level@agri_industrial_complex
		}	
		add_to_temp_variable = {
			total_building_sum = building_level@agri_industrial_complex
		}			

		#Add Steel to Array
		add_to_array = {
			array = THIS.buildings
			index = 5
			value = building_level@steel_factory
		}		
		add_to_temp_variable = {
			total_building_sum = building_level@steel_factory
		}		

		#Add Tungsten to Array
		add_to_array = {
			array = THIS.buildings
			index = 6
			value = building_level@tungsten_factory
		}	
		add_to_temp_variable = {
			total_building_sum = building_level@tungsten_factory
		}		

		#Add Powerplants + Reactor to Array
		add_to_temp_variable = {
			powerplants_sum = building_level@fossil_fuel_powerplant
		}
		add_to_temp_variable = {
			powerplants_sum = building_level@renewable_powerplant
		}
		add_to_temp_variable = {
			powerplants_sum = building_level@nuclear_powerplant
		}
		add_to_temp_variable = {
			powerplants_sum = building_level@nuclear_reactor
		}	
		add_to_temp_variable = {
			powerplants_sum = building_level@refinery
		}					
		add_to_array = {
			array = THIS.buildings
			index = 7
			value = powerplants_sum
		}	
		add_to_temp_variable = {
			total_building_sum = powerplants_sum
		}	

		#Add Everything together to Array
		add_to_array = {
			array = THIS.buildings
			index = 8
			value = total_building_sum
		}

		#Debugging
   		#log = "Civs: [?THIS.buildings^0] at [THIS.GetID]"
   		#log = "Mils: [?THIS.buildings^1] at [THIS.GetID]"
   		#log = "Dock: [?THIS.buildings^2] at [THIS.GetID]"
   		#log = "OfPa: [?THIS.buildings^3] at [THIS.GetID]"
   		#log = "Agri: [?THIS.buildings^4] at [THIS.GetID]"
   		#log = "Stel: [?THIS.buildings^5] at [THIS.GetID]"
   		#log = "Tung: [?THIS.buildings^6] at [THIS.GetID]"
   		#log = "Powr: [?THIS.buildings^7] at [THIS.GetID]"   		
   		#log = "Total: [?THIS.buildings^8] at [THIS.GetID]"
	}
}

calculate_free_building_slots = {
		every_owned_state = {
			set_variable = { THIS.building_slots_var = modifier@local_building_slots }
			add_to_variable = { THIS.building_slots_var = owner:modifier@global_building_slots }
			add_to_variable = { THIS.building_slots_var = extra_building_slots }
			#log = "[?THIS.building_slots_var] compared to [?THIS.buildings^8]"

			subtract_from_variable = { THIS.building_slots_var = THIS.buildings^8}

		    set_temp_variable = { slot_factor = 1 }
		    add_to_temp_variable = {
		        slot_factor = modifier@local_building_slots_factor
		    }
		    add_to_temp_variable = {
		        slot_factor = owner:modifier@global_building_slots_factor
		    }
		    multiply_variable = {
		        THIS.building_slots_var = slot_factor
		    }			

		    #Always will round the variable down, if it is an int, it stays at the value

		    add_to_variable = {
		    	THIS.building_slots_var = -0.5
		    }
		    round_variable = THIS.building_slots_var

   		#log = "Slot factor [?slot_factor] at [THIS.GetID]"
   		#log = "Free building slots: [?THIS.building_slots_var] at [THIS.GetID]"

		}
}

check_resources = {
	every_owned_state = {
		set_temp_variable = {
			tempresource = 0
		}

		add_to_array = {
			array = THIS.resources
			index = 0
			value = resource@oil
		}
		add_to_temp_variable = {
			tempresource = resource@oil
		}

		add_to_array = {
			array = THIS.resources
			index = 1
			value = resource@aluminium
		}
		add_to_temp_variable = {
			tempresource = resource@aluminium
		}

		#Food
		add_to_array = {
			array = THIS.resources
			index = 2
			value = resource@rubber
		}
		add_to_temp_variable = {
			tempresource = resource@rubber
		}

		add_to_array = {
			array = THIS.resources
			index = 3
			value = resource@tungsten
		}
		add_to_temp_variable = {
			tempresource = resource@tungsten
		}			

		add_to_array = {
			array = THIS.resources
			index = 4
			value = resource@steel
		}
		add_to_temp_variable = {
			tempresource = resource@steel
		}

		add_to_array = {
			array = THIS.resources
			index = 5
			value = resource@chromium
		}
		add_to_temp_variable = {
			tempresource = resource@chromium
		}			

		add_to_array = {
			array = THIS.resources
			index = 6
			value = resource@electricity
		}
		add_to_temp_variable = {
			tempresource = resource@electricity
		}		
   		#log = "Tempresource: [?tempresource] at [THIS.GetID]"

		add_to_array = {
			array = THIS.resources
			index = 7
			value = tempresource
		}	

   		#log = "Oil: [?THIS.resources^0] at [THIS.GetID]"
   		#log = "Light: [?THIS.resources^1] at [THIS.GetID]"
   		#log = "Food: [?THIS.resources^2] at [THIS.GetID]"
   		#log = "Rare: [?THIS.resources^3] at [THIS.GetID]"
   		#log = "Cons: [?THIS.resources^4] at [THIS.GetID]"
   		#log = "Nucl: [?THIS.resources^5] at [THIS.GetID]"
   		#log = "Elec: [?THIS.resources^6] at [THIS.GetID]"
   		#log = "Total: [?THIS.resources^7] at [THIS.GetID]"			
	}
}

check_building_slots_size = {
	every_owned_state = {
		set_temp_variable = { slot_divisor = 0.5 }
		multiply_temp_variable = { slot_divisor = state_development }	
		if = {
			limit = { 
				OR = {
   					has_state_category = pop1
   					has_state_category = pop1dev1
   					has_state_category = pop1dev2
   					has_state_category = pop1dev3
   					has_state_category = pop1dev4
   					has_state_category = pop1dev5    	
				}
			}
			set_variable = { THIS.building_slots_size_var = 75 }
			divide_variable = { THIS.building_slots_size_var = slot_divisor }
		}
		else_if = {
			limit = { 
				OR = {
   					has_state_category = pop2
   					has_state_category = pop2dev1
   					has_state_category = pop2dev2
   					has_state_category = pop2dev3
   					has_state_category = pop2dev4
   					has_state_category = pop2dev5    	
				}
			}
			set_variable = { THIS.building_slots_size_var = 150 }
			divide_variable = { THIS.building_slots_size_var = slot_divisor }	
		}	
		else_if = {
			limit = { 
				OR = {
   					has_state_category = pop3
   					has_state_category = pop3dev1
   					has_state_category = pop3dev2
   					has_state_category = pop3dev3
   					has_state_category = pop3dev4
   					has_state_category = pop3dev5    	
				}
			}
			set_variable = { THIS.building_slots_size_var = 225 }
			divide_variable = { THIS.building_slots_size_var = slot_divisor }	
		}
		else_if = {
			limit = { 
				OR = {
   					has_state_category = pop4
   					has_state_category = pop4dev1
   					has_state_category = pop4dev2
   					has_state_category = pop4dev3
   					has_state_category = pop4dev4
   					has_state_category = pop4dev5    	
				}
			}
			set_variable = { THIS.building_slots_size_var = 300 }
			divide_variable = { THIS.building_slots_size_var = slot_divisor }	
		}
		else_if = {
			limit = { 
				OR = {
   					has_state_category = pop5
   					has_state_category = pop5dev1
   					has_state_category = pop5dev2
   					has_state_category = pop5dev3
   					has_state_category = pop5dev4
   					has_state_category = pop5dev5    	
				}
			}
			set_variable = { THIS.building_slots_size_var = 375 }
			divide_variable = { THIS.building_slots_size_var = slot_divisor }	
		}
		#else_if = {
		#	limit = { 
		#		OR = {
   		#			has_state_category = pop6
   		#			has_state_category = pop6dev1
   		#			has_state_category = pop6dev2
   		#			has_state_category = pop6dev3
   		#			has_state_category = pop6dev4
   		#			has_state_category = pop6dev5    	
		#		}
		#	}
		#	set_variable = { THIS.building_slots_size_var = 450 }
		#	divide_variable = { THIS.building_slots_size_var = slot_divisor }	
		#}
		else_if = {
			limit = { 
				OR = {
   					has_state_category = pop7
   					has_state_category = pop7dev1
   					has_state_category = pop7dev2
   					has_state_category = pop7dev3
   					has_state_category = pop7dev4
   					has_state_category = pop7dev5    	
				}
			}
			set_variable = { THIS.building_slots_size_var = 525 }
			divide_variable = { THIS.building_slots_size_var = slot_divisor }	
		}
		else_if = {
			limit = { 
				OR = {
   					has_state_category = pop10
   					has_state_category = pop10dev1
   					has_state_category = pop10dev2
   					has_state_category = pop10dev3
   					has_state_category = pop10dev4
   					has_state_category = pop10dev5    	
				}
			}
			set_variable = { THIS.building_slots_size_var = 750 }
			divide_variable = { THIS.building_slots_size_var = slot_divisor }	
		}
		else_if = {
			limit = { 
				OR = {
   					has_state_category = pop15
   					has_state_category = pop15dev1
   					has_state_category = pop15dev2
   					has_state_category = pop15dev3
   					has_state_category = pop15dev4
   					has_state_category = pop15dev5    	
				}
			}
			set_variable = { THIS.building_slots_size_var = 1125 }
			divide_variable = { THIS.building_slots_size_var = slot_divisor }	
		}														
		else_if = {
			limit = { 
				OR = {
   					has_state_category = pop20
   					has_state_category = pop20dev1
   					has_state_category = pop20dev2
   					has_state_category = pop20dev3
   					has_state_category = pop20dev4
   					has_state_category = pop20dev5    	
				}
			}
			set_variable = { THIS.building_slots_size_var = 1500 }
			divide_variable = { THIS.building_slots_size_var = slot_divisor }	
		}
		else = {
			set_variable = { THIS.building_slots_size_var = 15 }
			divide_variable = { THIS.building_slots_size_var = slot_divisor }	
		}			
		#log = "[?THIS.building_slots_size_var] at [THIS.GetID]"
	}
}

check_other_state_relevant_information = {
	#Checks how many people go to one factory
	every_owned_state = {	
			set_temp_variable = { baseEmployment = 0.5 }
			set_temp_variable = { baseMalusXDev = 0.9 }
			multiply_temp_variable = { baseMalusXDev = THIS.state_development }
			multiply_temp_variable = { baseEmployment = baseMalusXDev }

			#log = "[?baseEmployment] at [THIS.GetID]"

			#Civs
			multiply_temp_variable = { baseEmployment = 60 }
			add_to_array = {
				array = THIS.State_Employment
				index = 0
				value = baseEmployment
			}

			#Mils
			multiply_temp_variable = { baseEmployment = 0.35 }			
			add_to_array = {
				array = THIS.State_Employment
				index = 1
				value = baseEmployment
			}	

			#Office
			multiply_temp_variable = { baseEmployment = 6 }
			add_to_array = {
				array = THIS.State_Employment
				index = 2
				value = baseEmployment
			}	

			#Steel Fac
			divide_temp_variable = { baseEmployment = 10 }		
			add_to_array = {
				array = THIS.State_Employment
				index = 3
				value = baseEmployment
			}	

			#Tungsten Fac + Other Resources
			divide_temp_variable = { baseEmployment = 7 }		
			multiply_temp_variable = { baseEmployment = 5 }					
			add_to_array = {
				array = THIS.State_Employment
				index = 4
				value = baseEmployment
			}

			#Food
			multiply_temp_variable = { baseEmployment = 2.5 }
			divide_temp_variable = { baseEmployment = THIS.state_development }
			add_to_array = {
				array = THIS.State_Employment
				index = 5
				value = baseEmployment
			}	

			#Building Slots
			add_to_array = {
				array = THIS.State_Employment
				index = 6
				value = THIS.building_slots_size_var
			}			

			#log = "Array: [?THIS.State_Employment^0] [?THIS.State_Employment^1] [?THIS.State_Employment^2] [?THIS.State_Employment^3] [?THIS.State_Employment^4] [?THIS.State_Employment^5] [?THIS.State_Employment^6] at [THIS.GetID]"
	}	
}


calculate_employable_population = {
	every_owned_state = {
			set_temp_variable = { state_population = state_population_k }

  	 		set_temp_variable = { country_recruitablePopulation = owner:modifier@conscription }

  	 		set_temp_variable = { conscription_factor_fix = 1}
  	 		add_to_temp_variable = { conscription_factor_fix = owner:modifier@conscription_factor }

    		multiply_temp_variable = { country_recruitablePopulation = conscription_factor_fix } 
    		multiply_temp_variable = { country_recruitablePopulation = state_population_k}

    		set_variable = { theoretical_soldier_sum = country_recruitablePopulation }

			#log = "Soldier Deduction: [?country_recruitablePopulation] at [THIS.GetID]"

    		subtract_from_temp_variable = { state_population = country_recruitablePopulation }

			multiply_temp_variable = {
				state_population = owner:modifier@workforce_ratio
			}
			multiply_temp_variable = {
				state_population = 0.75
			}

			set_variable = { employable_population = state_population }

			#log = "[?employable_population] at [THIS.GetID]"

	}
}

calculate_theoretical_population = {
	every_owned_state = {
		set_variable = { theoretical_pop_sum = 0 }

		#Civs
		set_temp_variable = { theoretical_pop_sum_civs = THIS.buildings^0 }
		multiply_temp_variable = { theoretical_pop_sum_civs = THIS.State_Employment^0 }
		add_to_variable = { theoretical_pop_sum = theoretical_pop_sum_civs }

		#Mils
		set_temp_variable = { theoretical_pop_sum_mils = THIS.buildings^1 }
		multiply_temp_variable = { theoretical_pop_sum_mils = THIS.State_Employment^2 }
		add_to_variable = { theoretical_pop_sum = theoretical_pop_sum_mils }

		#Docks
		set_temp_variable = { theoretical_pop_sum_docks = THIS.buildings^2 }
		multiply_temp_variable = { theoretical_pop_sum_docks = THIS.State_Employment^1 }
		add_to_variable = { theoretical_pop_sum = theoretical_pop_sum_docks }

		#Offices
		set_temp_variable = { theoretical_pop_sum_offices = THIS.buildings^3 }
		multiply_temp_variable = { theoretical_pop_sum_offices = THIS.State_Employment^2 }		
		add_to_variable = { theoretical_pop_sum = theoretical_pop_sum_offices }

		#Steel
		set_temp_variable = { theoretical_pop_sum_steelfac = THIS.buildings^5 }
		multiply_temp_variable = { theoretical_pop_sum_steelfac = THIS.State_Employment^3 }		
		add_to_variable = { theoretical_pop_sum = theoretical_pop_sum_steelfac }

		#Tungsten
		set_temp_variable = { theoretical_pop_sum_tungstenfac = THIS.buildings^6 }
		multiply_temp_variable = { theoretical_pop_sum_tungstenfac = THIS.State_Employment^4 }		
		add_to_variable = { theoretical_pop_sum = theoretical_pop_sum_tungstenfac }

		#Resources
		set_temp_variable = { theoretical_pop_sum_resources = THIS.resources^7 }
		multiply_temp_variable = { theoretical_pop_sum_resources = THIS.State_Employment^4 }		
		add_to_variable = { theoretical_pop_sum = theoretical_pop_sum_resources }

		# ^- Labourer Pops only

		set_variable = { theoretical_labourer_sum = theoretical_pop_sum }

		# Below only farmer pops

		#Food		
		set_temp_variable = { theoretical_pop_sum_food = THIS.resources^2 }
		multiply_temp_variable = { theoretical_pop_sum_food = THIS.State_Employment^5 }	
		add_to_variable = { theoretical_pop_sum = theoretical_pop_sum_food }

		set_variable = { theoretical_farmer_sum = theoretical_pop_sum_food }

		#log = "[?theoretical_pop_sum] compared to [?employable_population] at [THIS.GetID]"		

	}
}

calculate_unemployment_factor = {
	every_owned_state = {
		set_variable = { overemployment_factor = 1 }
		set_variable = { theoretical_unemployed = employable_population }
		subtract_from_variable = { theoretical_unemployed = theoretical_pop_sum }


		#If theoretically unemployed in a state
		if = {
			limit = { check_variable = { theoretical_unemployed > 0 } }
			set_variable = { unemployment_factor = theoretical_unemployed }
			divide_variable = { unemployment_factor = employable_population }	

			#log = "[THIS.GetID.GetName] has Unemployment Rate of [?unemployment_factor|%] or [?theoretical_unemployed] Ppl."	

			calculate_conversion_farmer_artisan = yes
		}
		#If unemployed is below 0 it becomes overemployment
		else = {

			set_variable = { theoretical_unemployed = 0 }
			set_variable = { overemployment_factor = employable_population }
			divide_variable = { overemployment_factor = theoretical_pop_sum }

			#log = "[THIS.GetID.GetName] is Overemployed. Overemployment Factor: [?overemployment_factor]"			
		}
	}
}

calculate_conversion_farmer_artisan = {

		set_temp_variable = { college_artisan_rate = college_educated }
		multiply_temp_variable = { college_artisan_rate = 0.5 }

		set_temp_variable = { hs_artisan_rate = high_school_educated }
		multiply_temp_variable = { hs_artisan_rate = 0.25 }

		set_temp_variable = { primary_artisan_rate = primary_educated }
		multiply_temp_variable = { primary_artisan_rate = 0.25 }

		set_variable = { artisan_rate = college_artisan_rate }
		add_to_variable = { artisan_rate = hs_artisan_rate }
		add_to_variable = { artisan_rate = primary_artisan_rate }
		multiply_variable = { artisan_rate = 0.01 }


		#log = "[?artisan_rate] at [THIS.GetID.GetName]"

		set_temp_variable = { building_slots_worker_sum = THIS.State_Employment^6 }
		multiply_temp_variable = { building_slots_worker_sum = THIS.building_slots_var}
		
		#log = "Building Slot Worker Sum: [?building_slots_worker_sum] at [THIS.GetID.GetName]"
		#log = "Theoretically Unemployed: [?theoretical_unemployed] at [THIS.GetID.GetName]"


		#If there is more free work space in building slots then there are theoretical unemployed people, then set unemployment to 0 and distribute artisans / substinents accordingly

		if = {
			limit = { check_variable = { building_slots_worker_sum > theoretical_unemployed } }
			#log = "Less unemployed than building slots can provide.:"
			set_variable = { theoretical_artisan_sum = theoretical_unemployed }
			multiply_variable = { theoretical_artisan_sum = artisan_rate }

			set_variable = { theoretical_substinents_sum = theoretical_unemployed }
			subtract_from_variable = { theoretical_substinents_sum = theoretical_artisan_sum }
			set_variable = { theoretical_unemployed = 0 }

			set_variable = { unemployment_factor = 0 }

			log = "Now it has [?theoretical_substinents_sum] Substinents, [?theoretical_artisan_sum] Artisans and [?theoretical_unemployed] Unemployed; Unemployment Rate: 0%"
		}

		#If there isnt, just subtract building_slots_worker_sum from theoretical unemployed
		else = {
			#log = "More unemployed than Building Slots can provide: [?building_slots_worker_sum]"
			#If there are no building slots, no Calculations.
			if = {
				limit = { check_variable = { var = building_slots_worker_sum value = 0 compare = less_than_or_equals } }
				log = "Now: [?THIS.theoretical_substinents_sum] Substinents, [?THIS.theoretical_artisan_sum] Artisans, [?theoretical_unemployed] Unemployed; Unemployment Rate: [?unemployment_factor|%]"
			}	
			else = {		
				set_variable = { theoretical_artisan_sum = building_slots_worker_sum }
				multiply_variable = { theoretical_artisan_sum = artisan_rate }

				set_variable = { theoretical_substinents_sum = building_slots_worker_sum }
				subtract_from_variable = { theoretical_substinents_sum = theoretical_artisan_sum }

				subtract_from_variable = { theoretical_unemployed = building_slots_worker_sum }

				set_variable = { unemployment_factor = theoretical_unemployed }
				divide_variable = { unemployment_factor = employable_population }				

				log = "Now: [?THIS.theoretical_substinents_sum] Substinents, [?theoretical_artisan_sum] Artisans, [?theoretical_unemployed] Unemployed; Unemployment Rate: [?unemployment_factor|%]"
			}
		}
		#log = ""
}

calculate_conversion_labourer_worker = {
	every_owned_state = {
		multiply_variable = { theoretical_labourer_sum = overemployment_factor }
		set_variable = { theoretical_worker_sum = theoretical_labourer_sum }
		multiply_variable = { theoretical_worker_sum = high_school_educated }
		multiply_variable = { theoretical_worker_sum = 0.01 }
		subtract_from_variable = { theoretical_labourer_sum = theoretical_worker_sum}
	}
}

calculate_conversion_lwa_capitalist_and_bureaucrat = {
	every_owned_state = {
		set_temp_variable = { economic_x_axis_minus_1 = PREV.economic_x_axis }
		add_to_temp_variable = { economic_x_axis_minus_1 = -1 }
		if = {
			limit = { check_temp_variable = { economic_x_axis_minus_1 < 0 }}
			add_to_temp_variable = { economic_x_axis_minus_1 = 1 }
		}

		set_variable = { theoretical_capitalist_sum = 0 }	

		set_temp_variable = { worker_to_capitalist_sum = theoretical_worker_sum }
		multiply_temp_variable = { worker_to_capitalist_sum = 0.002 }		
		multiply_temp_variable = { worker_to_capitalist_sum = 0.05 }		
		multiply_temp_variable = { worker_to_capitalist_sum = economic_x_axis_minus_1 }		

		subtract_from_variable = { theoretical_worker_sum = worker_to_capitalist_sum }
		add_to_variable = { theoretical_capitalist_sum = worker_to_capitalist_sum }

		set_temp_variable = { artisan_to_capitalist_sum = theoretical_artisan_sum }
		multiply_temp_variable = { artisan_to_capitalist_sum = 0.002 }		
		multiply_temp_variable = { artisan_to_capitalist_sum = 0.05 }		
		multiply_temp_variable = { artisan_to_capitalist_sum = economic_x_axis_minus_1 }		

		subtract_from_variable = { theoretical_artisan_sum = artisan_to_capitalist_sum }
		add_to_variable = { theoretical_capitalist_sum = artisan_to_capitalist_sum }

		set_temp_variable = { labourer_to_capitalist_sum = theoretical_labourer_sum }
		multiply_temp_variable = { labourer_to_capitalist_sum = 0.001 }
		multiply_temp_variable = { labourer_to_capitalist_sum = 0.05 }		
		multiply_temp_variable = { labourer_to_capitalist_sum = economic_x_axis_minus_1 }		

		subtract_from_variable = { theoretical_labourer_sum = labourer_to_capitalist_sum }
		add_to_variable = { theoretical_capitalist_sum = labourer_to_capitalist_sum }

		#log = "[?theoretical_capitalist_sum] "
	}
	every_owned_state = {
		set_temp_variable = { bureaucrat_factor_reduction = 0.025 } 
		multiply_temp_variable = { bureaucrat_factor_reduction = PREV.economic_x_axis }
		set_temp_variable = { bureaucrat_factor = 0.8 }
		subtract_from_temp_variable = { bureaucrat_factor = bureaucrat_factor_reduction }

		set_variable = { theoretical_bureaucrat_sum = 0 }	

		set_temp_variable = { worker_to_bureaucrat_sum = theoretical_worker_sum }
		multiply_temp_variable = { worker_to_bureaucrat_sum = 0.008 }		
		multiply_temp_variable = { worker_to_bureaucrat_sum = 0.5 }
		multiply_temp_variable = { worker_to_bureaucrat_sum = bureaucrat_factor }		


		subtract_from_variable = { theoretical_worker_sum = worker_to_bureaucrat_sum }
		add_to_variable = { theoretical_bureaucrat_sum = worker_to_bureaucrat_sum }

		set_temp_variable = { artisan_to_bureaucrat_sum = theoretical_artisan_sum }
		multiply_temp_variable = { artisan_to_bureaucrat_sum = 0.004 }	
		multiply_temp_variable = { artisan_to_bureaucrat_sum = 0.5 }
		multiply_temp_variable = { artisan_to_bureaucrat_sum = bureaucrat_factor }		


		subtract_from_variable = { theoretical_artisan_sum = artisan_to_bureaucrat_sum }
		add_to_variable = { theoretical_bureaucrat_sum = artisan_to_bureaucrat_sum }

		set_temp_variable = { labourer_to_bureaucrat_sum = theoretical_labourer_sum }
		multiply_temp_variable = { labourer_to_bureaucrat_sum = 0.008 }
		multiply_temp_variable = { labourer_to_bureaucrat_sum = 0.5 }
		multiply_temp_variable = { labourer_to_bureaucrat_sum = bureaucrat_factor }		


		subtract_from_variable = { theoretical_labourer_sum = labourer_to_bureaucrat_sum }
		add_to_variable = { theoretical_bureaucrat_sum = labourer_to_bureaucrat_sum }

		#log = "[?PREV.economic_x_axis] "
	}	
}


list_worker_type = {
	set_variable = { labourer_sum = 0 }
	set_variable = { worker_sum = 0 }
	set_variable = { soldier_sum = 0 }
	set_variable = { farmer_sum = 0 }
	set_variable = { artisan_sum = 0 }
	set_variable = { substinents_sum = 0 }
	set_variable = { unemployed_sum = 0 }
	set_variable = { capitalist_sum = 0 }	
	set_variable = { bureaucrat_sum = 0}

	every_owned_state = {
		#log = "[?THIS.GetId.GetName] LWSFAS Workforce: [?THIS.theoretical_labourer_sum], [?THIS.theoretical_worker_sum], [?THIS.theoretical_soldier_sum], [?THIS.theoretical_farmer_sum],  [?THIS.theoretical_artisan_sum], [?THIS.theoretical_substinents_sum]"
		#log = "Unemployed = [?THIS.theoretical_unemployed] or [?THIS.unemployment_factor|%], Employable Population = [?This.employable_population]"
		add_to_variable = { PREV.labourer_sum = theoretical_labourer_sum }
		add_to_variable = { PREV.worker_sum = theoretical_worker_sum }
		add_to_variable = { PREV.soldier_sum = theoretical_soldier_sum }
		add_to_variable = { PREV.farmer_sum = theoretical_farmer_sum }
		add_to_variable = { PREV.artisan_sum = theoretical_artisan_sum }
		add_to_variable = { PREV.substinents_sum = theoretical_substinents_sum }
		add_to_variable = { PREV.unemployed_sum = theoretical_unemployed }
		add_to_variable = { PREV.capitalist_sum = theoretical_capitalist_sum }	
		add_to_variable = { PREV.bureaucrat_sum = theoretical_bureaucrat_sum}		
	}
	log = "Workforce: L [?labourer_sum], W [?worker_sum], S [?soldier_sum], F [?farmer_sum]"
	log = "Workforce: A [?artisan_sum], Sb [?substinents_sum], U [?unemployed_sum], C [?capitalist_sum], B [?bureaucrat_sum]"
}

reset_potential_problems = {
	every_owned_state = {
		set_variable = { theoretical_labourer_sum = 0 }
		set_variable = { theoretical_worker_sum = 0 }
		set_variable = { theoretical_soldier_sum = 0 }
		set_variable = { theoretical_farmer_sum = 0 }
		set_variable = { theoretical_artisan_sum = 0 }
		set_variable = { theoretical_substinents_sum = 0 }
		set_variable = { theoretical_unemployed = 0 }
		set_variable = { theoretical_capitalist_sum = 0 }	
		set_variable = { theoretical_bureaucrat_sum = 0}		
	}
}

employing_effect = {
	reset_potential_problems = yes
	check_state_developement = yes
	check_buildings = yes
	calculate_free_building_slots = yes
	check_resources = yes
	check_building_slots_size = yes
	check_other_state_relevant_information = yes
	calculate_employable_population = yes
	calculate_theoretical_population = yes
	calculate_unemployment_factor = yes
	calculate_conversion_labourer_worker = yes	
	calculate_conversion_lwa_capitalist_and_bureaucrat = yes
	list_worker_type = yes
}



###########################################################################################################

calculate_national_productivity_factor = {
	get_electricity_debuff = yes
	every_owned_state = {
		set_variable = { productivity_factor = 0 }

		#Takes stuff from Literacy, then State Developement and multiplies afterwards with Production Efficiency calculate_theoretical_population

		add_to_variable = { productivity_factor = literate_educated }

		set_temp_variable = { primary_factor = primary_educated }
		multiply_temp_variable = { primary_factor = 1.25 }

		add_to_variable = { productivity_factor = primary_factor}

		set_temp_variable = { high_school_factor = high_school_educated }
		multiply_temp_variable = { high_school_factor = 1.75 }

		add_to_variable = { productivity_factor = high_school_educated}

		set_temp_variable = { college_factor = college_educated }
		multiply_temp_variable = { college_factor = 3.5 }		

		add_to_variable = { productivity_factor = college_educated}

		divide_variable = { productivity_factor = 100 }
		multiply_variable = { productivity_factor = state_development }

		set_variable = { national_productivity_factor = owner:modifier@production_factory_max_efficiency_factor }
		add_to_variable = { national_productivity_factor = 0.5 }

		multiply_variable = { productivity_factor = national_productivity_factor }

		multiply_variable = { productivity_factor = overemployment_factor }

		#Also check infrastructure

		set_temp_variable = { modifier_infra_factor = 0.05 }
		multiply_temp_variable = { modifier_infra_factor = infrastructure_level }
		add_to_temp_variable = { modifier_infra_factor = 1 }
		
		multiply_variable = { productivity_factor = modifier_infra_factor }

		multiply_variable = { productivity_factor = PREV.electricity_debuff_factor }		

		#log = "[?THIS.productivity_factor] at [THIS.GetId.GetName]"

	}
}

get_total_factory = {
	set_variable = { total_factory_amount = 0 }
	every_owned_state = {
		add_to_variable = { PREV.total_factory_amount = THIS.buildings^8 }
	}
}

get_electricity_debuff = {
	get_total_factory = yes
	set_variable = { electricity_debuff_factor = 1}

	set_temp_variable = { electricity_into_variable = resource@electricity}			
	if = {
		limit = {
			check_variable = { electricity_into_variable < 0}
		}
		multiply_temp_variable = { electricity_into_variable = -1 }
		# turns positive
		divide_temp_variable = { electricity_into_variable = total_factory_amount}

		subtract_from_variable = { electricity_debuff_factor = electricity_into_variable}
		if = {
			limit = {
				check_variable = { electricity_debuff_factor < 0 }
			}
			set_temp_variable = { electricity_debuff_factor = 0 }			
		}
	}
	#log = "Electricity providence factor of [?electricity_debuff_factor]"	
}

check_individual_factory_productivity = {
	set_variable = { civ_productivity_factor = modifier@industrial_park_income_bonus }
	add_to_variable = { civ_productivity_factor = 1 }

	set_variable = { mil_productivity_factor = modifier@military_factory_income_bonus }
	add_to_variable = { mil_productivity_factor = 1 }

	set_variable = { ofp_productivity_factor = modifier@office_park_income_bonus }
	add_to_variable = { ofp_productivity_factor = 1 }

	set_variable = { stl_productivity_factor = modifier@foundry_district_income_bonus }
	add_to_variable = { stl_productivity_factor = 1 }

	set_variable = { tng_productivity_factor = modifier@metallurgy_plant_income_bonus}
	add_to_variable = { tng_productivity_factor = 1 }

	set_variable = { fod_productivity_factor = modifier@food_income_bonus }
	add_to_variable = { fod_productivity_factor = 1 }				

	set_variable = { rsc_productivity_factor = modifier@other_resources_income_bonus }
	add_to_variable = { rsc_productivity_factor = 1 }			

	#set_variable = { doc_productivity_factor = modifier@dockyard_income_bonus }
	#add_to_variable = { doc_productivity_factor = 1 }		
}

calculate_factory_gross_profits = {
	#Check how much money a building/resource makes
	calculate_national_productivity_factor = yes	
	check_individual_factory_productivity = yes
	every_owned_state = {	
			#Civs
			set_temp_variable = { baseValue = 1.75 }
			multiply_temp_variable = { baseValue = productivity_factor }
			multiply_temp_variable = { baseValue = PREV.civ_productivity_factor }
			add_to_array = {
				array = THIS.Building_Profits
				index = 0
				value = baseValue
			}

			#Mils
			set_temp_variable = { baseValue = 0.5 }
			#multiply_temp_variable = { baseValue = arms_factory_tech }
			multiply_temp_variable = { baseValue = productivity_factor }
			multiply_temp_variable = { baseValue = PREV.mil_productivity_factor }			
			add_to_array = {
				array = THIS.Building_Profits
				index = 1
				value = baseValue
			}	

			#Office
			set_temp_variable = { baseValue = 5.25 }
			#multiply_temp_variable = { baseValue = office_park_tech }
			multiply_temp_variable = { baseValue = productivity_factor }
			multiply_temp_variable = { baseValue = PREV.ofp_productivity_factor }			
			add_to_array = {
				array = THIS.Building_Profits
				index = 2
				value = baseValue
			}	

			#Steel Fac
			set_temp_variable = { baseValue = 1.25 }
			#multiply_temp_variable = { baseValue = steel_works_tech }
			multiply_temp_variable = { baseValue = productivity_factor }
			multiply_temp_variable = { baseValue = PREV.stl_productivity_factor }			
			add_to_array = {
				array = THIS.Building_Profits
				index = 3
				value = baseValue
			}	

			#Tungsten Fac 
			set_temp_variable = { baseValue = 0.75 }
			#multiply_temp_variable = { baseValue = tungsten_factory_tech }
			multiply_temp_variable = { baseValue = productivity_factor }
			multiply_temp_variable = { baseValue = PREV.tng_productivity_factor }			
			add_to_array = {
				array = THIS.Building_Profits
				index = 4
				value = baseValue
			}

			#Food
			set_temp_variable = { baseValue = 0.4 }
			#multiply_temp_variable = { baseValue = farm_tech }
			multiply_temp_variable = { baseValue = productivity_factor }
			multiply_temp_variable = { baseValue = PREV.fod_productivity_factor }			
			add_to_array = {
				array = THIS.Building_Profits
				index = 5
				value = baseValue
			}	

			#Other resources
			set_temp_variable = { baseValue = 0.5 }
			multiply_temp_variable = { baseValue = productivity_factor }
			multiply_temp_variable = { baseValue = PREV.rsc_productivity_factor }						
			add_to_array = {
				array = THIS.Building_Profits
				index = 6
				value = baseValue
			}			

			set_temp_variable = { baseValue = 2 }
			multiply_temp_variable = { baseValue = productivity_factor }
			multiply_temp_variable = { baseValue = PREV.doc_productivity_factor }						
			add_to_array = {
				array = THIS.Building_Profits
				index = 7
				value = baseValue
			}						

			#log = "Array: [?THIS.Building_Profits^0] [?THIS.Building_Profits^1] [?THIS.Building_Profits^2] [?THIS.Building_Profits^3] [?THIS.Building_Profits^4] [?THIS.Building_Profits^5] [?THIS.Building_Profits^6] at [THIS.GetID.GetName]"
	}
}

calculate_gross_factory_earnings = {
	every_owned_state = {
		set_variable = { gross_factory_earnings = 0 }

		#Civs
		set_temp_variable = { civs_gross_factory_earnings = THIS.Building_Profits^0 }
		multiply_temp_variable = { civs_gross_factory_earnings = THIS.buildings^0 }
		add_to_variable = { gross_factory_earnings = civs_gross_factory_earnings }

		#Mils + Dock
		set_temp_variable = { mils_gross_factory_earnings = THIS.Building_Profits^1 }
		multiply_temp_variable = { mils_gross_factory_earnings = THIS.buildings^1 }
		add_to_variable = { gross_factory_earnings = mils_gross_factory_earnings }


		set_temp_variable = { docks_gross_factory_earnings = THIS.Building_Profits^7 }
		multiply_temp_variable = { docks_gross_factory_earnings = THIS.buildings^2 }
		add_to_variable = { gross_factory_earnings = docks_gross_factory_earnings }

		#Office Parks

		set_temp_variable = { ofpar_gross_factory_earnings = THIS.Building_Profits^2 }
		multiply_temp_variable = { ofpar_gross_factory_earnings = THIS.buildings^3 }
		add_to_variable = { gross_factory_earnings = ofpar_gross_factory_earnings }

		#Steel Factory

		set_temp_variable = { steel_gross_factory_earnings = THIS.Building_Profits^3 }
		multiply_temp_variable = { steel_gross_factory_earnings = THIS.buildings^5 }
		add_to_variable = { gross_factory_earnings = steel_gross_factory_earnings }

		#Tungsten Factory

		set_temp_variable = { tungs_gross_factory_earnings = THIS.Building_Profits^4 }
		multiply_temp_variable = { tungs_gross_factory_earnings = THIS.buildings^6 }		
		add_to_variable = { gross_factory_earnings = tungs_gross_factory_earnings }

		#Resources

		set_temp_variable = { resou_gross_factory_earnings = THIS.Building_Profits^5 }
		multiply_temp_variable = { resou_gross_factory_earnings = THIS.resources^2 }			
		add_to_variable = { gross_factory_earnings = resou_gross_factory_earnings }

		#Food

		set_temp_variable = { food_gross_factory_earnings = THIS.Building_Profits^6 }
		multiply_temp_variable = { food_gross_factory_earnings = THIS.resources^7 }			
		add_to_variable = { gross_factory_earnings = food_gross_factory_earnings }

		#log = "[?gross_factory_earnings] at [THIS.GetID.GetName]"									

	}
}

calculate_net_poptype_earnings = {
	every_owned_state = {
		set_variable = { net_factory_earnings = gross_factory_earnings }

		#Lower-Class non-building_pops

		set_variable = { pop_substinents_gross_wage = theoretical_substinents_sum }
		multiply_variable = { pop_substinents_gross_wage = 0.2 }
		divide_variable = { pop_substinents_gross_wage = 100 }


		#Lower-Class Building/Resource Pops

		set_temp_variable = { pop_farmer_gross_wage = theoretical_farmer_sum }
		multiply_temp_variable = { pop_farmer_gross_wage = 0.7 }
		multiply_temp_variable = { pop_farmer_gross_wage = productivity_factor }
		divide_temp_variable = { pop_farmer_gross_wage = 100 }

		set_temp_variable = { pop_labourer_gross_wage = theoretical_labourer_sum }
		multiply_temp_variable = { pop_labourer_gross_wage = 1.0 }
		multiply_temp_variable = { pop_labourer_gross_wage = productivity_factor }
		divide_temp_variable = { pop_labourer_gross_wage = 100 }

		set_variable = { pop_lowerclass_gross_wage = pop_labourer_gross_wage }
		add_to_variable = { pop_lowerclass_gross_wage = pop_farmer_gross_wage }

		subtract_from_variable = { net_factory_earnings = pop_lowerclass_gross_wage }

		#Soldiers

		set_temp_variable = { pop_soldier_gross_wage = theoretical_soldier_sum }
		multiply_temp_variable = { pop_soldier_gross_wage = 1.6 }
		multiply_temp_variable = { pop_soldier_gross_wage = productivity_factor }
		divide_temp_variable = { pop_soldier_gross_wage = 100 }	

		#Middle-Class non-building_pops

		set_variable = { pop_artisan_gross_wage = theoretical_artisan_sum }
		multiply_variable = { pop_artisan_gross_wage = 2.2 }
		multiply_variable = { pop_artisan_gross_wage = productivity_factor }
		divide_variable = { pop_artisan_gross_wage = 100 }	

		#Middle-Class Building/Resource Pops	

		set_temp_variable = { pop_worker_gross_wage = theoretical_worker_sum }
		multiply_temp_variable = { pop_worker_gross_wage = 2.0 }
		multiply_temp_variable = { pop_worker_gross_wage = productivity_factor }
		divide_temp_variable = { pop_worker_gross_wage = 100 }		

		set_variable = { pop_middleclass_gross_wage = pop_worker_gross_wage }

		subtract_from_variable = { net_factory_earnings = pop_middleclass_gross_wage }		

		#Upper-Class Pop

		set_temp_variable = { pop_bureaucrat_gross_wage = theoretical_bureaucrat_sum }
		multiply_temp_variable = { pop_bureaucrat_gross_wage = 3.5 }
		multiply_temp_variable = { pop_bureaucrat_gross_wage = productivity_factor }
		divide_temp_variable = { pop_bureaucrat_gross_wage = 100 }		

		set_variable = { pop_upperclass_gross_wage = pop_bureaucrat_gross_wage }

		set_temp_variable = { pop_capitalist_gross_wage = theoretical_capitalist_sum }
		if = {
			limit = { check_variable = PREV.economic_x_axis < 6}
			multiply_temp_variable = { pop_capitalist_gross_wage = 2.5 }
		}
		else = {
			multiply_temp_variable = { pop_capitalist_gross_wage = 100 }
		}
		multiply_temp_variable = { pop_capitalist_gross_wage = productivity_factor }
		divide_temp_variable = { pop_capitalist_gross_wage = 100 }		

		add_to_variable = { pop_upperclass_gross_wage = pop_capitalist_gross_wage }


		#log = "[?THIS.GetID.GetName]: [?net_factory_earnings] compared to [?gross_factory_earnings], [?pop_lowerclass_gross_wage], [?pop_middleclass_gross_wage]"
		#log = "[?THIS.GetID.GetName]: Substinents Earning: [?pop_substinents_gross_wage], Artisan Earning: [?pop_artisan_gross_wage]^^"

	}
}

testing = {
	every_country = {
		gdp_calculation_effect = yes
	}
}

gdp_calculation_effect = {
	#get_technology_building_bonuses = yes	#Sets Tech and Modifier bonuses for buildings
	generate_tax_info = yes 				#Sets Laffer Curve and Updates GUI

	employing_effect = yes
	calculate_factory_gross_profits = yes
	calculate_gross_factory_earnings = yes
	calculate_net_poptype_earnings = yes
	calculate_take_taxes_from_people = yes
	calculate_sum_up_total = yes

	GDP_Extra_Calcs = yes					#Extra Logging and GUI Effects
}

calculate_take_taxes_from_people = {
	set_variable = { IncomeTotal = 0 }
	set_variable = { IncomeCheck = 0 }	
	laffer_curve_function = yes
	set_variable = { pop_lowerclass_tax_rate = effective_tax_rate }
	set_variable = { pop_middleclass_tax_rate = effective_tax_rate }
	set_variable = { pop_upperclass_tax_rate = effective_tax_rate }
	set_variable = { pop_corporateclass_tax_rate = effective_tax_rate }

	multiply_variable = { pop_lowerclass_tax_rate = modifier@tax_rate_lower_class }
	multiply_variable = { pop_middleclass_tax_rate = modifier@tax_rate_middle_class }
	multiply_variable = { pop_upperclass_tax_rate = modifier@tax_rate_upper_class }
	multiply_variable = { pop_corporateclass_tax_rate = modifier@tax_rate_corporate }

	every_owned_state = {
		set_temp_variable = { pop_lowerclass_taken_wage = pop_lowerclass_gross_wage }
		multiply_temp_variable = { pop_lowerclass_taken_wage = owner:pop_lowerclass_tax_rate }

		set_temp_variable = { pop_substinents_taken_wage = pop_substinents_gross_wage }
		multiply_temp_variable = { pop_substinents_taken_wage = owner:pop_lowerclass_tax_rate }
		add_to_temp_variable = { pop_lowerclass_taken_wage  = pop_substinents_taken_wage}

		add_to_variable = { PREV.IncomeTotal = pop_lowerclass_taken_wage }

		set_variable = { pop_lowerclass_net_wage = pop_lowerclass_gross_wage }
		multiply_variable = { pop_lowerclass_taken_wage = 0.5 }
		subtract_from_variable = { pop_lowerclass_net_wage = pop_lowerclass_taken_wage} 

		set_temp_variable = { pop_middleclass_taken_wage = pop_middleclass_gross_wage }
		multiply_temp_variable = { pop_middleclass_taken_wage = owner:pop_middleclass_tax_rate }

		set_temp_variable = { pop_artisan_taken_wage = pop_artisan_gross_wage }
		multiply_temp_variable = { pop_artisan_taken_wage = owner:pop_middleclass_tax_rate }
		add_to_temp_variable = { pop_middleclass_taken_wage  = pop_artisans_taken_wage }

		add_to_variable = { PREV.IncomeTotal = pop_middleclass_taken_wage }

		set_variable = { pop_middleclass_net_wage = pop_middleclass_gross_wage }
		multiply_variable = { pop_middleclass_taken_wage = 0.5 }		
		subtract_from_variable = { pop_middleclass_net_wage = pop_middleclass_taken_wage} 

		if = {
			limit = { check_variable = { net_factory_earnings > 0 }}
			set_temp_variable = { net_factory_taxed_earnings = net_factory_earnings }
			multiply_temp_variable = { net_factory_taxed_earnings = owner:pop_corporateclass_tax_rate }
			add_to_variable = { PREV.IncomeTotal = net_factory_taxed_earnings }			
		}
		#log = "[?owner:pop_middleclass_tax_rate]"
	}	
	divide_variable = { IncomeTotal = 100 }
	set_variable = {
		tax_display = IncomeTotal
	}
	log = "[?IncomeTotal]"
}

calculate_sum_up_total = {
	set_variable = { grossdomesticproduct = 0 }
	every_owned_state = {
		add_to_variable = { PREV.grossdomesticproduct = net_factory_earnings}
		add_to_variable = { PREV.grossdomesticproduct = pop_lowerclass_net_wage}
		add_to_variable = { PREV.grossdomesticproduct = pop_middleclass_net_wage}
		add_to_variable = { PREV.grossdomesticproduct = pop_substinents_gross_wage}
		add_to_variable = { PREV.grossdomesticproduct = pop_artisan_gross_wage}
	}
	divide_variable = { grossdomesticproduct = 10 }

	set_temp_variable = { finance_extra_gdp = grossdomesticproduct }
	divide_temp_variable = { finance_extra_gdp = 24 }
	add_to_variable = { IncomeCheck = finance_extra_gdp }
	add_to_variable = { IncomeCheck = IncomeTotal }


	#log = "[?grossdomesticproduct]"
}
#Tax Debug
give_everyone_base_tax = {
	every_country = {
		add_ideas = {
			policy_taxrate_lower_temp_1
			policy_taxrate_lower_middle_temp_1
			policy_taxrate_corporate_temp_1
			policy_taxrate_temp_1
		}
	}
}

#Expenses
get_average_development = {
	set_variable = { average_development = 1 }
	every_owned_state = {
		add_to_variable = { PREV.average_development = THIS.state_development}
	}
	divide_variable = { average_development = num_owned_states }
}

get_total_infrastructure = {
	set_variable = { total_infrastructure = 1 }
	every_owned_state = { 
		add_to_variable = { PREV.total_infrastructure = building_level@state_infrastructure }
		add_to_variable = { PREV.total_infrastructure = building_level@infrastructure }
		add_to_variable = { PREV.total_infrastructure = building_level@water_infrastructure }		
	}
}

calc_public_services_expenditure = {
	#gives out expenditure at 50%
	set_variable = { public_services_expenditure = total_infrastructure }
	multiply_variable = { public_services_expenditure = 0.01 }	
	multiply_variable = { public_services_expenditure = max_manpower_k }

	#reduce it more
	divide_variable = { public_services_expenditure = 100000 }	

	#now apply multiplier of idea
}

calc_land_army_expenditure = {
	set_variable = { land_army_expenditure = average_development }
	multiply_variable = { land_army_expenditure = deployed_army_manpower_k }
	multiply_variable = { land_army_expenditure = 2 }

	set_temp_variable = { land_army_deployment_expenditure = average_development}
	multiply_temp_variable = { land_army_deployment_expenditure = amount_manpower_in_deployment_queue }
	divide_temp_variable = {land_army_deployment_expenditure = 1000 }

	add_to_variable = { land_army_expenditure = land_army_deployment_expenditure}
	divide_variable = { land_army_expenditure = 10000}
}

calc_air_army_expenditure = {
	set_variable = { air_army_expenditure = average_development }
	multiply_variable = { air_army_expenditure = deployed_airforce_manpower_k }
	multiply_variable = { air_army_expenditure = 4 }

	divide_variable = { air_army_expenditure = 10000}
}

calc_navy_army_expenditure = {
	set_variable = { navy_army_expenditure = average_development }
	multiply_variable = { navy_army_expenditure = deployed_navy_manpower_k }
	multiply_variable = { navy_army_expenditure = 4 }

	divide_variable = { navy_army_expenditure = 10000}
}

calc_nuke_army_expenditure = {
	set_variable = { nuke_army_expenditure = average_development }
	every_owned_state = {
		add_to_variable = { PREV.nuke_army_expenditure = building_level@nuclear_reactor }
	}

	multiply_variable = { nuke_army_expenditure = 100 }

	set_temp_variable = { srbm_expenditure = num_equipment@srbm }
	multiply_temp_variable = { srbm_expenditure = 5 }
	set_temp_variable = { irbm_expenditure = num_equipment@irbm }
	multiply_temp_variable = { irbm_expenditure = 30 }
	set_temp_variable = { icbm_expenditure = num_equipment@icbm }
	multiply_temp_variable = { icbm_expenditure = 75 }
	set_temp_variable = { slbm_expenditure = num_equipment@slbm }
	multiply_temp_variable = { slbm_expenditure = 20 }

	set_temp_variable = { nuke_expenditure = num_of_nukes }
	multiply_temp_variable { num_of_nukes = 10 }

	add_to_variable = { nuke_army_expenditure = srbm_expenditure }
	add_to_variable = { nuke_army_expenditure = irbm_expenditure }
	add_to_variable = { nuke_army_expenditure = icbm_expenditure }
	add_to_variable = { nuke_army_expenditure = slbm_expenditure }
	add_to_variable = { nuke_army_expenditure = nuke_expenditure }

	divide_variable = { nuke_army_expenditure = 10000}
}

#SWF Stuff
get_technology_building_bonuses = {
	set_variable = {
		arms_factory_tech = 1
	}
	add_to_variable = {	#policy bonus
		arms_factory_tech = modifier@modifier_arms_factory_income 
	}

	set_variable = {
		farm_tech = 1
	}
	if = {
		limit = {
			has_tech = agriculture_I
		}
		add_to_variable = {
			farm_tech = 0.05
		}
	}
	if = {
		limit = {
			has_tech = agriculture_II
		}
		add_to_variable = {
			farm_tech = 0.05
		}
	}
	if = {
		limit = {
			has_tech = agriculture_III
		}
		add_to_variable = {
			farm_tech = 0.05
		}
	}
	if = {
		limit = {
			has_tech = agriculture_IV
		}
		add_to_variable = {
			farm_tech = 0.05
		}
	}
	if = {
		limit = {
			has_tech = agriculture_V
		}
		add_to_variable = {
			farm_tech = 0.05
		}
	}
	if = {
		limit = {
			has_tech = agriculture_VI
		}
		add_to_variable = {
			farm_tech = 0.05
		}
	}
	if = {
		limit = {
			has_tech = agriculture_VII
		}
		add_to_variable = {
			farm_tech = 0.05
		}
	}
	if = {
		limit = {
			has_tech = agriculture_VIII
		}
		add_to_variable = {
			farm_tech = 0.05
		}
	}
	add_to_variable = {
		farm_tech = farm_income_bonus
	}

	set_variable = {
		dockyard_tech = 1
	}
	if = {
		limit = {
			has_tech = logistics_I
		}
		add_to_variable = {
			dockyard_tech = 0.05
		}
	}
	if = {
		limit = {
			has_tech = logistics_II
		}
		add_to_variable = {
			dockyard_tech = 0.05
		}
	}
	if = {
		limit = {
			has_tech = logistics_III
		}
		add_to_variable = {
			dockyard_tech = 0.05
		}
	}
	if = {
		limit = {
			has_tech = logistics_IV_A
		}
		add_to_variable = {
			dockyard_tech = 0.05
		}
	}
	if = {
		limit = {
			has_tech = logistics_IV_B
		}
		add_to_variable = {
			dockyard_tech = 0.05
		}
	}
	if = {
		limit = {
			has_tech = logistics_V_A
		}
		add_to_variable = {
			dockyard_tech = 0.05
		}
	}
	if = {
		limit = {
			has_tech = logistics_V_B
		}
		add_to_variable = {
			dockyard_tech = 0.05
		}
	}
	if = {
		limit = {
			has_tech = logistics_VI
		}
		add_to_variable = {
			dockyard_tech = 0.05
		}
	}
	if = {
		limit = {
			has_tech = logistics_VII_A
		}
		add_to_variable = {
			dockyard_tech = 0.05
		}
	}
	if = {
		limit = {
			has_tech = logistics_VII_B
		}
		add_to_variable = {
			dockyard_tech = 0.05
		}
	}
	if = {
		limit = {
			has_tech = logistics_VIII_A
		}
		add_to_variable = {
			dockyard_tech = 0.05
		}
	}
	if = {
		limit = {
			has_tech = logistics_VIII_B
		}
		add_to_variable = {
			dockyard_tech = 0.05
		}
	}
	if = {
		limit = {
			has_tech = logistics_IX
		}
		add_to_variable = {
			dockyard_tech = 0.05
		}
	}
	if = {
		limit = {
			has_tech = logistics_X
		}
		add_to_variable = {
			dockyard_tech = 0.05
		}
	}
	if = {
		limit = {
			has_tech = logistics_XI
		}
		add_to_variable = {
			dockyard_tech = 0.05
		}
	}
	if = {
		limit = {
			has_tech = logistics_XII
		}
		add_to_variable = {
			dockyard_tech = 0.05
		}
	}
	if = {
		limit = {
			has_tech = logistics_XIII
		}
		add_to_variable = {
			dockyard_tech = 0.05
		}
	}
	if = {
		limit = {
			has_tech = logistics_XIV
		}
		add_to_variable = {
			dockyard_tech = 0.05
		}
	}

	set_variable = {
		oil_refinery_tech = 1
	}
	if = {
		limit = {
			has_tech = ww_oil
		}
		add_to_variable = {
			oil_refinery_tech = 0.15
		}
	}
	if = {
		limit = {
			has_tech = plastics_I
		}
		add_to_variable = {
			oil_refinery_tech = 0.15
		}
	}
	if = {
		limit = {
			has_tech = plastics_II
		}
		add_to_variable = {
			oil_refinery_tech = 0.15
		}
	}
	if = {
		limit = {
			has_tech = plastics_III
		}
		add_to_variable = {
			oil_refinery_tech = 0.15
		}
	}
	if = {
		limit = {
			has_tech = plastics_IV
		}
		add_to_variable = {
			oil_refinery_tech = 0.15
		}
	}
	if = {
		limit = {
			has_tech = plastics_V
		}
		add_to_variable = {
			oil_refinery_tech = 0.15
		}
	}
	if = {
		limit = {
			has_tech = plastics_VI
		}
		add_to_variable = {
			oil_refinery_tech = 0.15
		}
	}
	if = {
		limit = {
			has_tech = plastics_VII
		}
		add_to_variable = {
			oil_refinery_tech = 0.15
		}
	}

	#steel_factory
	set_variable = {
		steel_works_tech = 1
	}
	if = {
		limit = {
			has_tech = materials_I
		}
		add_to_variable = {
			steel_works_tech = 0.15
		}
	}
	if = {
		limit = {
			has_tech = materials_II
		}
		add_to_variable = {
			steel_works_tech = 0.15
		}
	}
	if = {
		limit = {
			has_tech = materials_III
		}
		add_to_variable = {
			steel_works_tech = 0.15
		}
	}
	if = {
		limit = {
			has_tech = materials_IV
		}
		add_to_variable = {
			steel_works_tech = 0.15
		}
	}
	if = {
		limit = {
			has_tech = materials_V
		}
		add_to_variable = {
			steel_works_tech = 0.15
		}
	}
	if = {
		limit = {
			has_tech = materials_VI
		}
		add_to_variable = {
			steel_works_tech = 0.15
		}
	}
	if = {
		limit = {
			has_tech = materials_VII
		}
		add_to_variable = {
			steel_works_tech = 0.15
		}
	}
	if = {
		limit = {
			has_tech = materials_VIII
		}
		add_to_variable = {
			steel_works_tech = 0.15
		}
	}
	#tungsten_factory
	set_variable = {
		tungsten_factory_tech = 1
	}
	if = {
		limit = {
			has_tech = chemistry_I
		}
		add_to_variable = {
			tungsten_factory_tech = 0.15
		}
	}
	if = {
		limit = {
			has_tech = chemistry_II
		}
		add_to_variable = {
			tungsten_factory_tech = 0.15
		}
	}
	if = {
		limit = {
			has_tech = chemistry_III
		}
		add_to_variable = {
			tungsten_factory_tech = 0.15
		}
	}
	if = {
		limit = {
			has_tech = chemistry_IV
		}
		add_to_variable = {
			tungsten_factory_tech = 0.15
		}
	}
	if = {
		limit = {
			has_tech = chemistry_V
		}
		add_to_variable = {
			tungsten_factory_tech = 0.15
		}
	}
	if = {
		limit = {
			has_tech = chemistry_VI
		}
		add_to_variable = {
			tungsten_factory_tech = 0.15
		}
	}
	if = {
		limit = {
			has_tech = chemistry_VII
		}
		add_to_variable = {
			tungsten_factory_tech = 0.15
		}
	}
	#office_park x2 +15%		office_park_total
	set_variable = {
		office_park_tech = 1
	}
	if = {
		limit = {
			has_tech = consumer_electronics_I
		}
		add_to_variable = {
			office_park_tech = 0.15
		}
	}
	if = {
		limit = {
			has_tech = consumer_electronics_II
		}
		add_to_variable = {
			office_park_tech = 0.15
		}
	}
	if = {
		limit = {
			has_tech = consumer_electronics_III
		}
		add_to_variable = {
			office_park_tech = 0.15
		}
	}
	if = {
		limit = {
			has_tech = consumer_electronics_IV
		}
		add_to_variable = {
			office_park_tech = 0.15
		}
	}
	if = {
		limit = {
			has_tech = consumer_electronics_V
		}
		add_to_variable = {
			office_park_tech = 0.15
		}
	}
	if = {
		limit = {
			has_tech = consumer_electronics_VI
		}
		add_to_variable = {
			office_park_tech = 0.15
		}
	}
	if = {
		limit = {
			has_tech = consumer_electronics_VII
		}
		add_to_variable = {
			office_park_tech = 0.15
		}
	}
	if = {
		limit = {
			has_tech = consumer_electronics_VIII
		}
		add_to_variable = {
			office_park_tech = 0.15
		}
	}
	add_to_variable = {
		office_park_tech = modifier@office_park_income_adjustment
	}
	if = {
		limit = {
			has_country_flag = office_park_penalty
		}
		multiply_variable = {
			office_park_total = office_park_penalty_rate
		}
	}
}
