calculate_development_modifier_policy = {
	set_variable = {
		social_cost_base = 0
	}
	set_variable = {
		outcrowding_limit = 1
	}	#Limit on max domestic loans
	call_policy_setup_values = yes
    set_variable = {
        social_cost_modifier_total = 0
    }
    add_to_variable = { social_cost_modifier_total = social_cost_dev_level_five }
    add_to_variable = { social_cost_modifier_total = social_cost_dev_level_four }
    add_to_variable = { social_cost_modifier_total = social_cost_dev_level_three }
    add_to_variable = { social_cost_modifier_total = social_cost_dev_level_two }
    add_to_variable = { social_cost_modifier_total = social_cost_dev_level_one }
    add_to_variable = { social_cost_modifier_total = social_cost_dev_level_zero }

    divide_variable = { social_cost_dev_level_five = social_cost_modifier_total }
    divide_variable = { social_cost_dev_level_four = social_cost_modifier_total }
    divide_variable = { social_cost_dev_level_three = social_cost_modifier_total }
    divide_variable = { social_cost_dev_level_two = social_cost_modifier_total }
    divide_variable = { social_cost_dev_level_one = social_cost_modifier_total }
    divide_variable = { social_cost_dev_level_zero = social_cost_modifier_total }

	multiply_variable = { social_cost_dev_level_five = 5 }
	multiply_variable = { social_cost_dev_level_four = 4 }
	multiply_variable = { social_cost_dev_level_three = 3 }
	multiply_variable = { social_cost_dev_level_two = 2 }
	multiply_variable = { social_cost_dev_level_one = 1 }
	multiply_variable = { social_cost_dev_level_zero = 0.25 }

	set_variable = {
		social_cost_dev_modifier = 0
	}
	add_to_variable = { social_cost_dev_modifier = social_cost_dev_level_five }
	add_to_variable = { social_cost_dev_modifier = social_cost_dev_level_four }
	add_to_variable = { social_cost_dev_modifier = social_cost_dev_level_three }
	add_to_variable = { social_cost_dev_modifier = social_cost_dev_level_two }
	add_to_variable = { social_cost_dev_modifier = social_cost_dev_level_one }
	add_to_variable = { social_cost_dev_modifier = social_cost_dev_level_zero }

	#Round to closest, get percentage difference, multiply by X per Y?

	set_variable = {
		social_cost_dev_modifier_rounded = social_cost_dev_modifier
	}
	set_variable = {
		development_base_value = social_cost_dev_modifier
	}
	round_variable = social_cost_dev_modifier_rounded
	if = {
		limit = {
			check_variable = {
				social_cost_dev_modifier_rounded = 5
			}
		}
		set_variable = {
			social_cost_dev_modifier_x = 2
		}
	}
	else_if = {
		limit = {
			check_variable = {
				social_cost_dev_modifier_rounded = 4
			}
		}
		set_variable = {
			social_cost_dev_modifier_x = 1.75
		}
	}
	else_if = {
		limit = {
			check_variable = {
				social_cost_dev_modifier_rounded = 3
			}
		}
		set_variable = {
			social_cost_dev_modifier_x = 1.5
		}
	}
	else_if = {
		limit = {
			check_variable = {
				social_cost_dev_modifier_rounded = 2
			}
		}
		set_variable = {
			social_cost_dev_modifier_x = 1.25
		}
	}
	else_if = {
		limit = {
			check_variable = {
				social_cost_dev_modifier_rounded = 1
			}
		}
		set_variable = {
			social_cost_dev_modifier_x = 1
		}
	}
	else = {
		set_variable = {
			social_cost_dev_modifier_x = 0.75
		}		
	}
	set_variable = {
		develoment_average_laffer = social_cost_dev_modifier
	}
	divide_variable = { social_cost_dev_modifier = social_cost_dev_modifier_rounded }
	multiply_variable = {
		social_cost_dev_modifier = social_cost_dev_modifier_x
	}

	if = {
		limit = {
			check_variable = {
				social_cost_dev_modifier < 0.75
			}
		}
		set_variable = {	#Floor
			social_cost_dev_modifier = 0.75
		}
	}

	#Set X and Multiply by X?
	#0		1	2		3		4		5
	#0.75	1	1.25	1.5		1.75	2
}
call_policy_setup_values = {
	every_owned_state = {
		state_population_category_check = yes
		if = {
			limit = {
				development_level_five_check = yes
			}
			add_to_variable = {
				ROOT.social_cost_dev_level_five = state_population_k
			}
		}
		else_if = {
			limit = {
				development_level_four_check = yes
			}
			add_to_variable = {
				ROOT.social_cost_dev_level_four = state_population_k
			}
		}
		else_if = {
			limit = {
				development_level_three_check = yes
			}
			add_to_variable = {
				ROOT.social_cost_dev_level_three = state_population_k
			}
		}
		else_if = {
			limit = {
				development_level_two_check = yes
			}
			add_to_variable = {
				ROOT.social_cost_dev_level_two = state_population_k
			}
		}
		else_if = {
			limit = {
				development_level_one_check = yes
			}
			add_to_variable = {
				ROOT.social_cost_dev_level_one = state_population_k
			}
		}
		else_if = {
			limit = {
				development_level_zero_check = yes
			}
			add_to_variable = {
				ROOT.social_cost_dev_level_zero = state_population_k
			}
		}
		else = { }
		income_effect_every_owned_scope = yes
	}
}
income_effect_every_owned_scope = {
	add_to_variable = {
		ROOT.outcrowding_limit = building_level@office_park
	}

	add_to_variable = {
		ROOT.social_cost_base = state_population_k
	}
	add_to_variable = {
		ROOT.strategic_forces_expend = building_level@nuclear_reactor
	}
	add_to_variable = {
		ROOT.industrial_complex_total = building_level@industrial_complex
	}
	add_to_variable = {
		ROOT.farm_total = building_level@agri_industrial_complex
	}
	add_to_variable = {
		ROOT.dockyard_total = building_level@dockyard
	}
	add_to_variable = {
		ROOT.oil_refinery_total = building_level@synthetic_refinery
	}
	add_to_variable = {
		ROOT.steel_works_total = building_level@steel_factory
	}
	add_to_variable = {
		ROOT.tungsten_factory_total = building_level@tungsten_factory
	}
	add_to_variable = {
		ROOT.fossil_fuel_powerplant_total = building_level@fossil_fuel_powerplant
	}
	add_to_variable = {
		ROOT.renewable_powerplant_total = building_level@renewable_powerplant
	}
	add_to_variable = {
		ROOT.nuclear_powerplant_total = building_level@nuclear_powerplant
	}
	add_to_variable = {
		ROOT.tourism_infrastructure_total = tourism_infrastructure
	}
	add_to_variable = {
		ROOT.office_park_total = building_level@office_park
	}		#+2
	add_to_variable = {
		ROOT.trade_infrastructure_total = building_level@air_base
	}
	#add_to_variable = { ROOT.trade_infrastructure_total = building_level@naval_base }
	add_to_variable = {
		ROOT.trade_infrastructure_total = office_park_total
	}
	#
	add_to_variable = {
		ROOT.trade_infrastructure_total = building_level@state_infrastructure
	}
	if = {
		#Add to upgrade progress
		limit = {
			check_variable = {
				upgrade_progress > 0
			}
			OR = {
				has_state_category = pop1
				has_state_category = pop2
				has_state_category = pop1dev1
				has_state_category = pop2dev1
				has_state_category = pop1dev2
				has_state_category = pop2dev2
				has_state_category = pop1dev3
				has_state_category = pop2dev3
				has_state_category = pop1dev4
				has_state_category = pop2dev4
			}
		}
		add_to_variable = {
			upgrade_progress = global.upgrade_per_month_fast
		}
	}
	else_if = {
		limit = {
			check_variable = {
				upgrade_progress > 0
			}
			OR = {
				has_state_category = pop3
				has_state_category = pop4
				has_state_category = pop5
				has_state_category = pop7
				has_state_category = pop3dev1
				has_state_category = pop4dev1
				has_state_category = pop5dev1
				has_state_category = pop7dev1
				has_state_category = pop3dev2
				has_state_category = pop4dev2
				has_state_category = pop5dev2
				has_state_category = pop7dev2
				has_state_category = pop3dev3
				has_state_category = pop4dev3
				has_state_category = pop5dev3
				has_state_category = pop7dev3
				has_state_category = pop3dev4
				has_state_category = pop4dev4
				has_state_category = pop5dev4
				has_state_category = pop7dev4
			}
		}
		add_to_variable = {
			upgrade_progress = global.upgrade_per_month_nominal
		}
	}
	else_if = {
		limit = {
			check_variable = {
				upgrade_progress > 0
			}
			OR = {
				has_state_category = pop10
				has_state_category = pop15
				has_state_category = pop10dev1
				has_state_category = pop15dev1
				has_state_category = pop10dev2
				has_state_category = pop15dev2
				has_state_category = pop10dev3
				has_state_category = pop15dev3
				has_state_category = pop10dev4
				has_state_category = pop15dev4
			}
		}
		add_to_variable = {
			upgrade_progress = global.upgrade_per_month_slow
		}
	}
	else_if = {
		limit = {
			check_variable = {
				upgrade_progress > 0
			}
			OR = {
				has_state_category = pop20
				has_state_category = pop20dev1
				has_state_category = pop20dev2
				has_state_category = pop20dev3
				has_state_category = pop20dev4
			}
		}
		add_to_variable = {
			upgrade_progress = global.upgrade_per_month_marathon
		}
	}
	if = {
		limit = {
			check_variable = {
				upgrade_progress > 99
			}
		}			#Upgrade state if reached full progress
		Upgrade_State_effect = yes
	}
	#Measure cost of state upgrades for tooltip
	if = {
		limit = {

				is_ai = no

		}			#AI has no use for this data and would only waste processing power. Less AI means less AI lag so it balances as players control more of the world, effectively not creating lag at all.
		full_upgrade_estimate = yes
	}
}

income_effect = {
	calculate_development_modifier_policy = yes
	gdp_calculation_effect = yes
	#DO NOT TOUCH FILE WITHOUT APPROVAL; IDEALLY FROM SWF
	set_variable = {
		grossdomesticproduct_influence_limit = grossdomesticproduct
	}
	multiply_variable = {
		grossdomesticproduct_influence_limit = 5
	}
	set_variable = {
		upgrade_estimate_preindustrial = 0
	}
	set_variable = {
		upgrade_estimate_industrial = 0
	}
	set_variable = {
		upgrade_estimate_developed = 0
	}
	set_variable = {
		upgrade_estimate_modern = 0
	}
	set_variable = {
		upgrade_estimate_automated = 0
	}
	set_variable = {
		num_of_preindustrial_states = 0
	}
	set_variable = {
		num_of_industrial_states = 0
	}
	set_variable = {
		num_of_developed_states = 0
	}
	set_variable = {
		num_of_modern_states = 0
	}
	set_variable = {
		num_of_automated_states = 0
	}
	#DEBUG#
	if = {
		limit = {
			NOT = {
				has_country_flag = fiscal_policies_set
			}
		}
		starting_policies = yes
	}
	else_if = {
		limit = {
			NOT = {
				has_country_flag = flag_default_social_set
			}
		}
		default_social_policies = yes
	}
	#DEBUG#
	#edict_expenditure = yes
	corruption_idea_calc = yes
	military_expenditure = yes
	flag_building_macro = yes
	tax_rate = yes
	domestic_bond_calc = yes
	mercenary_calc = yes
	religious_drift = yes
	social_indices = yes
	set_variable = {
		CorruptPolicyExcess = CorruptionLevel
	}
	multiply_variable = {
		CorruptPolicyExcess = 0.2
	}
	set_variable = {
		ROOT.trade_infrastructure_total = 0
	}
	#reset upgradeable states
	set_variable = {
		upgrade_estimate_preindustrial = 0
	}
	set_variable = {
		num_of_preindustrial_states = 0
	}
	clear_array = upgrade_estimate_preindustrial_states_array
	clear_array = upgrade_estimate_preindustrial_states_cost_array
	set_variable = {
		upgrade_estimate_industrial = 0
	}
	set_variable = {
		num_of_industrial_states = 0
	}
	clear_array = upgrade_estimate_industrial_states_array
	clear_array = upgrade_estimate_industrial_states_cost_array
	set_variable = {
		upgrade_estimate_developed = 0
	}
	set_variable = {
		num_of_developed_states = 0
	}
	clear_array = upgrade_estimate_developed_states_array
	clear_array = upgrade_estimate_developed_states_cost_array
	set_variable = {
		upgrade_estimate_modern = 0
	}
	set_variable = {
		num_of_modern_states = 0
	}
	clear_array = upgrade_estimate_modern_states_array
	clear_array = upgrade_estimate_modern_states_cost_array
	set_variable = {
		upgrade_estimate_automated = 0
	}
	set_variable = {
		num_of_automated_states = 0
	}
	clear_array = upgrade_estimate_automated_states_array
	clear_array = upgrade_estimate_automated_states_cost_array
	####
	set_variable = {
		strategic_forces_expend = 0
	}

	#Social Policy Expenses

	welfare_expenditure = yes
	cpi_expenditure = yes
	edu_expenditure = yes
	health_expenditure = yes
	public_expenditure = yes

	multiply_variable = {
		ROOT.trade_infrastructure_total = 8
	}
	set_variable = {
		ROOT.trade_infrastructure_total_available = ROOT.trade_infrastructure_total
	}
	subtract_from_variable = {
		ROOT.trade_infrastructure_total_available = ROOT.trade_infrastructure_total_used
	}
	#Tourism Infrastructure#
	multiply_variable = {
		tourism_infrastructure_total = global.GlobalCredit
	}	#DIVIDER
	set_variable = {
		tourism_infrastructure_tech = 1
	}	#No techs for tourism so always 1
	add_to_variable = {
		tourism_infrastructure_tech = commerce_credit_factor_difference
	}	#Tourism affected by commerce
	multiply_variable = {
		tourism_infrastructure_total = tourism_infrastructure_tech
	}
	multiply_variable = {
		tourism_infrastructure_total = stability
	}	#Stability affects tourism
	add_to_variable = {
		IncomeTotal = tourism_infrastructure_total
	}
	set_variable = {
		TI_Display = tourism_infrastructure_total
	}
	#if = { limit = { is_ai = no } #log = "current income = [?IncomeTotal] / tourism_infrastructure_total = [?tourism_infrastructure_total]" }
	#Overall Multipliers#
	set_variable = {
		resource_income = 0
	}
	set_variable = {
		oil_exports = 0
	}
	set_variable = {
		aluminium_exports = 0
	}
	set_variable = {
		rubber_exports = 0
	}
	set_variable = {
		tungsten_exports = 0
	}
	set_variable = {
		steel_exports = 0
	}
	set_variable = {
		chromium_exports = 0
	}
	for_each_scope_loop = {
		array = Nuclear_Export_List
		if = {
			limit = {
				NOT = {
					is_in_array = {
						array = ROOT.Export_List
						value = THIS.id
					}
				}
			}
			add_to_array = {
				ROOT.Export_List = THIS.id
			}
			set_temp_variable = {
				chromium_export_check = 1
			}
			add_to_variable = {
				ROOT.chromium_exports = ROOT.chromiumExportTargetMonthly^THIS
			}
		}
	}
	clear_array = ROOT.Export_List
	for_each_scope_loop = {
		array = Food_Export_List
		if = {
			limit = {
				NOT = {
					is_in_array = {
						array = ROOT.Export_List
						value = THIS.id
					}
				}
			}
			add_to_array = {
				ROOT.Export_List = THIS.id
			}
			add_to_variable = {
				ROOT.rubber_exports = ROOT.foodExportTargetMonthly^THIS
			}
		}
	}
	clear_array = ROOT.Export_List
	for_each_scope_loop = {
		array = Oil_Export_List
		if = {
			limit = {
				NOT = {
					is_in_array = {
						array = ROOT.Export_List
						value = THIS.id
					}
				}
			}
			add_to_array = {
				ROOT.Export_List = THIS.id
			}
			add_to_variable = {
				ROOT.oil_exports = ROOT.oilExportTargetMonthly^THIS
			}
		}
	}
	clear_array = ROOT.Export_List
	for_each_scope_loop = {
		array = Steel_Export_List
		if = {
			limit = {
				NOT = {
					check_variable = {
						steel_export_check = 1
					}
				}
			}
			set_temp_variable = {
				steel_export_check = 1
			}
			add_to_variable = {
				ROOT.steel_exports = ROOT.steelExportTargetMonthly^THIS
			}
		}
	}
	clear_array = ROOT.Export_List
	for_each_scope_loop = {
		array = Aluminium_Export_List
		if = {
			limit = {
				NOT = {
					is_in_array = {
						array = ROOT.Export_List
						value = THIS.id
					}
				}
			}
			add_to_array = {
				ROOT.Export_List = THIS.id
			}
			add_to_variable = {
				ROOT.aluminium_exports = ROOT.aluminiumExportTargetMonthly^THIS
			}
		}
	}
	clear_array = ROOT.Export_List
	for_each_scope_loop = {
		array = RareEarth_Export_List
		if = {
			limit = {
				NOT = {
					is_in_array = {
						array = ROOT.Export_List
						value = THIS.id
					}
				}
			}
			add_to_array = {
				ROOT.Export_List = THIS.id
			}
			add_to_variable = {
				ROOT.tungsten_exports = ROOT.rareEarthExportTargetMonthly^THIS
			}
		}
	}
	clear_array = ROOT.Export_List
	add_to_variable = {
		resource_income = oil_exports
	}
	add_to_variable = {
		resource_income = aluminium_exports
	}
	add_to_variable = {
		resource_income = rubber_exports
	}
	add_to_variable = {
		resource_income = tungsten_exports
	}
	add_to_variable = {
		resource_income = steel_exports
	}
	add_to_variable = {
		resource_income = chromium_exports
	}
	multiply_variable = {
		resource_income = trade_credit_factor
	}
	#Tax Rate Here?
	add_to_variable = {
		IncomeTotal = custom_income
	}
	add_to_variable = {
		IncomeTotal = resource_income
	}
	set_variable = {
		display_income = IncomeTotal
	}
	#if = { limit = { is_ai = no } #log = "current income = [?IncomeTotal] / resource_income = [?resource_income]" }
	#if = { limit = { is_ai = no } #log = "TOTAL INCOME: [?IncomeTotal]" }
	#### EXPENSES ####
	#if = { limit = { is_ai = no } #log = "------ EXPENSES ------" }
	set_variable = {
		CorruptIncomeLoss = CorruptionLevel
	}
	multiply_variable = {
		CorruptIncomeLoss = 0.5
	}
	set_variable = {
		CorruptLoss = IncomeTotal
	}
	multiply_variable = {
		CorruptLoss = CorruptIncomeLoss
	}
	subtract_from_variable = {
		IncomeTotal = CorruptLoss
	}
	#if = { limit = { is_ai = no } #log = "current income = [?IncomeTotal] / CorruptLoss = [?CorruptLoss]" }
	set_variable = {
		resource_cost = 0
	}
	set_variable = {
		oil_imports = 0
	}
	set_variable = {
		aluminium_imports = 0
	}
	set_variable = {
		rubber_imports = 0
	}
	set_variable = {
		tungsten_imports = 0
	}
	set_variable = {
		steel_imports = 0
	}
	set_variable = {
		chromium_imports = 0
	}
	for_each_scope_loop = {
		array = Food_Import_List
		if = {
			limit = {
				NOT = {
					check_variable = {
						food_import_check = 1
					}
				}
			}
			set_temp_variable = {
				food_import_check = 1
			}
			add_to_variable = {
				ROOT.rubber_imports = ROOT.foodImportTargetMonthly^THIS
			}
		}
	}
	for_each_scope_loop = {
		array = Nuclear_Import_List
		if = {
			limit = {
				NOT = {
					check_variable = {
						nuclear_import_check = 1
					}
				}
			}
			set_temp_variable = {
				nuclear_import_check = 1
			}
			add_to_variable = {
				ROOT.chromium_imports = ROOT.chromiumImportTargetMonthly^THIS
			}
		}
	}
	for_each_scope_loop = {
		array = Oil_Import_List
		if = {
			limit = {
				NOT = {
					check_variable = {
						oil_import_check = 1
					}
				}
			}
			set_temp_variable = {
				oil_import_check = 1
			}
			add_to_variable = {
				ROOT.oil_imports = ROOT.oilImportTargetMonthly^THIS
			}
		}
	}
	for_each_scope_loop = {
		array = Steel_Import_List
		if = {
			limit = {
				NOT = {
					check_variable = {
						steel_import_check = 1
					}
				}
			}
			set_temp_variable = {
				steel_import_check = 1
			}
			add_to_variable = {
				ROOT.steel_imports = ROOT.steelImportTargetMonthly^THIS
			}
		}
	}
	for_each_scope_loop = {
		array = Aluminium_Import_List
		if = {
			limit = {
				NOT = {
					check_variable = {
						aluminium_import_check = 1
					}
				}
			}
			set_temp_variable = {
				aluminium_import_check = 1
			}
			add_to_variable = {
				ROOT.aluminium_imports = ROOT.aluminiumImportTargetMonthly^THIS
			}
		}
	}
	for_each_scope_loop = {
		array = RareEarth_Import_List
		if = {
			limit = {
				NOT = {
					check_variable = {
						tungsten_import_check = 1
					}
				}
			}
			set_temp_variable = {
				tungsten_import_check = 1
			}
			add_to_variable = {
				ROOT.tungsten_imports = ROOT.rareEarthImportTargetMonthly^THIS
			}
		}
	}
	add_to_variable = {
		resource_cost = oil_imports
	}
	add_to_variable = {
		resource_cost = aluminium_imports
	}
	add_to_variable = {
		resource_cost = rubber_imports
	}
	add_to_variable = {
		resource_cost = tungsten_imports
	}
	add_to_variable = {
		resource_cost = steel_imports
	}
	add_to_variable = {
		resource_cost = chromium_imports
	}
	subtract_from_variable = {
		IncomeTotal = resource_cost
	}
	subtract_from_variable = {
		IncomeTotal = custom_expenses
	}
	subtract_from_variable = {
		IncomeTotal = total_insurgency_funding
	}
	#if = { limit = { is_ai = no } #log = "current income = [?IncomeTotal] / resource_cost = [?resource_cost]" }
	#Insurgency Costs
	set_variable = {
		total_insurgency_funding = paigc_funding
	}
	add_to_variable = {
		total_insurgency_funding = los_funding
	}
	add_to_variable = {
		total_insurgency_funding = vie_funding
	}
	add_to_variable = {
		total_insurgency_funding = vin_funding
	}
	add_to_variable = {
		total_insurgency_funding = mpla_funding
	}
	add_to_variable = {
		total_insurgency_funding = unita_funding
	}
	add_to_variable = {
		total_insurgency_funding = fnla_funding
	}
	#Policy Costs
	subtract_from_variable = {
		IncomeTotal = mil_expend
	}
	#if = { limit = { is_ai = no } #log = "current income = [?IncomeTotal] / mil_expend = [?mil_expend]" }
	subtract_from_variable = {
		IncomeTotal = welfare_cost
	}
	#if = { limit = { is_ai = no } #log = "current income = [?IncomeTotal] / welfare_cost = [?welfare_cost]" }
	subtract_from_variable = {
		IncomeTotal = cpi_cost
	}
	#if = { limit = { is_ai = no } #log = "current income = [?IncomeTotal] / cpi_cost = [?cpi_cost]" }
	subtract_from_variable = {
		IncomeTotal = edu_cost
	}
	#if = { limit = { is_ai = no } #log = "current income = [?IncomeTotal] / edu_cost = [?edu_cost]" }
	subtract_from_variable = {
		IncomeTotal = health_cost
	}
	#if = { limit = { is_ai = no } #log = "current income = [?IncomeTotal] / health_cost = [?health_cost]" }
	subtract_from_variable = {
		IncomeTotal = pub_cost
	}
	#if = { limit = { is_ai = no } #log = "current income = [?IncomeTotal] / pub_cost = [?pub_cost]" }
	#if = { limit = { is_ai = no } #log = "TOTAL INCOME AFTER EXPENSES: [?IncomeTotal]" }
	#Domestic Cost (already accounted in total, just for display)
	set_variable = {
		domestic_cost = cpi_cost
	}
	add_to_variable = {
		domestic_cost = total_insurgency_funding
	}
	add_to_variable = {
		domestic_cost = resource_cost
	}
	add_to_variable = {
		domestic_cost = custom_expenses
	}
	set_variable = {
		SubsidiyCheck = IncomeTotal
	}	# this IncomeTotal is the sum of all Income minus Corruption, Imports cost, Insurgency Funding Costs and Policy Costs
	multiply_variable = {
		SubsidiyCheck = 0.25
	}
	if = {
		limit = {
			has_country_flag = Soviet_Subsidies
		}
		set_variable = {
			subsidiy_base = 0
		}
		add_to_variable = {
			subsidiy_base = mil_expend
		}
		add_to_variable = {
			subsidiy_base = welfare_cost
		}
		add_to_variable = {
			subsidiy_base = cpi_cost
		}
		add_to_variable = {
			subsidiy_base = edu_cost
		}
		add_to_variable = {
			subsidiy_base = health_cost
		}
		add_to_variable = {
			subsidiy_base = pub_cost
		}
		multiply_variable = {
			subsidiy_base = 0.25
		}
		subtract_from_variable = {
			SOV.currentMoney = subsidiy_base
		}
		add_to_variable = {
			IncomeTotal = subsidiy_base
		}
	}
	add_to_variable = {
		currentMoney = IncomeTotal
	}	# add income to money
	set_variable = {
		IncomeCheck = IncomeTotal
	}
	set_variable = {
		IncomePlannerCheck = IncomeCheck
	}
	set_variable = {
		currentDebtPayments = 0
	}
	for_each_loop = {
		array = debtPaymentArray
		index = i
		if = {
			limit = {
				check_variable = {
					debtTotalsArray^i > 0
				}
			}
			subtract_from_variable = {
				debtTotalsArray^i = debtPaymentArray^i
			}
			subtract_from_variable = {
				currentMoney = debtPaymentArray^i
			}
			subtract_from_variable = {
				currentDebt = debtPaymentArray^i
			}
			add_to_variable = {
				currentDebtPayments = debtPaymentArray^i
			}
		}
		if = {
			limit = {
				NOT = {
					check_variable = {
						debtOwnerArray^i = THIS.ID
					}
				}
				NOT = {
					check_variable = {
						debtOwnerArray^i = GER.ID
					}
				}
			}
			var:debtOwnerArray^i = {
				add_to_variable = {
					currentMoney = debtPaymentArray^i
				}
			}
		}
		if = {
			limit = {
				check_variable = {
					debtOwnerArray^i = GER.ID
				}
			}
			var:debtOwnerArray^i = {
				add_to_variable = {
					currentMoney = debtPaymentArray^i
				}
				set_temp_variable = {
					temp_debt_pay = debtPaymentArray^i
				}
				for_loop_effect = {
					end = influence_array^num
					value = v
					if = {
						limit = {
							check_variable = {
								influence_array^v = GER
							}
						}
						subtract_from_variable = {
							influence_array_val^v = temp_debt_pay
						}
					}
				}
			}
		}
		loan_payoff_change_to_liquidity = yes
		if = {
			limit = {
				check_variable = {
					var = debtTotalsArray^i
					compare = less_than_or_equals
					value = 0
				}
			}
			set_variable = {
				debtTotalsArray^i = 0
			}
			set_variable = {
				debtPaymentArray^i = 0
			}
			set_variable = {
				debtOwnerArray^i = 0
			}
			set_variable = {
				debtOwnerDomesticStatusArray^i = 0
			}
		}
	}
	set_variable = {
		domesticTotalDebtK = domesticTotalDebt
	}
	#divide_variable = { domesticTotalDebtK = 1000 }
	set_variable = {
		TotalDebtk = currentDebt
	}
	#divide_variable = { TotalDebtk = 1000 }
	set_variable = {
		gdpDomesticDebtLimit = 0.4
	}
	if = {
		limit = {
			check_variable = {
				grossdomesticproduct > 1
			}
		}
		add_to_variable = {
			gdpDomesticDebtLimit = 0.1
		}
	}
	if = {
		limit = {
			check_variable = {
				grossdomesticproduct > 5
			}
		}
		add_to_variable = {
			gdpDomesticDebtLimit = 0.1
		}
	}
	if = {
		limit = {
			check_variable = {
				grossdomesticproduct > 10
			}
		}
		add_to_variable = {
			gdpDomesticDebtLimit = 0.1
		}
	}
	if = {
		limit = {
			check_variable = {
				grossdomesticproduct > 100
			}
		}
		add_to_variable = {
			gdpDomesticDebtLimit = 0.1
		}
	}
	if = {
		limit = {
			check_variable = {
				grossdomesticproduct > 1000
			}
		}
		add_to_variable = {
			gdpDomesticDebtLimit = 0.1
		}
	}
	if = {
		#Fallback
		limit = {
			check_variable = {
				Interest_Rate = 0
			}
		}
		set_variable = {
			Interest_Rate = 1.04
		}
	}
	if = {
		#Monthly Auto Debt Section
		limit = {
			check_variable = {
				pulse_deficit > currentMoney
			}
		}
		#Austerity and Default Checks
		if = {
			limit = {
				check_variable = {
					defaultCheck < currentDebt
				}
				check_variable = {
					Credit_Rating < 10
				}
				NOT = {
					check_variable = {
						defaultCheck = 0
					}
				}
			}
			if = {
				limit = {
					NOT = {
						has_idea = Recent_Default
					}
				}
				country_event = CWIC_ECON_PENALTIES.2
			}
		}
		else_if = {
			limit = {
				check_variable = {
					austerityCheck < currentDebt
				}
				NOT = {
					check_variable = {
						defaultCheck = 0
					}
				}
				check_variable = {
					Credit_Rating < 10
				}
			}
			if = {
				limit = {
					NOT = {
						has_idea = Recent_Austerity_Measures
					}
				}
				country_event = CWIC_ECON_PENALTIES.1
			}
		}
		else = {
		}
		#New
		if = {
			limit = {
				check_variable = {
					ReserveMaxBorrowable > pulse_deficit
				}
			}
			set_variable = {
				bank_name_prompt = 1
			}
			save_global_event_target_as = this_loan_country
			clear_array = purchase_length
			add_to_array = {
				purchase_length = 5
			}
			add_to_array = {
				purchase_length = 7
			}
			add_to_array = {
				purchase_length = 10
			}
			clear_array = currentInterestRateCalc
			add_to_array = {
				currentInterestRateCalc = ReserveCurrentInterestRate
			}
			add_to_array = {
				currentInterestRateCalc = ReserveCurrentInterestRate
			}
			add_to_array = {
				currentInterestRateCalc = ReserveCurrentInterestRate
			}
			set_variable = {
				max_index = 2
			}
			set_variable = {
				current_index = 0
			}
		}
		else_if = {
			limit = {
				check_variable = {
					available_liquidity > pulse_deficit
				}
			}
			set_variable = {
				bank_name_prompt = 2
			}			#Not Eligible
			save_global_event_target_as = this_loan_country
			clear_array = purchase_length
			add_to_array = {
				purchase_length = 5
			}
			add_to_array = {
				purchase_length = 10
			}
			add_to_array = {
				purchase_length = 15
			}
			add_to_array = {
				purchase_length = 20
			}
			clear_array = currentInterestRateCalc
			add_to_array = {
				currentInterestRateCalc = Interest_Rate
			}
			add_to_array = {
				currentInterestRateCalc = Interest_Rate
			}
			set_variable = {
				Interest_Rate_Adjusted = Interest_Rate
			}
			multiply_variable = {
				Interest_Rate_Adjusted = 1.2
			}
			add_to_array = {
				currentInterestRateCalc = Interest_Rate_Adjusted
			}
			multiply_variable = {
				Interest_Rate_Adjusted = 1.2
			}
			add_to_array = {
				currentInterestRateCalc = Interest_Rate_Adjusted
			}
			set_variable = {
				max_index = 3
			}
			set_variable = {
				current_index = 0
			}
		}
		#World Bank                  5Y
		else_if = {
			limit = {
				check_variable = {
					WorldMaxBorrowable > pulse_deficit
				}
			}
			set_variable = {
				bank_name_prompt = 10
			}
			WBK = {
				save_global_event_target_as = this_loan_country
			}
			clear_array = purchase_length
			add_to_array = {
				purchase_length = 5
			}
			add_to_array = {
				purchase_length = 10
			}
			add_to_array = {
				purchase_length = 15
			}
			add_to_array = {
				purchase_length = 20
			}
			add_to_array = {
				purchase_length = 25
			}
			add_to_array = {
				purchase_length = 30
			}
			add_to_array = {
				purchase_length = 35
			}
			clear_array = currentInterestRateCalc
			add_to_array = {
				currentInterestRateCalc = 1.35
			}
			add_to_array = {
				currentInterestRateCalc = 1.35
			}
			add_to_array = {
				currentInterestRateCalc = 1.62
			}
			add_to_array = {
				currentInterestRateCalc = 1.95
			}
			add_to_array = {
				currentInterestRateCalc = 2.34
			}
			add_to_array = {
				currentInterestRateCalc = 2.81
			}
			add_to_array = {
				currentInterestRateCalc = 3.37
			}
			set_variable = {
				max_index = 6
			}
			set_variable = {
				current_index = 0
			}
		}
		else_if = {
			limit = {
				check_variable = {
					MorganMaxBorrowable > pulse_deficit
				}
			}
			set_variable = {
				bank_name_prompt = 8
			}
			JPM = {
				save_global_event_target_as = this_loan_country
			}
			clear_array = purchase_length
			add_to_array = {
				purchase_length = 5
			}
			clear_array = currentInterestRateCalc
			add_to_array = {
				currentInterestRateCalc = MorganCurrentInterestRate
			}
			set_variable = {
				max_index = 0
			}
			set_variable = {
				current_index = 0
			}
		}
		else_if = {
			limit = {
				check_variable = {
					ParisMaxBorrowable > pulse_deficit
				}
			}
			set_variable = {
				bank_name_prompt = 3
			}
			BNP = {
				save_global_event_target_as = this_loan_counftry
			}
			clear_array = purchase_length
			add_to_array = {
				purchase_length = 5
			}
			clear_array = currentInterestRateCalc
			add_to_array = {
				currentInterestRateCalc = ParisCurrentInterestRate
			}
			set_variable = {
				max_index = 0
			}
			set_variable = {
				current_index = 0
			}
		}
		else_if = {
			limit = {
				check_variable = {
					BarclaysMaxBorrowable > pulse_deficit
				}
			}
			set_variable = {
				bank_name_prompt = 4
			}
			BRC = {
				save_global_event_target_as = this_loan_country
			}
			clear_array = purchase_length
			add_to_array = {
				purchase_length = 5
			}
			clear_array = currentInterestRateCalc
			add_to_array = {
				currentInterestRateCalc = BarclaysCurrentInterestRate
			}
			set_variable = {
				max_index = 0
			}
			set_variable = {
				current_index = 0
			}
		}
		else_if = {
			limit = {
				check_variable = {
					MitsubishiMaxBorrowable > pulse_deficit
				}
			}
			set_variable = {
				bank_name_prompt = 5
			}
			CHY = {
				save_global_event_target_as = this_loan_country
			}
			clear_array = purchase_length
			add_to_array = {
				purchase_length = 5
			}
			clear_array = currentInterestRateCalc
			add_to_array = {
				currentInterestRateCalc = MitsubishiCurrentInterestRate
			}
			set_variable = {
				max_index = 0
			}
			set_variable = {
				current_index = 0
			}
		}
		else_if = {
			limit = {
				check_variable = {
					DeutscheMaxBorrowable > pulse_deficit
				}
			}
			set_variable = {
				bank_name_prompt = 7
			}
			DBA = {
				save_global_event_target_as = this_loan_country
			}
			clear_array = purchase_length
			add_to_array = {
				purchase_length = 5
			}
			clear_array = currentInterestRateCalc
			add_to_array = {
				currentInterestRateCalc = DeutscheCurrentInterestRate
			}
			set_variable = {
				max_index = 0
			}
			set_variable = {
				current_index = 0
			}
		}
		else_if = {
			limit = {
				check_variable = {
					SuisseMaxBorrowable > pulse_deficit
				}
			}
			set_variable = {
				bank_name_prompt = 6
			}
			SKA = {
				save_global_event_target_as = this_loan_country
			}
			clear_array = purchase_length
			add_to_array = {
				purchase_length = 5
			}
			clear_array = currentInterestRateCalc
			add_to_array = {
				currentInterestRateCalc = SuisseCurrentInterestRate
			}
			set_variable = {
				max_index = 0
			}
			set_variable = {
				current_index = 0
			}
		}
		else = {
			GER = {
				save_global_event_target_as = this_loan_country
			}
			set_variable = {
				bank_name_prompt = 9
			}
			clear_array = purchase_length
			add_to_array = {
				purchase_length = 1
			}
			add_to_array = {
				purchase_length = 2
			}
			add_to_array = {
				purchase_length = 3
			}
			add_to_array = {
				purchase_length = 4
			}
			clear_array = currentInterestRateCalc
			add_to_array = {
				currentInterestRateCalc = 7
			}
			add_to_array = {
				currentInterestRateCalc = 9
			}
			add_to_array = {
				currentInterestRateCalc = 12
			}
			add_to_array = {
				currentInterestRateCalc = 15
			}
			set_variable = {
				max_index = 3
			}
			set_variable = {
				current_index = 1
			}
		}
		automatic_loan_setting = yes
	}
	set_variable = {
		refinery_total = 0
	}
	add_to_variable = {
		refinery_total = tungsten_factory_total
	}
	add_to_variable = {
		refinery_total = steel_works_total
	}
	add_to_variable = {
		refinery_total = oil_refinery_total
	}
	set_variable = {
		oilincome = 0
	}
	set_variable = {
		steelincome = 0
	}
	set_variable = {
		tungstenincome = 0
	}
	add_to_variable = {
		oilincome = oil_refinery_total
	}
	add_to_variable = {
		steelincome = steel_works_total
	}
	add_to_variable = {
		tungstenincome = tungsten_factory_total
	}
	ai_economic_planning = yes
	set_variable = {
		IncomeTotal = 0
	}
	set_variable = {
		ROOT.industrial_complex_total = 0
	}
	set_variable = {
		ROOT.farm_total = 0
	}
	set_variable = {
		ROOT.dockyard_total = 0
	}
	set_variable = {
		ROOT.oil_refinery_total = 0
	}
	set_variable = {
		ROOT.steel_works_total = 0
	}
	set_variable = {
		ROOT.tungsten_factory_total = 0
	}
	set_variable = {
		ROOT.office_park_total = 0
	}
}

military_expenditure = {
	add_to_variable = {
		IncomeCheck = mil_expend
	}
	## ARMY COSTS
	set_variable = {
		battalion_tier_1 = num_battalions_with_type@direct_fire_gun
	}
	add_to_variable = {
		battalion_tier_1 = num_battalions_with_type@militia
	}
	multiply_variable = {
		battalion_tier_1 = 0.01
	}
	set_variable = {
		battalion_tier_2 = num_battalions_with_type@infantry
	}
	add_to_variable = {
		battalion_tier_2 = num_battalions_with_type@auto_cannon
	}
	add_to_variable = {
		battalion_tier_2 = num_battalions_with_type@light_artillery
	}
	add_to_variable = {
		battalion_tier_2 = num_battalions_with_type@light_sp_artillery
	}
	add_to_variable = {
		battalion_tier_2 = num_battalions_with_type@mountaineers
	}
	add_to_variable = {
		battalion_tier_2 = num_battalions_with_type@cavalry
	}
	add_to_variable = {
		battalion_tier_2 = num_battalions_with_type@motorized_infantry
	}
	add_to_variable = {
		battalion_tier_2 = num_battalions_with_type@recon
	}
	add_to_variable = {
		battalion_tier_2 = num_battalions_with_type@recon_motorized
	}
	add_to_variable = {
		battalion_tier_2 = num_battalions_with_type@logistics_company
	}
	add_to_variable = {
		battalion_tier_2 = num_battalions_with_type@light_artillery_support
	}
	multiply_variable = {
		battalion_tier_2 = 0.05
	}
	set_variable = {
		battalion_tier_3 = num_battalions_with_type@spaag
	}
	add_to_variable = {
		battalion_tier_3 = num_battalions_with_type@atgm
	}
	add_to_variable = {
		battalion_tier_3 = num_battalions_with_type@artillery
	}
	add_to_variable = {
		battalion_tier_3 = num_battalions_with_type@sp_artillery
	}
	add_to_variable = {
		battalion_tier_3 = num_battalions_with_type@heavy_artillery
	}
	add_to_variable = {
		battalion_tier_3 = num_battalions_with_type@light_armor
	}
	add_to_variable = {
		battalion_tier_3 = num_battalions_with_type@marine
	}
	add_to_variable = {
		battalion_tier_3 = num_battalions_with_type@airborne
	}
	add_to_variable = {
		battalion_tier_3 = num_battalions_with_type@ffl
	}
	add_to_variable = {
		battalion_tier_3 = num_battalions_with_type@mechanized_infantry
	}
	add_to_variable = {
		battalion_tier_3 = num_battalions_with_type@recon_mechanized
	}
	add_to_variable = {
		battalion_tier_3 = num_battalions_with_type@artillery_support
	}
	add_to_variable = {
		battalion_tier_3 = num_battalions_with_type@heavy_artillery_support
	}
	add_to_variable = {
		battalion_tier_3 = num_battalions_with_type@military_police
	}
	multiply_variable = {
		battalion_tier_3 = 0.1
	}
	set_variable = {
		battalion_tier_4 = num_battalions_with_type@sam_carrier
	}
	add_to_variable = {
		battalion_tier_4 = num_battalions_with_type@atgm_carrier
	}
	add_to_variable = {
		battalion_tier_4 = num_battalions_with_type@heavy_sp_artillery
	}
	add_to_variable = {
		battalion_tier_4 = num_battalions_with_type@medium_armor
	}
	add_to_variable = {
		battalion_tier_4 = num_battalions_with_type@mechanized_marine
	}
	add_to_variable = {
		battalion_tier_4 = num_battalions_with_type@mechanized_airborne
	}
	add_to_variable = {
		battalion_tier_4 = num_battalions_with_type@armored_infantry
	}
	add_to_variable = {
		battalion_tier_4 = num_battalions_with_type@air_cavalry
	}
	add_to_variable = {
		battalion_tier_4 = num_battalions_with_type@engineer
	}
	add_to_variable = {
		battalion_tier_4 = num_battalions_with_type@engineer_mechanized
	}
	add_to_variable = {
		battalion_tier_4 = num_battalions_with_type@recon_helicopter
	}
	add_to_variable = {
		battalion_tier_4 = num_battalions_with_type@maintenance_company
	}
	add_to_variable = {
		battalion_tier_4 = num_battalions_with_type@field_hospital
	}
	add_to_variable = {
		battalion_tier_4 = num_battalions_with_type@field_hospital_mechanized
	}
	add_to_variable = {
		battalion_tier_4 = num_battalions_with_type@army_special_force
	}
	add_to_variable = {
		battalion_tier_4 = num_battalions_with_type@navy_special_force
	}
	add_to_variable = {
		battalion_tier_4 = num_battalions_with_type@airforce_special_force
	}
	add_to_variable = {
		battalion_tier_4 = num_battalions_with_type@logistics_helicopter
	}
	add_to_variable = {
		battalion_tier_4 = num_battalions_with_type@signal_company
	}
	multiply_variable = {
		battalion_tier_4 = 0.2
	}
	set_variable = {
		battalion_tier_5 = num_battalions_with_type@attack_helicopter_support
	}
	add_to_variable = {
		battalion_tier_5 = num_battalions_with_type@rocket_sp_artillery
	}
	add_to_variable = {
		battalion_tier_5 = num_battalions_with_type@heavy_armor
	}
	add_to_variable = {
		battalion_tier_5 = num_battalions_with_type@super_heavy_armor
	}
	add_to_variable = {
		battalion_tier_5 = num_battalions_with_type@engineer_armored
	}
	add_to_variable = {
		battalion_tier_5 = num_battalions_with_type@field_hospital_helicopter
	}
	multiply_variable = {
		battalion_tier_5 = 0.25
	}
	set_variable = {
		mil_expend = 0
	}
	add_to_variable = {
		mil_expend = battalion_tier_1
	}
	add_to_variable = {
		mil_expend = battalion_tier_2
	}
	add_to_variable = {
		mil_expend = battalion_tier_3
	}
	add_to_variable = {
		mil_expend = battalion_tier_4
	}
	add_to_variable = {
		mil_expend = battalion_tier_5
	}
	set_variable = {
		mil_test = 0
	}
	add_to_variable = {
		mil_test = mil_expend
	}
	##navy costs--------------
	##navy tier 1
	#set_variable = { navy_tier_1 = num_ships_with_type@screen_hull_light }
	set_variable = {
		navy_tier_1 = num_ships_with_type@screen_hull_medium
	}
	#add_to_variable = { navy_tier_1 = num_ships_with_type@screen_hull_medium }
	add_to_variable = {
		navy_tier_1 = num_ships_with_type@sub_hull_small_single
	}
	multiply_variable = {
		navy_tier_1 = 0.3
	}
	##navy tier 2
	set_variable = {
		navy_tier_2 = num_ships_with_type@screen_hull_heavy
	}
	add_to_variable = {
		navy_tier_2 = num_ships_with_type@battle_hull_light
	}
	add_to_variable = {
		navy_tier_2 = num_ships_with_type@sub_hull_large_single
	}
	add_to_variable = {
		navy_tier_2 = num_ships_with_type@carrier_hull_light
	}
	multiply_variable = {
		navy_tier_2 = 0.5
	}
	##navy tier 3
	set_variable = {
		navy_tier_3 = num_ships_with_type@battle_hull_medium
	}
	add_to_variable = {
		navy_tier_3 = num_ships_with_type@sub_hull_large_double
	}
	add_to_variable = {
		navy_tier_3 = num_ships_with_type@carrier_hull
	}
	multiply_variable = {
		navy_tier_3 = 0.6
	}
	##navy tier 4
	set_variable = {
		navy_tier_4 = num_ships_with_type@battle_hull_heavy
	}
	add_to_variable = {
		navy_tier_4 = num_ships_with_type@carrier_hull_super
	}
	multiply_variable = {
		navy_tier_4 = 1
	}
	##navy total
	set_variable = {
		navy_expend = 0
	}
	add_to_variable = {
		navy_expend = navy_tier_1
	}
	add_to_variable = {
		navy_expend = navy_tier_2
	}
	add_to_variable = {
		navy_expend = navy_tier_3
	}
	add_to_variable = {
		navy_expend = navy_tier_4
	}
	if = {
		limit = {
			has_idea = policy_navy_temp_0
		}
		multiply_variable = {
			navy_expend = 0.5
		}
	}
	else_if = {
		limit = {
			has_idea = policy_navy_temp_1
		}
		multiply_variable = {
			navy_expend = 0.625
		}
	}
	else_if = {
		limit = {
			has_idea = policy_navy_temp_2
		}
		multiply_variable = {
			navy_expend = 0.75
		}
	}
	else_if = {
		limit = {
			has_idea = policy_navy_temp_3
		}
		multiply_variable = {
			navy_expend = 0.875
		}
	}
	else_if = {
		limit = {
			has_idea = policy_navy_temp_4
		}
		multiply_variable = {
			navy_expend = 1
		}
	}
    else_if = {
		limit = {
			has_idea = policy_navy_temp_5
		}
		multiply_variable = {
			navy_expend = 1.125
		}
	}
    else_if = {
		limit = {
			has_idea = policy_navy_temp_6
		}
		multiply_variable = {
			navy_expend = 1.25
		}
	}
    else_if = {
		limit = {
			has_idea = policy_navy_temp_7
		}
		multiply_variable = {
			navy_expend = 1.375
		}
	}
    else_if = {
		limit = {
			has_idea = policy_navy_temp_8
		}
		multiply_variable = {
			navy_expend = 1.5
		}
	}
    else_if = {
		limit = {
			has_idea = policy_navy_temp_9
		}
		multiply_variable = {
			navy_expend = 1.625
		}
	}
    else_if = {
		limit = {
			has_idea = policy_navy_temp_10
		}
		multiply_variable = {
			navy_expend = 1.75
		}
	}
    else_if = {
		limit = {
			has_idea = policy_navy_temp_11
		}
		multiply_variable = {
			navy_expend = 1.875
		}
	}
    else_if = {
		limit = {
			has_idea = policy_navy_temp_12
		}
		multiply_variable = {
			navy_expend = 2
		}
	}
    else_if = {
		limit = {
			has_idea = policy_navy_temp_13
		}
		multiply_variable = {
			navy_expend = 2.125
		}
	}
    else_if = {
		limit = {
			has_idea = policy_navy_temp_14
		}
		multiply_variable = {
			navy_expend = 2.25
		}
	}
    else_if = {
		limit = {
			has_idea = policy_navy_temp_15
		}
		multiply_variable = {
			navy_expend = 2.375
		}
	}
    else_if = {
		limit = {
			has_idea = policy_navy_temp_16
		}
		multiply_variable = {
			navy_expend = 2.5
		}
	}
    else_if = {
		limit = {
			has_idea = policy_navy_temp_17
		}
		multiply_variable = {
			navy_expend = 2.625
		}
	}
    else_if = {
		limit = {
			has_idea = policy_navy_temp_18
		}
		multiply_variable = {
			navy_expend = 2.75
		}
	}
    else_if = {
		limit = {
			has_idea = policy_navy_temp_19
		}
		multiply_variable = {
			navy_expend = 2.875
		}
	}
    else_if = {
		limit = {
			has_idea = policy_navy_temp_20
		}
		multiply_variable = {
			navy_expend = 3
		}
	}
    else = { }
	##airforce costs---------
	##airforce tier 1
	set_variable = {
		af_tier_1 = num_deployed_planes_with_type@cas_uav
	}
	add_to_variable = {
		af_tier_1 = num_deployed_planes_with_type@naval_uav
	}
	add_to_variable = {
		af_tier_1 = num_deployed_planes_with_type@transport_plane
	}
	add_to_variable = {
		af_tier_1 = num_deployed_planes_with_type@suicide_craft
	}
	add_to_variable = {
		af_tier_1 = num_deployed_planes_with_type@rocket_interceptor
	}
	add_to_variable = {
		af_tier_1 = num_deployed_planes_with_type@scout_plane
	}
	multiply_variable = {
		af_tier_1 = 0.03
	}
	##airforce tier 2
	set_variable = {
		af_tier_2 = num_deployed_planes_with_type@fighter
	}
	add_to_variable = {
		af_tier_2 = num_deployed_planes_with_type@cas
	}
	add_to_variable = {
		af_tier_2 = num_deployed_planes_with_type@nav_bomber
	}
	add_to_variable = {
		af_tier_2 = num_deployed_planes_with_type@jet_light
	}
	add_to_variable = {
		af_tier_2 = num_deployed_planes_with_type@cv_cas
	}
	add_to_variable = {
		af_tier_2 = num_deployed_planes_with_type@cv_fighter
	}
	add_to_variable = {
		af_tier_2 = num_deployed_planes_with_type@jump_jet
	}
	add_to_variable = {
		af_tier_2 = num_deployed_planes_with_type@naval_helicopter
	}
	multiply_variable = {
		af_tier_2 = 0.05
	}
	##airforce tier 3
	set_variable = {
		af_tier_3 = num_deployed_planes_with_type@tac_bomber
	}
	add_to_variable = {
		af_tier_3 = num_deployed_planes_with_type@heavy_fighter
	}
	add_to_variable = {
		af_tier_3 = num_deployed_planes_with_type@heavy_fighter_highmach
	}
	add_to_variable = {
		af_tier_3 = num_deployed_planes_with_type@slbm
	}
	add_to_variable = {
		af_tier_3 = num_deployed_planes_with_type@srbm
	}
	add_to_variable = {
		af_tier_3 = num_deployed_planes_with_type@cruisemissile
	}
	add_to_variable = {
		af_tier_3 = num_deployed_planes_with_type@coastalmissile
	}
	#add_to_variable = { af_tier_3 = num_deployed_planes_with_type@guided_missile }
	multiply_variable = {
		af_tier_3 = 0.08
	}
	##airforce tier 4
	set_variable = {
		af_tier_4 = num_deployed_planes_with_type@nuclearstratbomber
	}
	add_to_variable = {
		af_tier_4 = num_deployed_planes_with_type@mach2stratbomber
	}
	add_to_variable = {
		af_tier_4 = num_deployed_planes_with_type@stealth_tactical_bomber
	}
	add_to_variable = {
		af_tier_4 = num_deployed_planes_with_type@mach3stratbomber
	}
	add_to_variable = {
		af_tier_4 = num_deployed_planes_with_type@icbm
	}
	add_to_variable = {
		af_tier_4 = num_deployed_planes_with_type@irbm
	}
	multiply_variable = {
		af_tier_4 = 0.1
	}
	##airforce total
	set_variable = {
		af_expend = 0
	}
	add_to_variable = {
		af_expend = af_tier_1
	}
	add_to_variable = {
		af_expend = af_tier_2
	}
	add_to_variable = {
		af_expend = af_tier_3
	}
	add_to_variable = {
		af_expend = af_tier_4
	}
	set_variable = {
		total_planes = 0
	}
	add_to_variable = {
		total_planes = num_deployed_planes
	}
	multiply_variable = {
		total_planes = 0.01
	}
	#set_variable = {
	#	af_expend = total_planes
	#}
	if = {
		limit = {
			has_idea = policy_air_temp_0
		}
		multiply_variable = {
			af_expend = 0.5
		}
	}
	else_if = {
		limit = {
			has_idea = policy_air_temp_1
		}
		multiply_variable = {
			af_expend = 0.625
		}
	}
	else_if = {
		limit = {
			has_idea = policy_air_temp_2
		}
		multiply_variable = {
			af_expend = 0.75
		}
	}
	else_if = {
		limit = {
			has_idea = policy_air_temp_3
		}
		multiply_variable = {
			af_expend = 0.875
		}
	}
	else_if = {
		limit = {
			has_idea = policy_air_temp_4
		}
		multiply_variable = {
			af_expend = 1
		}
	}
    else_if = {
		limit = {
			has_idea = policy_air_temp_5
		}
		multiply_variable = {
			af_expend = 1.125
		}
	}
    else_if = {
		limit = {
			has_idea = policy_air_temp_6
		}
		multiply_variable = {
			af_expend = 1.25
		}
	}
    else_if = {
		limit = {
			has_idea = policy_air_temp_7
		}
		multiply_variable = {
			af_expend = 1.375
		}
	}
    else_if = {
		limit = {
			has_idea = policy_air_temp_8
		}
		multiply_variable = {
			af_expend = 1.5
		}
	}
    else_if = {
		limit = {
			has_idea = policy_air_temp_9
		}
		multiply_variable = {
			af_expend = 1.625
		}
	}
    else_if = {
		limit = {
			has_idea = policy_air_temp_10
		}
		multiply_variable = {
			af_expend = 1.75
		}
	}
    else_if = {
		limit = {
			has_idea = policy_air_temp_11
		}
		multiply_variable = {
			af_expend = 1.875
		}
	}
    else_if = {
		limit = {
			has_idea = policy_air_temp_12
		}
		multiply_variable = {
			af_expend = 2
		}
	}
    else_if = {
		limit = {
			has_idea = policy_air_temp_13
		}
		multiply_variable = {
			af_expend = 2.125
		}
	}
    else_if = {
		limit = {
			has_idea = policy_air_temp_14
		}
		multiply_variable = {
			af_expend = 2.25
		}
	}
    else_if = {
		limit = {
			has_idea = policy_air_temp_15
		}
		multiply_variable = {
			af_expend = 2.375
		}
	}
    else_if = {
		limit = {
			has_idea = policy_air_temp_16
		}
		multiply_variable = {
			af_expend = 2.5
		}
	}
    else_if = {
		limit = {
			has_idea = policy_air_temp_17
		}
		multiply_variable = {
			af_expend = 2.625
		}
	}
    else_if = {
		limit = {
			has_idea = policy_air_temp_18
		}
		multiply_variable = {
			af_expend = 2.75
		}
	}
    else_if = {
		limit = {
			has_idea = policy_air_temp_19
		}
		multiply_variable = {
			af_expend = 2.875
		}
	}
    else_if = {
		limit = {
			has_idea = policy_air_temp_20
		}
		multiply_variable = {
			af_expend = 3
		}
	}
    else = { }

	set_variable = {
		space_expend = ROOT.amount_research_slots
	}

	if = {
		limit = {
			has_country_flag = sdibudget1
		}
		multiply_variable = {
			space_expend = 0.5
		}
	}
	if = {
		limit = {
			has_country_flag = sdibudget2
		}
		multiply_variable = {
			space_expend = 1
		}
	}
	
	if = {
		limit = {
			has_idea = policy_space_temp_0
		}
		multiply_variable = {
			space_expend = 0
		}
	}
	else_if = {
		limit = {
			has_idea = policy_space_temp_1
		}
		multiply_variable = {
			space_expend = 1
		}
	}
	else_if = {
		limit = {
			has_idea = policy_space_temp_2
		}
		multiply_variable = {
			space_expend = 2
		}
	}
	else_if = {
		limit = {
			has_idea = policy_space_temp_3
		}
		multiply_variable = {
			space_expend = 3
		}
	}
	else_if = {
		limit = {
			has_idea = policy_space_temp_4
		}
		multiply_variable = {
			space_expend = 4
		}
	}
    else_if = {
		limit = {
			has_idea = policy_space_temp_5
		}
		multiply_variable = {
			space_expend = 5
		}
	}
    else_if = {
		limit = {
			has_idea = policy_space_temp_6
		}
		multiply_variable = {
			space_expend = 6
		}
	}
    else_if = {
		limit = {
			has_idea = policy_space_temp_7
		}
		multiply_variable = {
			space_expend = 7
		}
	}
    else_if = {
		limit = {
			has_idea = policy_space_temp_8
		}
		multiply_variable = {
			space_expend = 8
		}
	}
    else_if = {
		limit = {
			has_idea = policy_space_temp_9
		}
		multiply_variable = {
			space_expend = 9
		}
	}
    else_if = {
		limit = {
			has_idea = policy_space_temp_10
		}
		multiply_variable = {
			space_expend = 10
		}
	}
    else_if = {
		limit = {
			has_idea = policy_space_temp_11
		}
		multiply_variable = {
			space_expend = 11
		}
	}
    else_if = {
		limit = {
			has_idea = policy_space_temp_12
		}
		multiply_variable = {
			space_expend = 12
		}
	}
    else_if = {
		limit = {
			has_idea = policy_space_temp_13
		}
		multiply_variable = {
			space_expend = 13
		}
	}
    else_if = {
		limit = {
			has_idea = policy_space_temp_14
		}
		multiply_variable = {
			space_expend = 14
		}
	}
    else_if = {
		limit = {
			has_idea = policy_space_temp_15
		}
		multiply_variable = {
			space_expend = 15
		}
	}
    else_if = {
		limit = {
			has_idea = policy_space_temp_16
		}
		multiply_variable = {
			space_expend = 16
		}
	}
    else_if = {
		limit = {
			has_idea = policy_space_temp_17
		}
		multiply_variable = {
			space_expend = 17
		}
	}
    else_if = {
		limit = {
			has_idea = policy_space_temp_18
		}
		multiply_variable = {
			space_expend = 18
		}
	}
    else_if = {
		limit = {
			has_idea = policy_space_temp_19
		}
		multiply_variable = {
			space_expend = 19
		}
	}
    else_if = {
		limit = {
			has_idea = policy_space_temp_20
		}
		multiply_variable = {
			space_expend = 20
		}
	}
    else = { }
	set_variable = {
		currentbudget = space_expend
	} 
	refresh_space_gui = yes
	if = {
		limit = {
			has_idea = policy_special_temp_0
		}
		multiply_variable = {
			strategic_forces_expend = 0.5
		}
	}
	else_if = {
		limit = {
			has_idea = policy_special_temp_1
		}
		multiply_variable = {
			strategic_forces_expend = 0.625
		}
	}
	else_if = {
		limit = {
			has_idea = policy_special_temp_2
		}
		multiply_variable = {
			strategic_forces_expend = 0.75
		}
	}
	else_if = {
		limit = {
			has_idea = policy_special_temp_3
		}
		multiply_variable = {
			strategic_forces_expend = 0.875
		}
	}
	else_if = {
		limit = {
			has_idea = policy_special_temp_4
		}
		multiply_variable = {
			strategic_forces_expend = 1
		}
	}
    else_if = {
		limit = {
			has_idea = policy_special_temp_5
		}
		multiply_variable = {
			strategic_forces_expend = 1.125
		}
	}
    else_if = {
		limit = {
			has_idea = policy_special_temp_6
		}
		multiply_variable = {
			strategic_forces_expend = 1.25
		}
	}
    else_if = {
		limit = {
			has_idea = policy_special_temp_7
		}
		multiply_variable = {
			strategic_forces_expend = 1.375
		}
	}
    else_if = {
		limit = {
			has_idea = policy_special_temp_8
		}
		multiply_variable = {
			strategic_forces_expend = 1.5
		}
	}
    else_if = {
		limit = {
			has_idea = policy_special_temp_9
		}
		multiply_variable = {
			strategic_forces_expend = 1.625
		}
	}
    else_if = {
		limit = {
			has_idea = policy_special_temp_10
		}
		multiply_variable = {
			strategic_forces_expend = 1.75
		}
	}
    else_if = {
		limit = {
			has_idea = policy_special_temp_11
		}
		multiply_variable = {
			strategic_forces_expend = 1.875
		}
	}
    else_if = {
		limit = {
			has_idea = policy_special_temp_12
		}
		multiply_variable = {
			strategic_forces_expend = 2
		}
	}
    else_if = {
		limit = {
			has_idea = policy_special_temp_13
		}
		multiply_variable = {
			strategic_forces_expend = 2.125
		}
	}
    else_if = {
		limit = {
			has_idea = policy_special_temp_14
		}
		multiply_variable = {
			strategic_forces_expend = 2.25
		}
	}
    else_if = {
		limit = {
			has_idea = policy_special_temp_15
		}
		multiply_variable = {
			strategic_forces_expend = 2.375
		}
	}
    else_if = {
		limit = {
			has_idea = policy_special_temp_16
		}
		multiply_variable = {
			strategic_forces_expend = 2.5
		}
	}
    else_if = {
		limit = {
			has_idea = policy_special_temp_17
		}
		multiply_variable = {
			strategic_forces_expend = 2.625
		}
	}
    else_if = {
		limit = {
			has_idea = policy_special_temp_18
		}
		multiply_variable = {
			strategic_forces_expend = 2.75
		}
	}
    else_if = {
		limit = {
			has_idea = policy_special_temp_19
		}
		multiply_variable = {
			strategic_forces_expend = 2.875
		}
	}
    else_if = {
		limit = {
			has_idea = policy_special_temp_20
		}
		multiply_variable = {
			strategic_forces_expend = 3
		}
	}
    else = { }


	if = {
		limit = {
			has_idea = policy_military_temp_0
		}
		multiply_variable = {
			mil_expend = 0.5
		}
	}
	else_if = {
		limit = {
			has_idea = policy_military_temp_1
		}
		multiply_variable = {
			mil_expend = 0.625
		}
	}
	else_if = {
		limit = {
			has_idea = policy_military_temp_2
		}
		multiply_variable = {
			mil_expend = 0.75
		}
	}
	else_if = {
		limit = {
			has_idea = policy_military_temp_3
		}
		multiply_variable = {
			mil_expend = 0.875
		}
	}
	else_if = {
		limit = {
			has_idea = policy_military_temp_4
		}
		multiply_variable = {
			mil_expend = 1
		}
	}
    else_if = {
		limit = {
			has_idea = policy_military_temp_5
		}
		multiply_variable = {
			mil_expend = 1.125
		}
	}
    else_if = {
		limit = {
			has_idea = policy_military_temp_6
		}
		multiply_variable = {
			mil_expend = 1.25
		}
	}
    else_if = {
		limit = {
			has_idea = policy_military_temp_7
		}
		multiply_variable = {
			mil_expend = 1.375
		}
	}
    else_if = {
		limit = {
			has_idea = policy_military_temp_8
		}
		multiply_variable = {
			mil_expend = 1.5
		}
	}
    else_if = {
		limit = {
			has_idea = policy_military_temp_9
		}
		multiply_variable = {
			mil_expend = 1.625
		}
	}
    else_if = {
		limit = {
			has_idea = policy_military_temp_10
		}
		multiply_variable = {
			mil_expend = 1.75
		}
	}
    else_if = {
		limit = {
			has_idea = policy_military_temp_11
		}
		multiply_variable = {
			mil_expend = 1.875
		}
	}
    else_if = {
		limit = {
			has_idea = policy_military_temp_12
		}
		multiply_variable = {
			mil_expend = 2
		}
	}
    else_if = {
		limit = {
			has_idea = policy_military_temp_13
		}
		multiply_variable = {
			mil_expend = 2.125
		}
	}
    else_if = {
		limit = {
			has_idea = policy_military_temp_14
		}
		multiply_variable = {
			mil_expend = 2.25
		}
	}
    else_if = {
		limit = {
			has_idea = policy_military_temp_15
		}
		multiply_variable = {
			mil_expend = 2.375
		}
	}
    else_if = {
		limit = {
			has_idea = policy_military_temp_16
		}
		multiply_variable = {
			mil_expend = 2.5
		}
	}
    else_if = {
		limit = {
			has_idea = policy_military_temp_17
		}
		multiply_variable = {
			mil_expend = 2.625
		}
	}
    else_if = {
		limit = {
			has_idea = policy_military_temp_18
		}
		multiply_variable = {
			mil_expend = 2.75
		}
	}
    else_if = {
		limit = {
			has_idea = policy_military_temp_19
		}
		multiply_variable = {
			mil_expend = 2.875
		}
	}
    else_if = {
		limit = {
			has_idea = policy_military_temp_20
		}
		multiply_variable = {
			mil_expend = 3
		}
	}
    else = { }

	##calc for corruption/subsidies
	set_variable = {
		mil_expend_display = mil_expend
	}
	set_variable = {
		navy_expend_display = navy_expend
	}
	set_variable = {
		af_expend_display = af_expend
	}
	##
	multiply_variable = {
		mil_expend_display = military_edict_debit_factor
	}
	multiply_variable = {
		navy_expend_display = military_edict_debit_factor
	}
	multiply_variable = {
		af_expend_display = military_edict_debit_factor
	}
	##
	add_to_variable = {
		mil_expend = military_edict_debit_gain
	}
	multiply_variable = {
		mil_expend = military_edict_debit_factor
	}
	add_to_variable = {
		navy_expend = military_edict_debit_gain
	}
	multiply_variable = {
		navy_expend = military_edict_debit_factor
	}
	add_to_variable = {
		af_expend = military_edict_debit_gain
	}
	multiply_variable = {
		af_expend = military_edict_debit_factor
	}
	##
	multiply_variable = {
		mil_expend = global.GlobalDebit
	}	#COST DIVIDER
	multiply_variable = {
		mil_expend_display = global.GlobalDebit
	}	#COST DIVIDER
	multiply_variable = {
		navy_expend = global.GlobalDebit
	}	#COST DIVIDER
	multiply_variable = {
		navy_expend_display = global.GlobalDebit
	}	#COST DIVIDER
	multiply_variable = {
		af_expend = global.GlobalDebit
	}	#COST DIVIDER
	multiply_variable = {
		af_expend_display = global.GlobalDebit
	}	#COST DIVIDER
	##
	set_variable = {
		mil_expend_subsidy = mil_expend
	}
	multiply_variable = {
		mil_expend_subsidy = 0.25
	}
	set_variable = {
		mil_expend_subsidy_tot = 0
	}
	set_variable = {
		navy_expend_subsidy = navy_expend
	}
	multiply_variable = {
		navy_expend_subsidy = 0.25
	}
	set_variable = {
		navy_expend_subsidy_tot = 0
	}
	set_variable = {
		af_expend_subsidy = af_expend
	}
	multiply_variable = {
		af_expend_subsidy = 0.25
	}
	set_variable = {
		af_expend_subsidy_tot = 0
	}
	for_each_scope_loop = {
		array = ROOT.military_subsidies
		meta_effect = {
			text = {
				add_to_variable = {
					mil_expend_subsidy_tot = [ROOTTAG].mil_expend_subsidy
				}
				add_to_variable = {
					navy_expend_subsidy_tot = [ROOTTAG].mil_expend_subsidy
				}
				add_to_variable = {
					af_expend_subsidy_tot = [ROOTTAG].mil_expend_subsidy
				}
			}
			ROOTTAG = "[?var:mil_subsidy_id.GetTag]"
		}
		subtract_from_variable = {
			mil_expend = mil_expend_subsidy
		}
		subtract_from_variable = {
			navy_expend = mil_expend_subsidy
		}
		subtract_from_variable = {
			af_expend = mil_expend_subsidy
		}
		for_loop_effect = {
			end = influence_array^num
			value = v
			if = {
				limit = {
					check_variable = {
						influence_array^v = mil_subsidy_id
					}
				}
				add_to_variable = {
					influence_array_val^v = mil_expend_subsidy
				}
				set_country_flag = found
			}
		}
		recalculate_influence = yes
	}
	##
	add_to_variable = {
		mil_expend = mil_expend_subsidy_tot
	}
	set_variable = {
		mil_expend_cor_penalty = mil_expend
	}
	multiply_variable = {
		mil_expend_cor_penalty = CorruptPolicyExcess
	}
	add_to_variable = {
		mil_expend = mil_expend_cor_penalty
	}
	#add_to_variable = { mil_cost_display = mil_cost_cor_penalty }
	#
	add_to_variable = {
		navy_expend = navy_expend_subsidy_tot
	}
	set_variable = {
		navy_expend_cor_penalty = navy_expend
	}
	multiply_variable = {
		navy_expend_cor_penalty = CorruptPolicyExcess
	}
	add_to_variable = {
		navy_expend = navy_expend_cor_penalty
	}
	#add_to_variable = { navy = navy_cost_cor_penalty }
	#
	add_to_variable = {
		af_expend = af_expend_subsidy_tot
	}
	set_variable = {
		af_expend_cor_penalty = af_expend
	}
	multiply_variable = {
		af_expend_cor_penalty = CorruptPolicyExcess
	}
	add_to_variable = {
		af_expend = af_expend_cor_penalty
	}
	#add_to_variable = { af_cost_display = af_cost_cor_penalty }
	#
	set_variable = {
		mil_gui_total = 0
	}
	set_variable = {
		navy_gui_total = 0
	}
	set_variable = {
		af_gui_total = 0
	}
	add_to_variable = {
		mil_gui_total = mil_expend
	}
	add_to_variable = {
		navy_gui_total = navy_expend
	}
	add_to_variable = {
		af_gui_total = af_expend
	}
	#addition
	add_to_variable = {
		mil_expend = navy_expend
	}
	add_to_variable = {
		mil_expend = af_expend
	}
	add_to_variable = {
		mil_expend = strategic_forces_expend
	}
	add_to_variable = {
		mil_expend = space_expend
	}
	subtract_from_variable = {
		IncomeCheck = mil_expend
	}
}

welfare_expenditure = {
	add_to_variable = {
		IncomeCheck = welfare_cost
	}
	set_variable = {
		welfare_cost = 0
	}
	set_variable = {
		welfare_cost = social_cost_base
	}
	multiply_variable = {
		ROOT.welfare_cost = 0.001
	}
	if = {
		limit = {
			has_idea = policy_welfare_temp_0
		}
		multiply_variable = {
			welfare_cost = 0.01
		}
	}
	else_if = {
		limit = {
			has_idea = policy_welfare_temp_1
		}
		multiply_variable = {
			welfare_cost = 0.15
		}
	}
	else_if = {
		limit = {
			has_idea = policy_welfare_temp_2
		}
		multiply_variable = {
			welfare_cost = 0.3
		}
	}
	else_if = {
		limit = {
			has_idea = policy_welfare_temp_3
		}
		multiply_variable = {
			welfare_cost = 0.45
		}
	}
	else_if = {
		limit = {
			has_idea = policy_welfare_temp_4
		}
		multiply_variable = {
			welfare_cost = 0.6
		}
	}
    else_if = {
		limit = {
			has_idea = policy_welfare_temp_5
		}
		multiply_variable = {
			welfare_cost = 0.75
		}
	}
    else_if = {
		limit = {
			has_idea = policy_welfare_temp_6
		}
		multiply_variable = {
			welfare_cost = 0.9
		}
	}
    else_if = {
		limit = {
			has_idea = policy_welfare_temp_7
		}
		multiply_variable = {
			welfare_cost = 1.05
		}
	}
    else_if = {
		limit = {
			has_idea = policy_welfare_temp_8
		}
		multiply_variable = {
			welfare_cost = 1.2
		}
	}
    else_if = {
		limit = {
			has_idea = policy_welfare_temp_9
		}
		multiply_variable = {
			welfare_cost = 1.35
		}
	}
    else_if = {
		limit = {
			has_idea = policy_welfare_temp_10
		}
		multiply_variable = {
			welfare_cost = 1.5
		}
	}
    else_if = {
		limit = {
			has_idea = policy_welfare_temp_11
		}
		multiply_variable = {
			welfare_cost = 1.65
		}
	}
    else_if = {
		limit = {
			has_idea = policy_welfare_temp_12
		}
		multiply_variable = {
			welfare_cost = 1.8
		}
	}
    else_if = {
		limit = {
			has_idea = policy_welfare_temp_13
		}
		multiply_variable = {
			welfare_cost = 1.95
		}
	}
    else_if = {
		limit = {
			has_idea = policy_welfare_temp_14
		}
		multiply_variable = {
			welfare_cost = 2.1
		}
	}
    else_if = {
		limit = {
			has_idea = policy_welfare_temp_15
		}
		multiply_variable = {
			welfare_cost = 2.25
		}
	}
    else_if = {
		limit = {
			has_idea = policy_welfare_temp_16
		}
		multiply_variable = {
			welfare_cost = 2.4
		}
	}
    else_if = {
		limit = {
			has_idea = policy_welfare_temp_17
		}
		multiply_variable = {
			welfare_cost = 2.55
		}
	}
    else_if = {
		limit = {
			has_idea = policy_welfare_temp_18
		}
		multiply_variable = {
			welfare_cost = 2.70
		}
	}
    else_if = {
		limit = {
			has_idea = policy_welfare_temp_19
		}
		multiply_variable = {
			welfare_cost = 2.85
		}
	}
    else_if = {
		limit = {
			has_idea = policy_welfare_temp_20
		}
		multiply_variable = {
			welfare_cost = 3
		}
	}
    else = { }
	set_variable = {
		welfare_cost_adjustment_policy = welfare_cost
	}
	multiply_variable = {
		welfare_cost_adjustment_policy = modifier@modifier_welfare_spending 
	}
	add_to_variable = {
		welfare_cost = edu_cost_adjustment_policy
	}
	multiply_variable = {
		welfare_cost = social_cost_dev_modifier
	}
	set_variable = {
		welfare_cost_display = welfare_cost
	}
	multiply_variable = {
		welfare_cost_display = welfare_edict_debit_factor
	}
	add_to_variable = {
		welfare_cost = welfare_edict_debit_gain
	}
	multiply_variable = {
		welfare_cost = welfare_edict_debit_factor
	}
	multiply_variable = {
		welfare_cost = global.GlobalDebit
	}	#COST DIVIDER
	multiply_variable = {
		welfare_cost_display = global.GlobalDebit
	}	#COST DIVIDER
	set_variable = {
		welfare_cost_cor_penalty = welfare_cost
	}
	multiply_variable = {
		welfare_cost_cor_penalty = CorruptPolicyExcess
	}
	add_to_variable = {
		welfare_cost = welfare_cost_cor_penalty
	}
	add_to_variable = {
		welfare_cost_display = welfare_cost_cor_penalty
	}
	subtract_from_variable = {
		IncomeCheck = welfare_cost
	}
}

cpi_expenditure = {
	add_to_variable = {
		IncomeCheck = cpi_cost
	}
	set_variable = {
		cpi_cost = 0
	}
	set_variable = {
		cpi_cost = social_cost_base
	}
	multiply_variable = {
		ROOT.cpi_cost = 0.001
	}
	if = {
		limit = {
			has_idea = policy_cpi_temp_0
		}
		multiply_variable = {
			cpi_cost = 0.01
		}
	}
	else_if = {
		limit = {
			has_idea = policy_cpi_temp_1
		}
		multiply_variable = {
			cpi_cost = 0.1
		}
	}
	else_if = {
		limit = {
			has_idea = policy_cpi_temp_2
		}
		multiply_variable = {
			cpi_cost = 0.2
		}
	}
	else_if = {
		limit = {
			has_idea = policy_cpi_temp_3
		}
		multiply_variable = {
			cpi_cost = 0.3
		}
	}
	else_if = {
		limit = {
			has_idea = policy_cpi_temp_4
		}
		multiply_variable = {
			cpi_cost = 0.4
		}
	}
    else_if = {
		limit = {
			has_idea = policy_cpi_temp_5
		}
		multiply_variable = {
			cpi_cost = 0.5
		}
	}
    else_if = {
		limit = {
			has_idea = policy_cpi_temp_6
		}
		multiply_variable = {
			cpi_cost = 0.6
		}
	}
    else_if = {
		limit = {
			has_idea = policy_cpi_temp_7
		}
		multiply_variable = {
			cpi_cost = 0.7
		}
	}
    else_if = {
		limit = {
			has_idea = policy_cpi_temp_8
		}
		multiply_variable = {
			cpi_cost = 0.8
		}
	}
    else_if = {
		limit = {
			has_idea = policy_cpi_temp_9
		}
		multiply_variable = {
			cpi_cost = 0.9
		}
	}
    else_if = {
		limit = {
			has_idea = policy_cpi_temp_10
		}
		multiply_variable = {
			cpi_cost = 1
		}
	}
    else_if = {
		limit = {
			has_idea = policy_cpi_temp_11
		}
		multiply_variable = {
			cpi_cost = 1.1
		}
	}
    else_if = {
		limit = {
			has_idea = policy_cpi_temp_12
		}
		multiply_variable = {
			cpi_cost = 1.2
		}
	}
    else_if = {
		limit = {
			has_idea = policy_cpi_temp_13
		}
		multiply_variable = {
			cpi_cost = 1.3
		}
	}
    else_if = {
		limit = {
			has_idea = policy_cpi_temp_14
		}
		multiply_variable = {
			cpi_cost = 1.4
		}
	}
    else_if = {
		limit = {
			has_idea = policy_cpi_temp_15
		}
		multiply_variable = {
			cpi_cost = 1.5
		}
	}
    else_if = {
		limit = {
			has_idea = policy_cpi_temp_16
		}
		multiply_variable = {
			cpi_cost = 1.6
		}
	}
    else_if = {
		limit = {
			has_idea = policy_cpi_temp_17
		}
		multiply_variable = {
			cpi_cost = 1.7
		}
	}
    else_if = {
		limit = {
			has_idea = policy_cpi_temp_18
		}
		multiply_variable = {
			cpi_cost = 1.8
		}
	}
    else_if = {
		limit = {
			has_idea = policy_cpi_temp_19
		}
		multiply_variable = {
			cpi_cost = 1.9
		}
	}
    else_if = {
		limit = {
			has_idea = policy_cpi_temp_20
		}
		multiply_variable = {
			cpi_cost = 2
		}
	}
    else = { }
	multiply_variable = {
		cpi_cost = social_cost_dev_modifier
	}
	set_variable = {
		cpi_cost_display = cpi_cost
	}
	multiply_variable = {
		cpi_cost_display = cpi_edict_debit_factor
	}
	add_to_variable = {
		cpi_cost = cpi_edict_debit_gain
	}
	multiply_variable = {
		cpi_cost = cpi_edict_debit_factor
	}
	multiply_variable = {
		cpi_cost = global.GlobalDebit
	}	#COST DIVIDER
	multiply_variable = {
		cpi_cost_display = global.GlobalDebit
	}	#COST DIVIDER
	set_variable = {
		cpi_cost_cor_penalty = cpi_cost
	}
	multiply_variable = {
		cpi_cost_cor_penalty = CorruptPolicyExcess
	}
	add_to_variable = {
		cpi_cost = cpi_cost_cor_penalty
	}
	add_to_variable = {
		cpi_cost_display = cpi_cost_cor_penalty
	}
	subtract_from_variable = {
		IncomeCheck = cpi_cost
	}
	#AGENCY-RELATED STUFF#
	if = {
		limit = {
			has_intelligence_agency = yes
		}
		agency_calc_operative_slots = yes
	}
}

agency_calc_operative_slots = {
	count_agency_upgrades = yes
	set_variable = {
		operative_slot_bonus = num_agency_upgrades_real
	}
	divide_variable = {
		operative_slot_bonus = global.upgrades_per_operative
	}	#Number of agency upgrades divided by agency upgrades per operative gain
	round_variable = operative_slot_bonus
	if = {
		limit = {
			check_variable = {
				operative_slot_bonus = 1
			}
		}
		add_ideas = operative_slots_from_upgrade_1
	}
	else_if = {
		limit = {
			check_variable = {
				operative_slot_bonus = 2
			}
		}
		add_ideas = operative_slots_from_upgrade_2
		remove_ideas = operative_slots_from_upgrade_1		#Remove needs to be below to not delete existing operatives
	}
	else_if = {
		limit = {
			check_variable = {
				operative_slot_bonus = 3
			}
		}
		add_ideas = operative_slots_from_upgrade_3
		remove_ideas = {
			#Remove needs to be below to not delete existing operatives
			operative_slots_from_upgrade_1
			operative_slots_from_upgrade_2
		}
	}
	else_if = {
		limit = {
			check_variable = {
				operative_slot_bonus = 4
			}
		}
		add_ideas = operative_slots_from_upgrade_4
		remove_ideas = {
			#Remove needs to be below to not delete existing operatives
			operative_slots_from_upgrade_1
			operative_slots_from_upgrade_2
			operative_slots_from_upgrade_3
		}
	}
	else_if = {
		limit = {
			check_variable = {
				operative_slot_bonus = 5
			}
		}
		add_ideas = operative_slots_from_upgrade_5
		remove_ideas = {
			#Remove needs to be below to not delete existing operatives
			operative_slots_from_upgrade_1
			operative_slots_from_upgrade_2
			operative_slots_from_upgrade_3
			operative_slots_from_upgrade_4
		}
	}
	else_if = {
		limit = {
			check_variable = {
				operative_slot_bonus = 6
			}
		}
		add_ideas = operative_slots_from_upgrade_6
		remove_ideas = {
			#Remove needs to be below to not delete existing operatives
			operative_slots_from_upgrade_1
			operative_slots_from_upgrade_2
			operative_slots_from_upgrade_3
			operative_slots_from_upgrade_4
			operative_slots_from_upgrade_5
		}
	}
	else_if = {
		limit = {
			check_variable = {
				operative_slot_bonus = 7
			}
		}
		add_ideas = operative_slots_from_upgrade_7
		remove_ideas = {
			#Remove needs to be below to not delete existing operatives
			operative_slots_from_upgrade_1
			operative_slots_from_upgrade_2
			operative_slots_from_upgrade_3
			operative_slots_from_upgrade_4
			operative_slots_from_upgrade_5
			operative_slots_from_upgrade_6
		}
	}
	else_if = {
		limit = {
			check_variable = {
				operative_slot_bonus = 8
			}
		}
		add_ideas = operative_slots_from_upgrade_8
		remove_ideas = {
			#Remove needs to be below to not delete existing operatives
			operative_slots_from_upgrade_1
			operative_slots_from_upgrade_2
			operative_slots_from_upgrade_3
			operative_slots_from_upgrade_4
			operative_slots_from_upgrade_5
			operative_slots_from_upgrade_6
			operative_slots_from_upgrade_7
		}
	}
	else_if = {
		limit = {
			check_variable = {
				operative_slot_bonus = 9
			}
		}
		add_ideas = operative_slots_from_upgrade_9
		remove_ideas = {
			#Remove needs to be below to not delete existing operatives
			operative_slots_from_upgrade_1
			operative_slots_from_upgrade_2
			operative_slots_from_upgrade_3
			operative_slots_from_upgrade_4
			operative_slots_from_upgrade_5
			operative_slots_from_upgrade_6
			operative_slots_from_upgrade_7
			operative_slots_from_upgrade_8
		}
	}
	else_if = {
		limit = {
			check_variable = {
				var = operative_slot_bonus
				compare = greater_than_or_equals
				value = 10
			}
		}
		add_ideas = operative_slots_from_upgrade_10
		remove_ideas = {
			#Remove needs to be below to not delete existing operatives
			operative_slots_from_upgrade_1
			operative_slots_from_upgrade_2
			operative_slots_from_upgrade_3
			operative_slots_from_upgrade_4
			operative_slots_from_upgrade_5
			operative_slots_from_upgrade_6
			operative_slots_from_upgrade_7
			operative_slots_from_upgrade_8
			operative_slots_from_upgrade_9
		}
	}
}

edu_expenditure = {
	add_to_variable = {
		IncomeCheck = edu_cost
	}
	set_variable = {
		edu_cost = 0
	}
	set_variable = {
		edu_cost = social_cost_base
	}
	multiply_variable = {
		ROOT.edu_cost = 0.001
	}
	if = {
		limit = {
			has_idea = policy_education_temp_0
		}
		multiply_variable = {
			edu_cost = 0.01
		}
	}
	else_if = {
		limit = {
			has_idea = policy_education_temp_1
		}
		multiply_variable = {
			edu_cost = 0.15
		}
	}
	else_if = {
		limit = {
			has_idea = policy_education_temp_2
		}
		multiply_variable = {
			edu_cost = 0.3
		}
	}
	else_if = {
		limit = {
			has_idea = policy_education_temp_3
		}
		multiply_variable = {
			edu_cost = 0.45
		}
	}
	else_if = {
		limit = {
			has_idea = policy_education_temp_4
		}
		multiply_variable = {
			edu_cost = 0.6
		}
	}
    else_if = {
		limit = {
			has_idea = policy_education_temp_5
		}
		multiply_variable = {
			edu_cost = 0.75
		}
	}
    else_if = {
		limit = {
			has_idea = policy_education_temp_6
		}
		multiply_variable = {
			edu_cost = 0.9
		}
	}
    else_if = {
		limit = {
			has_idea = policy_education_temp_7
		}
		multiply_variable = {
			edu_cost = 1.05
		}
	}
    else_if = {
		limit = {
			has_idea = policy_education_temp_8
		}
		multiply_variable = {
			edu_cost = 1.2
		}
	}
    else_if = {
		limit = {
			has_idea = policy_education_temp_9
		}
		multiply_variable = {
			edu_cost = 1.35
		}
	}
    else_if = {
		limit = {
			has_idea = policy_education_temp_10
		}
		multiply_variable = {
			edu_cost = 1.5
		}
	}
    else_if = {
		limit = {
			has_idea = policy_education_temp_11
		}
		multiply_variable = {
			edu_cost = 1.65
		}
	}
    else_if = {
		limit = {
			has_idea = policy_education_temp_12
		}
		multiply_variable = {
			edu_cost = 1.8
		}
	}
    else_if = {
		limit = {
			has_idea = policy_education_temp_13
		}
		multiply_variable = {
			edu_cost = 1.95
		}
	}
    else_if = {
		limit = {
			has_idea = policy_education_temp_14
		}
		multiply_variable = {
			edu_cost = 2.1
		}
	}
    else_if = {
		limit = {
			has_idea = policy_education_temp_15
		}
		multiply_variable = {
			edu_cost = 2.25
		}
	}
    else_if = {
		limit = {
			has_idea = policy_education_temp_16
		}
		multiply_variable = {
			edu_cost = 2.4
		}
	}
    else_if = {
		limit = {
			has_idea = policy_education_temp_17
		}
		multiply_variable = {
			edu_cost = 2.55
		}
	}
    else_if = {
		limit = {
			has_idea = policy_education_temp_18
		}
		multiply_variable = {
			edu_cost = 2.70
		}
	}
    else_if = {
		limit = {
			has_idea = policy_education_temp_19
		}
		multiply_variable = {
			edu_cost = 2.85
		}
	}
    else_if = {
		limit = {
			has_idea = policy_education_temp_20
		}
		multiply_variable = {
			edu_cost = 3
		}
	}
    else = { }
	set_variable = {
		edu_cost_adjustment_policy = edu_cost
	}
	multiply_variable = {
		edu_cost_adjustment_policy = modifier@modifier_education_spending 
	}
	add_to_variable = {
		edu_cost = edu_cost_adjustment_policy
	}
	multiply_variable = {
		edu_cost = social_cost_dev_modifier
	}
	set_variable = {
		edu_cost_display = edu_cost
	}
	multiply_variable = {
		edu_cost_display = education_edict_debit_factor
	}
	add_to_variable = {
		edu_cost = education_edict_debit_gain
	}
	multiply_variable = {
		edu_cost = education_edict_debit_factor
	}
	multiply_variable = {
		edu_cost = global.GlobalDebit
	}	#COST DIVIDER
	multiply_variable = {
		edu_cost_display = global.GlobalDebit
	}	#COST DIVIDER
	set_variable = {
		edu_cost_cor_penalty = edu_cost
	}
	multiply_variable = {
		edu_cost_cor_penalty = CorruptPolicyExcess
	}
	add_to_variable = {
		edu_cost = edu_cost_cor_penalty
	}
	add_to_variable = {
		edu_cost_display = edu_cost_cor_penalty
	}
	subtract_from_variable = {
		IncomeCheck = edu_cost
	}
}

health_expenditure = {
	add_to_variable = {
		IncomeCheck = health_cost
	}
	set_variable = {
		health_cost = 0
	}
	set_variable = {
		health_cost = social_cost_base
	}
	multiply_variable = {
		ROOT.health_cost = 0.001
	}
	if = {
		limit = {
			has_idea = policy_healthcare_temp_0
		}
		multiply_variable = {
			health_cost = 0.01
		}
	}
	else_if = {
		limit = {
			has_idea = policy_healthcare_temp_1
		}
		multiply_variable = {
			health_cost = 0.15
		}
	}
	else_if = {
		limit = {
			has_idea = policy_healthcare_temp_2
		}
		multiply_variable = {
			health_cost = 0.3
		}
	}
	else_if = {
		limit = {
			has_idea = policy_healthcare_temp_3
		}
		multiply_variable = {
			health_cost = 0.45
		}
	}
	else_if = {
		limit = {
			has_idea = policy_healthcare_temp_4
		}
		multiply_variable = {
			health_cost = 0.6
		}
	}
    else_if = {
		limit = {
			has_idea = policy_healthcare_temp_5
		}
		multiply_variable = {
			health_cost = 0.75
		}
	}
    else_if = {
		limit = {
			has_idea = policy_healthcare_temp_6
		}
		multiply_variable = {
			health_cost = 0.9
		}
	}
    else_if = {
		limit = {
			has_idea = policy_healthcare_temp_7
		}
		multiply_variable = {
			health_cost = 1.05
		}
	}
    else_if = {
		limit = {
			has_idea = policy_healthcare_temp_8
		}
		multiply_variable = {
			health_cost = 1.2
		}
	}
    else_if = {
		limit = {
			has_idea = policy_healthcare_temp_9
		}
		multiply_variable = {
			health_cost = 1.35
		}
	}
    else_if = {
		limit = {
			has_idea = policy_healthcare_temp_10
		}
		multiply_variable = {
			health_cost = 1.5
		}
	}
    else_if = {
		limit = {
			has_idea = policy_healthcare_temp_11
		}
		multiply_variable = {
			health_cost = 1.65
		}
	}
    else_if = {
		limit = {
			has_idea = policy_healthcare_temp_12
		}
		multiply_variable = {
			health_cost = 1.8
		}
	}
    else_if = {
		limit = {
			has_idea = policy_healthcare_temp_13
		}
		multiply_variable = {
			health_cost = 1.95
		}
	}
    else_if = {
		limit = {
			has_idea = policy_healthcare_temp_14
		}
		multiply_variable = {
			health_cost = 2.1
		}
	}
    else_if = {
		limit = {
			has_idea = policy_healthcare_temp_15
		}
		multiply_variable = {
			health_cost = 2.25
		}
	}
    else_if = {
		limit = {
			has_idea = policy_healthcare_temp_16
		}
		multiply_variable = {
			health_cost = 2.4
		}
	}
    else_if = {
		limit = {
			has_idea = policy_healthcare_temp_17
		}
		multiply_variable = {
			health_cost = 2.55
		}
	}
    else_if = {
		limit = {
			has_idea = policy_healthcare_temp_18
		}
		multiply_variable = {
			health_cost = 2.70
		}
	}
    else_if = {
		limit = {
			has_idea = policy_healthcare_temp_19
		}
		multiply_variable = {
			health_cost = 2.85
		}
	}
    else_if = {
		limit = {
			has_idea = policy_healthcare_temp_20
		}
		multiply_variable = {
			health_cost = 3
		}
	}
    else = { }
	multiply_variable = {
		health_cost = social_cost_dev_modifier
	}
	##UK 50s Healthcare NHS##
	if = {
		limit = {
			has_idea = Poor_NHS
		}
		multiply_variable = {
			health_cost = 0.9
		}
	}
	else_if = {
		limit = {
			has_idea = Medium_NHS
		}
		multiply_variable = {
			health_cost = 0.75
		}
	}
	else_if = {
		limit = {
			has_idea = Strong_NHS
		}
		multiply_variable = {
			health_cost = 0.5
		}
	}
	else = {

	}
	##End of UK 50s NHS##
	set_variable = {
		health_cost_display = health_cost
	}
	multiply_variable = {
		health_cost_display = healthcare_edict_debit_factor
	}
	add_to_variable = {
		health_cost = healthcare_edict_debit_gain
	}
	multiply_variable = {
		health_cost = healthcare_edict_debit_factor
	}
	multiply_variable = {
		health_cost = global.GlobalDebit
	}	#COST DIVIDER
	multiply_variable = {
		health_cost_display = global.GlobalDebit
	}	#COST DIVIDER
	set_variable = {
		health_cost_cor_penalty = health_cost
	}
	multiply_variable = {
		health_cost_cor_penalty = CorruptPolicyExcess
	}
	add_to_variable = {
		health_cost = health_cost_cor_penalty
	}
	add_to_variable = {
		health_cost_display = health_cost_cor_penalty
	}
	subtract_from_variable = {
		IncomeCheck = health_cost
	}
}

public_expenditure = {
	add_to_variable = {
		IncomeCheck = pub_cost
	}
	set_variable = {
		pub_cost = 0
	}
	set_variable = {
		pub_cost = social_cost_base
	}
	multiply_variable = {
		ROOT.pub_cost = 0.001
	}
	if = {
		limit = {
			has_idea = policy_services_temp_0
		}
		multiply_variable = {
			pub_cost = 0.01
		}
	}
	else_if = {
		limit = {
			has_idea = policy_services_temp_1
		}
		multiply_variable = {
			pub_cost = 0.1
		}
	}
	else_if = {
		limit = {
			has_idea = policy_services_temp_2
		}
		multiply_variable = {
			pub_cost = 0.2
		}
	}
	else_if = {
		limit = {
			has_idea = policy_services_temp_3
		}
		multiply_variable = {
			pub_cost = 0.3
		}
	}
	else_if = {
		limit = {
			has_idea = policy_services_temp_4
		}
		multiply_variable = {
			pub_cost = 0.4
		}
	}
    else_if = {
		limit = {
			has_idea = policy_services_temp_5
		}
		multiply_variable = {
			pub_cost = 0.5
		}
	}
    else_if = {
		limit = {
			has_idea = policy_services_temp_6
		}
		multiply_variable = {
			pub_cost = 0.6
		}
	}
    else_if = {
		limit = {
			has_idea = policy_services_temp_7
		}
		multiply_variable = {
			pub_cost = 0.7
		}
	}
    else_if = {
		limit = {
			has_idea = policy_services_temp_8
		}
		multiply_variable = {
			pub_cost = 0.8
		}
	}
    else_if = {
		limit = {
			has_idea = policy_services_temp_9
		}
		multiply_variable = {
			pub_cost = 0.9
		}
	}
    else_if = {
		limit = {
			has_idea = policy_services_temp_10
		}
		multiply_variable = {
			pub_cost = 1
		}
	}
    else_if = {
		limit = {
			has_idea = policy_services_temp_11
		}
		multiply_variable = {
			pub_cost = 1.1
		}
	}
    else_if = {
		limit = {
			has_idea = policy_services_temp_12
		}
		multiply_variable = {
			pub_cost = 1.2
		}
	}
    else_if = {
		limit = {
			has_idea = policy_services_temp_13
		}
		multiply_variable = {
			pub_cost = 1.3
		}
	}
    else_if = {
		limit = {
			has_idea = policy_services_temp_14
		}
		multiply_variable = {
			pub_cost = 1.4
		}
	}
    else_if = {
		limit = {
			has_idea = policy_services_temp_15
		}
		multiply_variable = {
			pub_cost = 1.5
		}
	}
    else_if = {
		limit = {
			has_idea = policy_services_temp_16
		}
		multiply_variable = {
			pub_cost = 1.6
		}
	}
    else_if = {
		limit = {
			has_idea = policy_services_temp_17
		}
		multiply_variable = {
			pub_cost = 1.7
		}
	}
    else_if = {
		limit = {
			has_idea = policy_services_temp_18
		}
		multiply_variable = {
			pub_cost = 1.8
		}
	}
    else_if = {
		limit = {
			has_idea = policy_services_temp_19
		}
		multiply_variable = {
			pub_cost = 1.9
		}
	}
    else_if = {
		limit = {
			has_idea = policy_services_temp_20
		}
		multiply_variable = {
			pub_cost = 2
		}
	}
    else = { }
	multiply_variable = {
		pub_cost = social_cost_dev_modifier
	}
	set_variable = {
		pub_cost_display = pub_cost
	}
	multiply_variable = {
		pub_cost_display = public_edict_debit_factor
	}
	add_to_variable = {
		pub_cost = public_edict_debit_gain
	}
	multiply_variable = {
		pub_cost = public_edict_debit_factor
	}
	multiply_variable = {
		pub_cost = global.GlobalDebit
	}	#COST DIVIDER
	multiply_variable = {
		pub_cost_display = global.GlobalDebit
	}	#COST DIVIDER
	set_variable = {
		pub_cost_cor_penalty = pub_cost
	}
	multiply_variable = {
		pub_cost_cor_penalty = CorruptPolicyExcess
	}
	add_to_variable = {
		pub_cost = pub_cost_cor_penalty
	}
	add_to_variable = {
		pub_cost_display = pub_cost_cor_penalty
	}
	add_to_variable = {
		pub_cost = comecon_spending_total
	}
	add_to_variable = {
		pub_cost_display = comecon_spending_total
	}
	subtract_from_variable = {
		IncomeCheck = pub_cost
	}
}
GDP_Extra_Calcs = {
	##GDP calcs
	set_variable = {
		grossdomesticproduct_fake = grossdomesticproduct
	}
	divide_variable = {
		grossdomesticproduct_fake = 1050
	}	#Fake display multiplier
	##monthly counter
	add_to_variable = {
		checkdone = 0
	}	##counts months since start
	##yearly counter
	add_to_variable = {
		multiplier_check = 0
	}
	if = {
		limit = {
			check_variable = {
				multiplier_check = 0
			}
		}
		set_variable = {
			graph_mult = -100
		}		## multiplier for graph display
		add_to_variable = {
			multiplier_check = 1
		}
	}
	set_variable = {
		yearlycheck = checkdone
	}
	set_variable = {
		yearlymodulo = yearlycheck
	}
	modulo_variable = {
		yearlymodulo = 12
	}	##checks if a year is complete
	if = {
		limit = {
			check_variable = {
				yearlymodulo = 0
			}
			check_variable = {
				checkdone < 179
			}			##number of months
		}
		add_to_variable = {
			yearlycounter = 1
		}		##every 12 months, a year completes
		calculate_gdp_growth = yes
		create_gdp_graph = yes		##chart generated every year
	}
	##runinit for initial start
	add_to_variable = {
		initrun = 0
	}	##first run
	if = {
		limit = {
			check_variable = {
				initrun = 0
			}
		}
		#arab league init
		set_variable = {
			QAT.Domestic_Progressbar_Total = 0
		}
		set_variable = {
			yearlycounter = 1
		}
		create_gdp_graph = yes
		set_variable = {
			yearlycounter = 1
		}
		add_to_variable = {
			initrun = 1
		}
		set_variable = {
			gdp_growth_curr = 0
		}		##reset init GDP growth counter
		scale_y_axis = yes		##set graph scale y-axis
		x_axis_scale_init = yes		##x-axis scale init
	}
	##graph shift after 15 years (graph full/15 year version)
	if = {
		limit = {
			check_variable = {
				yearlymodulo = 0
			}
			check_variable = {
				checkdone > 179
			}
			#check_variable = { checkdone > 179 }
		}
		graph_shift = yes		##shift graph to left, remove first year data
		calculate_gdp_growth = yes
		graph_append = yes		##insert new data from the right
		x_axis_scale_shift = yes
		x_axis_scale_append = yes
	}
	add_to_variable = {
		checkdone = 1
	}	##counts ingame months
}

tax_rate = {
	#process_credit_rating = yes
	set_interest_rates = yes
	set_international_commercial_rates = yes
	set_reserve_rate = yes
	set_variable = {
		Interest_Rate_Display = Interest_Rate
	}
	divide_variable = {
		Interest_Rate_Display = 100
	}
	set_variable = {
		Domestic_Interest_Rate_Display = Interest_Rate
	}
	divide_variable = {
		Domestic_Interest_Rate_Display = 100
	}
	multiply_variable = {
		Domestic_Interest_Rate_Display = 0.75
	}
	set_variable = {
		Domestic_Interest_Rate = Interest_Rate
	}
	multiply_variable = {
		Domestic_Interest_Rate = 0.75
	}
	multiply_variable = {
		Favorable_Interest_Rate = 0.65
	}
	set_variable = {
		austerityCheck = grossdomesticproduct
	}
	multiply_variable = {
		austerityCheck = austerity_multiplier
	}
	set_variable = {
		defaultCheck = grossdomesticproduct
	}
	multiply_variable = {
		defaultCheck = default_multiplier
	}
	set_variable = {
		austerityCheck = grossdomesticproduct
	}
	multiply_variable = {
		austerityCheck = austerity_multiplier
	}
	set_variable = {
		defaultCheck = grossdomesticproduct
	}
	multiply_variable = {
		defaultCheck = default_multiplier
	}
	
}

edict_expenditure = {
	#CHANGES COSTS BY FACTOR#
	set_variable = {
		military_edict_debit_factor = 1
	}
	set_variable = {
		healthcare_edict_debit_factor = 1
	}
	set_variable = {
		education_edict_debit_factor = 1
	}
	set_variable = {
		welfare_edict_debit_factor = 1
	}
	set_variable = {
		cpi_edict_debit_factor = 1
	}
	set_variable = {
		public_edict_debit_factor = 1
	}
	#CHANGES COSTS BY FLAT AMOUNT#
	set_variable = {
		military_edict_debit_gain = 0
	}
	set_variable = {
		healthcare_edict_debit_gain = 0
	}
	set_variable = {
		education_edict_debit_gain = 0
	}
	set_variable = {
		welfare_edict_debit_gain = 0
	}
	set_variable = {
		cpi_edict_debit_gain = 0
	}
	set_variable = {
		public_edict_debit_gain = 0
	}
	#CHANGES INCOME BY FACTOR#
	set_variable = {
		trade_credit_factor = 1
	}
	set_variable = {
		tax_credit_factor = 1
	}
	set_variable = {
		commerce_credit_factor = 1
	}
	set_variable = {
		refinery_credit_factor = 1
	}
	set_variable = {
		agriculture_credit_factor = 1
	}
	set_variable = {
		industry_credit_factor = 1
	}
	#EFFICIENCY CHECKS#
	set_variable = {
		efficiency_military_check = efficiency_military
	}
	set_variable = {
		efficiency_healthcare_check = efficiency_healthcare
	}
	set_variable = {
		efficiency_education_check = efficiency_education
	}
	set_variable = {
		efficiency_welfare_check = efficiency_welfare
	}
	set_variable = {
		efficiency_cpi_check = efficiency_cpi
	}
	set_variable = {
		efficiency_public_check = efficiency_public
	}
	###IDEAS###
	edict_ideas_calc = yes
	#ADDITIVE CREDIT FACTORS#
	set_variable = {
		trade_credit_factor_difference = trade_credit_factor
	}
	set_variable = {
		tax_credit_factor_difference = tax_credit_factor
	}
	set_variable = {
		commerce_credit_factor_difference = commerce_credit_factor
	}
	set_variable = {
		refinery_credit_factor_difference = refinery_credit_factor
	}
	set_variable = {
		agriculture_credit_factor_difference = agriculture_credit_factor
	}
	set_variable = {
		industry_credit_factor_difference = industry_credit_factor
	}
	subtract_from_variable = {
		trade_credit_factor_difference = 1
	}
	subtract_from_variable = {
		tax_credit_factor_difference = 1
	}
	subtract_from_variable = {
		commerce_credit_factor_difference = 1
	}
	subtract_from_variable = {
		refinery_credit_factor_difference = 1
	}
	subtract_from_variable = {
		agriculture_credit_factor_difference = 1
	}
	subtract_from_variable = {
		industry_credit_factor_difference = 1
	}
	#DIVIDER APPLICATION#
	multiply_variable = {
		military_edict_debit_gain = global.GlobalEdictDebit
	}
	multiply_variable = {
		healthcare_edict_debit_gain = global.GlobalEdictDebit
	}
	multiply_variable = {
		education_edict_debit_gain = global.GlobalEdictDebit
	}
	multiply_variable = {
		welfare_edict_debit_gain = global.GlobalEdictDebit
	}
	multiply_variable = {
		cpi_edict_debit_gain = global.GlobalEdictDebit
	}
	multiply_variable = {
		public_edict_debit_gain = global.GlobalEdictDebit
	}
}

domestic_bond_calc = {
	if = {
		limit = {
			check_variable = {
				available_liquidity < 1
			}
		}
		set_variable = {
			available_liquidity = 1
		}
	}	#Failsafe to prevent crash

	multiply_variable = {
		outcrowding_limit = 10
	}	#Billions per office park
	#MULTIPLY OUTCROWDING LIMIT PER OFFICE PARK BY TECH#
	set_variable = {
		office_park_tech = 1
	}
	if = {
		limit = {
			has_tech = consumer_electronics_I
		}
		add_to_variable = {
			office_park_tech = 0.15
		}
	}
	if = {
		limit = {
			has_tech = consumer_electronics_II
		}
		add_to_variable = {
			office_park_tech = 0.15
		}
	}
	if = {
		limit = {
			has_tech = consumer_electronics_III
		}
		add_to_variable = {
			office_park_tech = 0.15
		}
	}
	if = {
		limit = {
			has_tech = consumer_electronics_IV
		}
		add_to_variable = {
			office_park_tech = 0.15
		}
	}
	if = {
		limit = {
			has_tech = consumer_electronics_V
		}
		add_to_variable = {
			office_park_tech = 0.15
		}
	}
	if = {
		limit = {
			has_tech = consumer_electronics_VI
		}
		add_to_variable = {
			office_park_tech = 0.15
		}
	}
	if = {
		limit = {
			has_tech = consumer_electronics_VII
		}
		add_to_variable = {
			office_park_tech = 0.15
		}
	}
	if = {
		limit = {
			has_tech = consumer_electronics_VIII
		}
		add_to_variable = {
			office_park_tech = 0.15
		}
	}
	multiply_variable = {
		outcrowding_limit = office_park_tech
	}
	set_variable = {
		outcrowding_temp_var = outcrowding_limit
	}
	#REPLENISHMENT RATES FOR OUTCROWDING LIMITS#
	if = {
		limit = {
			check_variable = {
				outcrowding_limit < 100
			}
		}
		multiply_variable = {
			outcrowding_temp_var = 0.065
		}		#Percent to restore difference per month
	}
	if = {
		limit = {
			check_variable = {
				outcrowding_limit < 500
			}
			check_variable = {
				outcrowding_limit > 100
			}
		}
		multiply_variable = {
			outcrowding_temp_var = 0.05
		}		#Percent to restore difference per month
	}
	if = {
		limit = {
			check_variable = {
				outcrowding_limit > 500
			}
		}
		multiply_variable = {
			outcrowding_temp_var = 0.035
		}		#Percent to restore difference per month
	}
	#REPLENISHMENT SCRIPT#
	if = {
		limit = {
			check_variable = {
				available_liquidity < outcrowding_limit
			}
		}		#Liquidity less than limit
		add_to_variable = {
			available_liquidity = outcrowding_temp_var
		}		#Replenish available liquidity
	}
}

flag_building_macro = {
	##### CATEGORIES #####
	if = {
		limit = {
			check_variable = {
				industrialization_budget > 24
			}
		}
		FBU_category_0 = yes
	}
	if = {
		limit = {
			check_variable = {
				development_budget > 24
			}
		}
		FBU_category_1 = yes
	}
	if = {
		limit = {
			check_variable = {
				modernization_budget > 24
			}
		}
		FBU_category_2 = yes
	}
	if = {
		limit = {
			check_variable = {
				automation_budget > 24
			}
		}
		FBU_category_3 = yes
	}
	##### TELECOMS #####
}

ai_economic_planning = {
	#Calculates building targets for the AI Strategies in default.txt
	#Clear old values
	clr_country_flag = ai_country_is_well_off
	multiply_variable = {
		ai_office_park_target = -1
	}
	while_loop_effect = {
		limit = {
			check_variable = {
				ai_office_park_target > 0
			}
		}
		add_ai_strategy = {
			type = building_target
			id = office_park
			value = 1
		}
		subtract_from_variable = {
			ai_office_park_target = 1
		}
	}
	set_variable = {
		ai_office_park_target = 0
	}
	multiply_variable = {
		ai_fossil_fuel_powerplant_target_reduced = -1
	}
	while_loop_effect = {
		limit = {
			check_variable = {
				ai_fossil_fuel_powerplant_target_reduced > 0
			}
		}
		add_ai_strategy = {
			type = building_target
			id = fossil_fuel_powerplant
			value = 1
		}
		subtract_from_variable = {
			ai_fossil_fuel_powerplant_target_reduced = 1
		}
	}
	set_variable = {
		ai_fossil_fuel_powerplant_target_reduced = 0
	}
	multiply_variable = {
		ai_renewable_powerplant_target = -1
	}
	while_loop_effect = {
		limit = {
			check_variable = {
				ai_renewable_powerplant_target > 0
			}
		}
		add_ai_strategy = {
			type = building_target
			id = renewable_powerplant
			value = 1
		}
		subtract_from_variable = {
			ai_renewable_powerplant_target = 1
		}
	}
	set_variable = {
		ai_renewable_powerplant_target = 0
	}
	multiply_variable = {
		ai_nuclear_powerplant_target = -1
	}
	while_loop_effect = {
		limit = {
			check_variable = {
				ai_nuclear_powerplant_target > 0
			}
		}
		add_ai_strategy = {
			type = building_target
			id = nuclear_powerplant
			value = 1
		}
		subtract_from_variable = {
			ai_nuclear_powerplant_target = 1
		}
	}
	set_variable = {
		ai_nuclear_powerplant_target = 0
	}
	multiply_variable = {
		ai_agri_industrial_complex_target = -1
	}
	while_loop_effect = {
		limit = {
			check_variable = {
				ai_agri_industrial_complex_target > 0
			}
		}
		add_ai_strategy = {
			type = building_target
			id = agri_industrial_complex
			value = 1
		}
		subtract_from_variable = {
			ai_agri_industrial_complex_target = 1
		}
	}
	set_variable = {
		ai_agri_industrial_complex_target = 0
	}
	#ALL TARGETS ARE NOW RESET
	#if = { limit = { is_ai = yes } emergency_policy_replanning = yes } #AI Reduces Policies if Overbudget
	#ai_fossil_fuel_powerplant_target is total economic buildings x the ai_power_Ratio global define
	set_variable = {
		ai_fossil_fuel_powerplant_target = ROOT.industrial_complex_total
	}
	multiply_variable = {
		ai_fossil_fuel_powerplant_target = 1.2
	}
	add_to_variable = {
		ai_fossil_fuel_powerplant_target = ROOT.dockyard_total
	}
	add_to_variable = {
		ai_fossil_fuel_powerplant_target = ROOT.office_park_total
	}
	multiply_variable = {
		ai_fossil_fuel_powerplant_target = global.ai_power_ratio
	}
	#Calculations for the large economy power plant building targets
	set_variable = {
		ai_fossil_fuel_powerplant_target_reduced = ai_fossil_fuel_powerplant_target
	}
	set_variable = {
		alpha = 1
	}
	subtract_from_variable = {
		alpha = global.ai_renewable_ratio
	}
	subtract_from_variable = {
		alpha = global.ai_nuclear_ratio
	}
	multiply_variable = {
		ai_fossil_fuel_powerplant_target_reduced = alpha
	}
	set_variable = {
		ai_renewable_powerplant_target = ai_fossil_fuel_powerplant_target
	}
	set_variable = {
		ai_nuclear_powerplant_target = ai_fossil_fuel_powerplant_target
	}
	multiply_variable = {
		ai_renewable_powerplant_target = global.ai_renewable_ratio
	}
	multiply_variable = {
		ai_nuclear_powerplant_target = global.ai_nuclear_ratio
	}
	#office target = factories x global define ratio
	set_variable = {
		ai_office_park_target = ROOT.industrial_complex_total
	}
	multiply_variable = {
		ai_office_park_target = global.ai_office_ratio
	}
	#AI will spend the ai_agri_investment on factories on agri-industry until they reach a positive food balance
	set_variable = {
		ai_agri_industrial_complex_target = ROOT.farm_total
	}
	set_variable = {
		beta = ROOT.num_of_civilian_factories_available_for_projects
	}
	add_to_variable = {
		beta = 1
	}
	divide_variable = {
		beta = 7
	}	#one half max factories per construction project rounded down
	multiply_variable = {
		beta = global.ai_agri_investment
	}
	multiply_variable = {
		ai_agri_industrial_complex_target = beta
	}
	round_variable = ai_fossil_fuel_powerplant_target
	round_variable = ai_fossil_fuel_powerplant_target_reduced
	round_variable = ai_renewable_powerplant_target
	round_variable = ai_nuclear_powerplant_target
	round_variable = ai_office_park_target
	round_variable = ai_agri_industrial_complex_target
	#ONLY BUILD NUCLEAR/RENEWABLES IF PAST THE AI POINT#
	if = {
		limit = {
			num_of_civilian_factories_available_for_projects > global.ai_renewable_point
		}
		set_variable = {
			ai_fossil_fuel_powerplant_target = ai_fossil_fuel_powerplant_target_reduced
		}
	}
	else_if = {
		limit = {
			check_variable = {
				var = num_of_civilian_factories_available_for_projects
				value = global.ai_renewable_point
				compare = less_than_or_equals
			}
		}
		set_variable = {
			ai_nuclear_powerplant_target = 0
		}
		set_variable = {
			ai_renewable_powerplant_target = 0
		}
	}
	#DO NOT BUILD MORE FARMS THAN YOU NEED x 1.1#
	set_variable = {
		food_compo = food_consumption
	}
	multiply_variable = {
		food_compo = 1.1
	}
	if = {
		limit = {
			check_variable = {
				foodCheck > food_compo
			}
		}
		set_variable = {
			ai_agri_industrial_complex_target = ROOT.farm_total
		}
	}
	#APPLY NEW VALUES TO AI STRATEGIES
	while_loop_effect = {
		limit = {
			check_variable = {
				ai_office_park_target > 0
			}
		}
		add_ai_strategy = {
			type = building_target
			id = office_park
			value = 1
		}
		subtract_from_variable = {
			ai_office_park_target = 1
		}
	}
	set_variable = {
		ai_office_park_target = 0
	}
	while_loop_effect = {
		limit = {
			check_variable = {
				ai_fossil_fuel_powerplant_target_reduced > 0
			}
		}
		add_ai_strategy = {
			type = building_target
			id = fossil_fuel_powerplant
			value = 1
		}
		subtract_from_variable = {
			ai_fossil_fuel_powerplant_target_reduced = 1
		}
	}
	set_variable = {
		ai_fossil_fuel_powerplant_target_reduced = 0
	}
	while_loop_effect = {
		limit = {
			check_variable = {
				ai_renewable_powerplant_target > 0
			}
		}
		add_ai_strategy = {
			type = building_target
			id = renewable_powerplant
			value = 1
		}
		subtract_from_variable = {
			ai_renewable_powerplant_target = 1
		}
	}
	set_variable = {
		ai_renewable_powerplant_target = 0
	}
	while_loop_effect = {
		limit = {
			check_variable = {
				ai_nuclear_powerplant_target > 0
			}
		}
		add_ai_strategy = {
			type = building_target
			id = nuclear_powerplant
			value = 1
		}
		subtract_from_variable = {
			ai_nuclear_powerplant_target = 1
		}
	}
	set_variable = {
		ai_nuclear_powerplant_target = 0
	}
	while_loop_effect = {
		limit = {
			check_variable = {
				ai_agri_industrial_complex_target > 0
			}
		}
		add_ai_strategy = {
			type = building_target
			id = agri_industrial_complex
			value = 1
		}
		subtract_from_variable = {
			ai_agri_industrial_complex_target = 1
		}
	}
	set_variable = {
		ai_agri_industrial_complex_target = 0
	}
	#CONTROLLED WATER INFRASTRUCTURE GROWTH
	#At the ai_water_point variable's number of factories that can construct in the country, the AI will start to build water infrastructure
	set_variable = {
		gamma = 1.5
	}	#Will build 2 per month at gamma x the ai_water_point
	multiply_variable = {
		gamma = global.ai_water_point
	}
	set_variable = {
		delta = 2.5
	}	#Will build 3 per month at delta x the ai_water_point
	multiply_variable = {
		delta = global.ai_water_point
	}
	if = {
		limit = {
			check_variable = {
				num_of_civilian_factories_available_for_projects > global.ai_water_point
			}
			is_ai = yes
		}
		random_owned_controlled_state = {
			limit = {
				agri_industrial_complex > 0
				free_building_slots = {
					building = water_infrastructure
					size > 0
					include_locked = no
				}
			}
			add_building_construction = {
				type = water_infrastructure
				level = 1
				instant_build = no				#ADDS TO QUEUE
			}
		}
	}
	if = {
		limit = {
			check_variable = {
				num_of_civilian_factories_available_for_projects > gamma
			}
			is_ai = yes
		}
		random_owned_controlled_state = {
			limit = {
				agri_industrial_complex > 0
				free_building_slots = {
					building = water_infrastructure
					size > 0
					include_locked = no
				}
			}
			add_building_construction = {
				type = water_infrastructure
				level = 1
				instant_build = no				#ADDS TO QUEUE
			}
		}
	}
	if = {
		limit = {
			check_variable = {
				num_of_civilian_factories_available_for_projects > delta
			}
			is_ai = yes
		}
		random_owned_controlled_state = {
			limit = {
				agri_industrial_complex > 0
				free_building_slots = {
					building = water_infrastructure
					size > 0
					include_locked = no
				}
			}
			add_building_construction = {
				type = water_infrastructure
				level = 1
				instant_build = no				#ADDS TO QUEUE
			}
		}
	}
	#Creates flags for ai strategies
	set_temp_variable = {
		office_parks_x50p = ROOT.office_park_total
	}
	multiply_temp_variable = {
		office_parks_x50p = 1.5
	}	#1.5x office parks.
	if = {
		limit = {
			check_variable = {
				office_parks_x50p > num_owned_controlled_states
			}
		}		#AI has 2/3 the office parks as it does owned and controlled states
		set_country_flag = ai_country_is_well_off		#AI believes it is well off and has a strong income foundation to spend on ambitious projects
	}
	##### MAKE AN EXTRA SCRIPT FOR THE AI TO DETERMINE IF ITS DEBT IS BAD #####
}

full_upgrade_estimate = {
	if = {
		limit = {
			NOT = {
				check_variable = {
					upgrade_progress > 0
				}
			}
		}
		if = {
			limit = {
				has_state_category = pop1
			}
			add_to_variable = {
				ROOT.upgrade_estimate_preindustrial = global.UPC_pop1
			}
			add_to_variable = {
				ROOT.num_of_preindustrial_states = 1
			}
			add_to_array = {
				ROOT.upgrade_estimate_preindustrial_states_array = This.id
			}
			add_to_array = {
				ROOT.upgrade_estimate_preindustrial_states_cost_array = global.UPC_pop1
			}
			##log = "Preindustrial State [This.GetName] / pop1 cost [?global.UPC_pop1] / num: [?ROOT.num_of_preindustrial_states]"
		}
		else_if = {
			limit = {
				has_state_category = pop2
			}
			add_to_variable = {
				ROOT.upgrade_estimate_preindustrial = global.UPC_pop2
			}
			add_to_variable = {
				ROOT.num_of_preindustrial_states = 1
			}
			add_to_array = {
				ROOT.upgrade_estimate_preindustrial_states_array = This.id
			}
			add_to_array = {
				ROOT.upgrade_estimate_preindustrial_states_cost_array = global.UPC_pop2
			}
			##log = "Preindustrial State [This.GetName] / pop2 cost [?global.UPC_pop2] / num: [?ROOT.num_of_preindustrial_states]"
		}
		else_if = {
			limit = {
				has_state_category = pop3
			}
			add_to_variable = {
				ROOT.upgrade_estimate_preindustrial = global.UPC_pop3
			}
			add_to_variable = {
				ROOT.num_of_preindustrial_states = 1
			}
			add_to_array = {
				ROOT.upgrade_estimate_preindustrial_states_array = This.id
			}
			add_to_array = {
				ROOT.upgrade_estimate_preindustrial_states_cost_array = global.UPC_pop3
			}
			##log = "Preindustrial State [This.GetName] / pop3 cost [?global.UPC_pop3] / num: [?ROOT.num_of_preindustrial_states]"
		}
		else_if = {
			limit = {
				has_state_category = pop4
			}
			add_to_variable = {
				ROOT.upgrade_estimate_preindustrial = global.UPC_pop4
			}
			add_to_variable = {
				ROOT.num_of_preindustrial_states = 1
			}
			add_to_array = {
				ROOT.upgrade_estimate_preindustrial_states_array = This.id
			}
			add_to_array = {
				ROOT.upgrade_estimate_preindustrial_states_cost_array = global.UPC_pop4
			}
			##log = "Preindustrial State [This.GetName] / pop4 cost [?global.UPC_pop4] / num: [?ROOT.num_of_preindustrial_states]"
		}
		else_if = {
			limit = {
				has_state_category = pop5
			}
			add_to_variable = {
				ROOT.upgrade_estimate_preindustrial = global.UPC_pop5
			}
			add_to_variable = {
				ROOT.num_of_preindustrial_states = 1
			}
			add_to_array = {
				ROOT.upgrade_estimate_preindustrial_states_array = This.id
			}
			add_to_array = {
				ROOT.upgrade_estimate_preindustrial_states_cost_array = global.UPC_pop5
			}
			##log = "Preindustrial State [This.GetName] / pop5 cost [?global.UPC_pop5] / num: [?ROOT.num_of_preindustrial_states]"
		}
		else_if = {
			limit = {
				has_state_category = pop7
			}
			add_to_variable = {
				ROOT.upgrade_estimate_preindustrial = global.UPC_pop7
			}
			add_to_variable = {
				ROOT.num_of_preindustrial_states = 1
			}
			add_to_array = {
				ROOT.upgrade_estimate_preindustrial_states_array = This.id
			}
			add_to_array = {
				ROOT.upgrade_estimate_preindustrial_states_cost_array = global.UPC_pop7
			}
			##log = "Preindustrial State [This.GetName] / pop7 cost [?global.UPC_pop7] / num: [?ROOT.num_of_preindustrial_states]"
		}
		else_if = {
			limit = {
				has_state_category = pop10
			}
			add_to_variable = {
				ROOT.upgrade_estimate_preindustrial = global.UPC_pop10
			}
			add_to_variable = {
				ROOT.num_of_preindustrial_states = 1
			}
			add_to_array = {
				ROOT.upgrade_estimate_preindustrial_states_array = This.id
			}
			add_to_array = {
				ROOT.upgrade_estimate_preindustrial_states_cost_array = global.UPC_pop10
			}
			##log = "Preindustrial State [This.GetName] / pop10 cost [?global.UPC_pop10] / num: [?ROOT.num_of_preindustrial_states]"
		}
		else_if = {
			limit = {
				has_state_category = pop15
			}
			add_to_variable = {
				ROOT.upgrade_estimate_preindustrial = global.UPC_pop15
			}
			add_to_variable = {
				ROOT.num_of_preindustrial_states = 1
			}
			add_to_array = {
				ROOT.upgrade_estimate_preindustrial_states_array = This.id
			}
			add_to_array = {
				ROOT.upgrade_estimate_preindustrial_states_cost_array = global.UPC_pop15
			}
			##log = "Preindustrial State [This.GetName] / pop15 cost [?global.UPC_pop15] / num: [?ROOT.num_of_preindustrial_states]"
		}
		else_if = {
			limit = {
				has_state_category = pop20
			}
			add_to_variable = {
				ROOT.upgrade_estimate_preindustrial = global.UPC_pop20
			}
			add_to_variable = {
				ROOT.num_of_preindustrial_states = 1
			}
			add_to_array = {
				ROOT.upgrade_estimate_preindustrial_states_array = This.id
			}
			add_to_array = {
				ROOT.upgrade_estimate_preindustrial_states_cost_array = global.UPC_pop20
			}
			##log = "Preindustrial State [This.GetName] / pop20 cost [?global.UPC_pop20] / num: [?ROOT.num_of_preindustrial_states]"
		}
		else_if = {
			limit = {
				has_state_category = pop1dev1
			}
			add_to_variable = {
				ROOT.upgrade_estimate_industrial = global.UPC_pop1dev1
			}
			add_to_variable = {
				ROOT.num_of_industrial_states = 1
			}
			add_to_array = {
				ROOT.upgrade_estimate_industrial_states_array = This.id
			}
			add_to_array = {
				ROOT.upgrade_estimate_industrial_states_cost_array = global.UPC_pop1dev1
			}
			##log = "Industrial State [This.GetName] / pop1dev1 cost [?global.UPC_pop1dev1] / num: [?ROOT.num_of_industrial_states]"
		}
		else_if = {
			limit = {
				has_state_category = pop2dev1
			}
			add_to_variable = {
				ROOT.upgrade_estimate_industrial = global.UPC_pop2dev1
			}
			add_to_variable = {
				ROOT.num_of_industrial_states = 1
			}
			add_to_array = {
				ROOT.upgrade_estimate_industrial_states_array = This.id
			}
			add_to_array = {
				ROOT.upgrade_estimate_industrial_states_cost_array = global.UPC_pop2dev1
			}
			##log = "Industrial State [This.GetName] / pop2dev1 cost [?global.UPC_pop2dev1] / num: [?ROOT.num_of_industrial_states]"
		}
		else_if = {
			limit = {
				has_state_category = pop3dev1
			}
			add_to_variable = {
				ROOT.upgrade_estimate_industrial = global.UPC_pop3dev1
			}
			add_to_variable = {
				ROOT.num_of_industrial_states = 1
			}
			add_to_array = {
				ROOT.upgrade_estimate_industrial_states_array = This.id
			}
			add_to_array = {
				ROOT.upgrade_estimate_industrial_states_cost_array = global.UPC_pop3dev1
			}
			##log = "Industrial State [This.GetName] / pop3dev1 cost [?global.UPC_pop3dev1] / num: [?ROOT.num_of_industrial_states]"
		}
		else_if = {
			limit = {
				has_state_category = pop4dev1
			}
			add_to_variable = {
				ROOT.upgrade_estimate_industrial = global.UPC_pop4dev1
			}
			add_to_variable = {
				ROOT.num_of_industrial_states = 1
			}
			add_to_array = {
				ROOT.upgrade_estimate_industrial_states_array = This.id
			}
			add_to_array = {
				ROOT.upgrade_estimate_industrial_states_cost_array = global.UPC_pop4dev1
			}
			##log = "Industrial State [This.GetName] / pop4dev1 cost [?global.UPC_pop4dev1] / num: [?ROOT.num_of_industrial_states]"
		}
		else_if = {
			limit = {
				has_state_category = pop5dev1
			}
			add_to_variable = {
				ROOT.upgrade_estimate_industrial = global.UPC_pop5dev1
			}
			add_to_variable = {
				ROOT.num_of_industrial_states = 1
			}
			add_to_array = {
				ROOT.upgrade_estimate_industrial_states_array = This.id
			}
			add_to_array = {
				ROOT.upgrade_estimate_industrial_states_cost_array = global.UPC_pop5dev1
			}
			##log = "Industrial State [This.GetName] / pop5dev1 cost [?global.UPC_pop5dev1] / num: [?ROOT.num_of_industrial_states]"
		}
		else_if = {
			limit = {
				has_state_category = pop7dev1
			}
			add_to_variable = {
				ROOT.upgrade_estimate_industrial = global.UPC_pop7dev1
			}
			add_to_variable = {
				ROOT.num_of_industrial_states = 1
			}
			add_to_array = {
				ROOT.upgrade_estimate_industrial_states_array = This.id
			}
			add_to_array = {
				ROOT.upgrade_estimate_industrial_states_cost_array = global.UPC_pop7dev1
			}
			##log = "Industrial State [This.GetName] / pop7dev1 cost [?global.UPC_pop7dev1] / num: [?ROOT.num_of_industrial_states]"
		}
		else_if = {
			limit = {
				has_state_category = pop10dev1
			}
			add_to_variable = {
				ROOT.upgrade_estimate_industrial = global.UPC_pop10dev1
			}
			add_to_variable = {
				ROOT.num_of_industrial_states = 1
			}
			add_to_array = {
				ROOT.upgrade_estimate_industrial_states_array = This.id
			}
			add_to_array = {
				ROOT.upgrade_estimate_industrial_states_cost_array = global.UPC_pop10dev1
			}
			##log = "Industrial State [This.GetName] / pop10dev1 cost [?global.UPC_pop10dev1] / num: [?ROOT.num_of_industrial_states]"
		}
		else_if = {
			limit = {
				has_state_category = pop15dev1
			}
			add_to_variable = {
				ROOT.upgrade_estimate_industrial = global.UPC_pop15dev1
			}
			add_to_variable = {
				ROOT.num_of_industrial_states = 1
			}
			add_to_array = {
				ROOT.upgrade_estimate_industrial_states_array = This.id
			}
			add_to_array = {
				ROOT.upgrade_estimate_industrial_states_cost_array = global.UPC_pop15dev1
			}
			##log = "Industrial State [This.GetName] / pop15dev1 cost [?global.UPC_pop15dev1] / num: [?ROOT.num_of_industrial_states]"
		}
		else_if = {
			limit = {
				has_state_category = pop20dev1
			}
			add_to_variable = {
				ROOT.upgrade_estimate_industrial = global.UPC_pop20dev1
			}
			add_to_variable = {
				ROOT.num_of_industrial_states = 1
			}
			add_to_array = {
				ROOT.upgrade_estimate_industrial_states_array = This.id
			}
			add_to_array = {
				ROOT.upgrade_estimate_industrial_states_cost_array = global.UPC_pop20dev1
			}
			##log = "Industrial State [This.GetName] / pop20dev1 cost [?global.UPC_pop20dev1] / num: [?ROOT.num_of_industrial_states]"
		}
		else_if = {
			limit = {
				has_state_category = pop1dev2
			}
			add_to_variable = {
				ROOT.upgrade_estimate_developed = global.UPC_pop1dev2
			}
			add_to_variable = {
				ROOT.num_of_developed_states = 1
			}
			add_to_array = {
				ROOT.upgrade_estimate_developed_states_array = This.id
			}
			add_to_array = {
				ROOT.upgrade_estimate_developed_states_cost_array = global.UPC_pop1dev2
			}
			##log = "Developed State [This.GetName] / pop1dev2 cost [?global.UPC_pop1dev2 / num: [?ROOT.num_of_developed_states]"
		}
		else_if = {
			limit = {
				has_state_category = pop2dev2
			}
			add_to_variable = {
				ROOT.upgrade_estimate_developed = global.UPC_pop2dev2
			}
			add_to_variable = {
				ROOT.num_of_developed_states = 1
			}
			add_to_array = {
				ROOT.upgrade_estimate_developed_states_array = This.id
			}
			add_to_array = {
				ROOT.upgrade_estimate_developed_states_cost_array = global.UPC_pop2dev2
			}
			##log = "Developed State [This.GetName] / pop2dev2 cost [?global.UPC_pop2dev2 / num: [?ROOT.num_of_developed_states]"
		}
		else_if = {
			limit = {
				has_state_category = pop3dev2
			}
			add_to_variable = {
				ROOT.upgrade_estimate_developed = global.UPC_pop3dev2
			}
			add_to_variable = {
				ROOT.num_of_developed_states = 1
			}
			add_to_array = {
				ROOT.upgrade_estimate_developed_states_array = This.id
			}
			add_to_array = {
				ROOT.upgrade_estimate_developed_states_cost_array = global.UPC_pop3dev2
			}
			##log = "Developed State [This.GetName] / pop3dev2 cost [?global.UPC_pop3dev2 / num: [?ROOT.num_of_developed_states]"
		}
		else_if = {
			limit = {
				has_state_category = pop4dev2
			}
			add_to_variable = {
				ROOT.upgrade_estimate_developed = global.UPC_pop4dev2
			}
			add_to_variable = {
				ROOT.num_of_developed_states = 1
			}
			add_to_array = {
				ROOT.upgrade_estimate_developed_states_array = This.id
			}
			add_to_array = {
				ROOT.upgrade_estimate_developed_states_cost_array = global.UPC_pop4dev2
			}
			##log = "Developed State [This.GetName] / pop4dev2 cost [?global.UPC_pop4dev2 / num: [?ROOT.num_of_developed_states]"
		}
		else_if = {
			limit = {
				has_state_category = pop5dev2
			}
			add_to_variable = {
				ROOT.upgrade_estimate_developed = global.UPC_pop5dev2
			}
			add_to_variable = {
				ROOT.num_of_developed_states = 1
			}
			add_to_array = {
				ROOT.upgrade_estimate_developed_states_array = This.id
			}
			add_to_array = {
				ROOT.upgrade_estimate_developed_states_cost_array = global.UPC_pop5dev2
			}
			##log = "Developed State [This.GetName] / pop5dev2 cost [?global.UPC_pop5dev2 / num: [?ROOT.num_of_developed_states]"
		}
		else_if = {
			limit = {
				has_state_category = pop7dev2
			}
			add_to_variable = {
				ROOT.upgrade_estimate_developed = global.UPC_pop7dev2
			}
			add_to_variable = {
				ROOT.num_of_developed_states = 1
			}
			add_to_array = {
				ROOT.upgrade_estimate_developed_states_array = This.id
			}
			add_to_array = {
				ROOT.upgrade_estimate_developed_states_cost_array = global.UPC_pop7dev2
			}
			##log = "Developed State [This.GetName] / pop7dev2 cost [?global.UPC_pop7dev2 / num: [?ROOT.num_of_developed_states]"
		}
		else_if = {
			limit = {
				has_state_category = pop10dev2
			}
			add_to_variable = {
				ROOT.upgrade_estimate_developed = global.UPC_pop10dev2
			}
			add_to_variable = {
				ROOT.num_of_developed_states = 1
			}
			add_to_array = {
				ROOT.upgrade_estimate_developed_states_array = This.id
			}
			add_to_array = {
				ROOT.upgrade_estimate_developed_states_cost_array = global.UPC_pop10dev2
			}
			##log = "Developed State [This.GetName] / pop10dev2 cost [?global.UPC_pop10dev2 / num: [?ROOT.num_of_developed_states]"
		}
		else_if = {
			limit = {
				has_state_category = pop15dev2
			}
			add_to_variable = {
				ROOT.upgrade_estimate_developed = global.UPC_pop15dev2
			}
			add_to_variable = {
				ROOT.num_of_developed_states = 1
			}
			add_to_array = {
				ROOT.upgrade_estimate_developed_states_array = This.id
			}
			add_to_array = {
				ROOT.upgrade_estimate_developed_states_cost_array = global.UPC_pop15dev2
			}
			##log = "Developed State [This.GetName] / pop15dev2 cost [?global.UPC_pop15dev2 / num: [?ROOT.num_of_developed_states]"
		}
		else_if = {
			limit = {
				has_state_category = pop20dev2
			}
			add_to_variable = {
				ROOT.upgrade_estimate_developed = global.UPC_pop20dev2
			}
			add_to_variable = {
				ROOT.num_of_developed_states = 1
			}
			add_to_array = {
				ROOT.upgrade_estimate_developed_states_array = This.id
			}
			add_to_array = {
				ROOT.upgrade_estimate_developed_states_cost_array = global.UPC_pop20dev2
			}
			##log = "Developed State [This.GetName] / pop20dev2 cost [?global.UPC_pop20dev2 / num: [?ROOT.num_of_developed_states]"
		}
		else_if = {
			limit = {
				has_state_category = pop1dev3
			}
			add_to_variable = {
				ROOT.upgrade_estimate_modern = global.UPC_pop1dev3
			}
			add_to_variable = {
				ROOT.num_of_modern_states = 1
			}
			add_to_array = {
				ROOT.upgrade_estimate_modern_states_array = This.id
			}
			add_to_array = {
				ROOT.upgrade_estimate_modern_states_cost_array = global.UPC_pop1dev3
			}
			##log = "Modern State [This.GetName] / pop1dev3 cost [?global.UPC_pop1dev3 / num: [?ROOT.num_of_modern_states]"
		}
		else_if = {
			limit = {
				has_state_category = pop2dev3
			}
			add_to_variable = {
				ROOT.upgrade_estimate_modern = global.UPC_pop2dev3
			}
			add_to_variable = {
				ROOT.num_of_modern_states = 1
			}
			add_to_array = {
				ROOT.upgrade_estimate_modern_states_array = This.id
			}
			add_to_array = {
				ROOT.upgrade_estimate_modern_states_cost_array = global.UPC_pop2dev3
			}
			##log = "Modern State [This.GetName] / pop2dev3 cost [?global.UPC_pop2dev3 / num: [?ROOT.num_of_modern_states]"
		}
		else_if = {
			limit = {
				has_state_category = pop3dev3
			}
			add_to_variable = {
				ROOT.upgrade_estimate_modern = global.UPC_pop3dev3
			}
			add_to_variable = {
				ROOT.num_of_modern_states = 1
			}
			add_to_array = {
				ROOT.upgrade_estimate_modern_states_array = This.id
			}
			add_to_array = {
				ROOT.upgrade_estimate_modern_states_cost_array = global.UPC_pop3dev3
			}
			##log = "Modern State [This.GetName] / pop3dev3 cost [?global.UPC_pop3dev3 / num: [?ROOT.num_of_modern_states]"
		}
		else_if = {
			limit = {
				has_state_category = pop4dev3
			}
			add_to_variable = {
				ROOT.upgrade_estimate_modern = global.UPC_pop4dev3
			}
			add_to_variable = {
				ROOT.num_of_modern_states = 1
			}
			add_to_array = {
				ROOT.upgrade_estimate_modern_states_array = This.id
			}
			add_to_array = {
				ROOT.upgrade_estimate_modern_states_cost_array = global.UPC_pop4dev3
			}
			##log = "Modern State [This.GetName] / pop4dev3 cost [?global.UPC_pop4dev3 / num: [?ROOT.num_of_modern_states]"
		}
		else_if = {
			limit = {
				has_state_category = pop5dev3
			}
			add_to_variable = {
				ROOT.upgrade_estimate_modern = global.UPC_pop5dev3
			}
			add_to_variable = {
				ROOT.num_of_modern_states = 1
			}
			add_to_array = {
				ROOT.upgrade_estimate_modern_states_array = This.id
			}
			add_to_array = {
				ROOT.upgrade_estimate_modern_states_cost_array = global.UPC_pop5dev3
			}
			##log = "Modern State [This.GetName] / pop5dev3 cost [?global.UPC_pop5dev3 / num: [?ROOT.num_of_modern_states]"
		}
		else_if = {
			limit = {
				has_state_category = pop7dev3
			}
			add_to_variable = {
				ROOT.upgrade_estimate_modern = global.UPC_pop7dev3
			}
			add_to_variable = {
				ROOT.num_of_modern_states = 1
			}
			add_to_array = {
				ROOT.upgrade_estimate_modern_states_array = This.id
			}
			add_to_array = {
				ROOT.upgrade_estimate_modern_states_cost_array = global.UPC_pop7dev3
			}
			##log = "Modern State [This.GetName] / pop7dev3 cost [?global.UPC_pop7dev3 / num: [?ROOT.num_of_modern_states]"
		}
		else_if = {
			limit = {
				has_state_category = pop10dev3
			}
			add_to_variable = {
				ROOT.upgrade_estimate_modern = global.UPC_pop10dev3
			}
			add_to_variable = {
				ROOT.num_of_modern_states = 1
			}
			add_to_array = {
				ROOT.upgrade_estimate_modern_states_array = This.id
			}
			add_to_array = {
				ROOT.upgrade_estimate_modern_states_cost_array = global.UPC_pop10dev3
			}
			##log = "Modern State [This.GetName] / pop10dev3 cost [?global.UPC_pop10dev3 / num: [?ROOT.num_of_modern_states]"
		}
		else_if = {
			limit = {
				has_state_category = pop15dev3
			}
			add_to_variable = {
				ROOT.upgrade_estimate_modern = global.UPC_pop15dev3
			}
			add_to_variable = {
				ROOT.num_of_modern_states = 1
			}
			add_to_array = {
				ROOT.upgrade_estimate_modern_states_array = This.id
			}
			add_to_array = {
				ROOT.upgrade_estimate_modern_states_cost_array = global.UPC_pop15dev3
			}
			##log = "Modern State [This.GetName] / pop15dev3 cost [?global.UPC_pop15dev3 / num: [?ROOT.num_of_modern_states]"
		}
		else_if = {
			limit = {
				has_state_category = pop20dev3
			}
			add_to_variable = {
				ROOT.upgrade_estimate_modern = global.UPC_pop20dev3
			}
			add_to_variable = {
				ROOT.num_of_modern_states = 1
			}
			add_to_array = {
				ROOT.upgrade_estimate_modern_states_array = This.id
			}
			add_to_array = {
				ROOT.upgrade_estimate_modern_states_cost_array = global.UPC_pop20dev3
			}
			##log = "Modern State [This.GetName] / pop20dev3 cost [?global.UPC_pop20dev3 / num: [?ROOT.num_of_modern_states]"
		}
		else_if = {
			limit = {
				has_state_category = pop1dev4
			}
			add_to_variable = {
				ROOT.upgrade_estimate_automated = global.UPC_pop1dev4
			}
			add_to_variable = {
				ROOT.num_of_automated_states = 1
			}
			add_to_array = {
				ROOT.upgrade_estimate_automated_states_array = This.id
			}
			add_to_array = {
				ROOT.upgrade_estimate_automated_states_cost_array = global.UPC_pop1dev4
			}
			##log = "Automated State [This.GetName] / pop1dev4 cost [?global.UPC_pop1dev4 / num: [?ROOT.num_of_automated_states]"
		}
		else_if = {
			limit = {
				has_state_category = pop2dev4
			}
			add_to_variable = {
				ROOT.upgrade_estimate_automated = global.UPC_pop2dev4
			}
			add_to_variable = {
				ROOT.num_of_automated_states = 1
			}
			add_to_array = {
				ROOT.upgrade_estimate_automated_states_array = This.id
			}
			add_to_array = {
				ROOT.upgrade_estimate_automated_states_cost_array = global.UPC_pop2dev4
			}
			##log = "Automated State [This.GetName] / pop2dev4 cost [?global.UPC_pop2dev4 / num: [?ROOT.num_of_automated_states]"
		}
		else_if = {
			limit = {
				has_state_category = pop3dev4
			}
			add_to_variable = {
				ROOT.upgrade_estimate_automated = global.UPC_pop3dev4
			}
			add_to_variable = {
				ROOT.num_of_automated_states = 1
			}
			add_to_array = {
				ROOT.upgrade_estimate_automated_states_array = This.id
			}
			add_to_array = {
				ROOT.upgrade_estimate_automated_states_cost_array = global.UPC_pop3dev4
			}
			##log = "Automated State [This.GetName] / pop3dev4 cost [?global.UPC_pop3dev4 / num: [?ROOT.num_of_automated_states]"
		}
		else_if = {
			limit = {
				has_state_category = pop4dev4
			}
			add_to_variable = {
				ROOT.upgrade_estimate_automated = global.UPC_pop4dev4
			}
			add_to_variable = {
				ROOT.num_of_automated_states = 1
			}
			add_to_array = {
				ROOT.upgrade_estimate_automated_states_array = This.id
			}
			add_to_array = {
				ROOT.upgrade_estimate_automated_states_cost_array = global.UPC_pop4dev4
			}
			##log = "Automated State [This.GetName] / pop4dev4 cost [?global.UPC_pop4dev4 / num: [?ROOT.num_of_automated_states]"
		}
		else_if = {
			limit = {
				has_state_category = pop5dev4
			}
			add_to_variable = {
				ROOT.upgrade_estimate_automated = global.UPC_pop5dev4
			}
			add_to_variable = {
				ROOT.num_of_automated_states = 1
			}
			add_to_array = {
				ROOT.upgrade_estimate_automated_states_array = This.id
			}
			add_to_array = {
				ROOT.upgrade_estimate_automated_states_cost_array = global.UPC_pop5dev4
			}
			##log = "Automated State [This.GetName] / pop5dev4 cost [?global.UPC_pop5dev4 / num: [?ROOT.num_of_automated_states]"
		}
		else_if = {
			limit = {
				has_state_category = pop7dev4
			}
			add_to_variable = {
				ROOT.upgrade_estimate_automated = global.UPC_pop7dev4
			}
			add_to_variable = {
				ROOT.num_of_automated_states = 1
			}
			add_to_array = {
				ROOT.upgrade_estimate_automated_states_array = This.id
			}
			add_to_array = {
				ROOT.upgrade_estimate_automated_states_cost_array = global.UPC_pop7dev4
			}
			##log = "Automated State [This.GetName] / pop7dev4 cost [?global.UPC_pop7dev4 / num: [?ROOT.num_of_automated_states]"
		}
		else_if = {
			limit = {
				has_state_category = pop10dev4
			}
			add_to_variable = {
				ROOT.upgrade_estimate_automated = global.UPC_pop10dev4
			}
			add_to_variable = {
				ROOT.num_of_automated_states = 1
			}
			add_to_array = {
				ROOT.upgrade_estimate_automated_states_array = This.id
			}
			add_to_array = {
				ROOT.upgrade_estimate_automated_states_cost_array = global.UPC_pop10dev4
			}
			##log = "Automated State [This.GetName] / pop10dev4 cost [?global.UPC_pop10dev4 / num: [?ROOT.num_of_automated_states]"
		}
		else_if = {
			limit = {
				has_state_category = pop15dev4
			}
			add_to_variable = {
				ROOT.upgrade_estimate_automated = global.UPC_pop15dev4
			}
			add_to_variable = {
				ROOT.num_of_automated_states = 1
			}
			add_to_array = {
				ROOT.upgrade_estimate_automated_states_array = This.id
			}
			add_to_array = {
				ROOT.upgrade_estimate_automated_states_cost_array = global.UPC_pop15dev4
			}
			##log = "Automated State [This.GetName] / pop15dev4 cost [?global.UPC_pop15dev4 / num: [?ROOT.num_of_automated_states]"
		}
		else_if = {
			limit = {
				has_state_category = pop20dev4
			}
			add_to_variable = {
				ROOT.upgrade_estimate_automated = global.UPC_pop20dev4
			}
			add_to_variable = {
				ROOT.num_of_automated_states = 1
			}
			add_to_array = {
				ROOT.upgrade_estimate_automated_states_array = This.id
			}
			add_to_array = {
				ROOT.upgrade_estimate_automated_states_cost_array = global.UPC_pop20dev4
			}
			##log = "Automated State [This.GetName] / pop20dev4 cost [?global.UPC_pop20dev4 / num: [?ROOT.num_of_automated_states]"
		}
	}
}

full_upgrade_estimate_regen = {
	#country scope
	set_variable = {
		upgrade_estimate_preindustrial = 0
	}
	set_variable = {
		num_of_preindustrial_states = 0
	}
	clear_array = upgrade_estimate_preindustrial_states_array
	clear_array = upgrade_estimate_preindustrial_states_cost_array
	set_variable = {
		upgrade_estimate_industrial = 0
	}
	set_variable = {
		num_of_industrial_states = 0
	}
	clear_array = upgrade_estimate_industrial_states_array
	clear_array = upgrade_estimate_industrial_states_cost_array
	set_variable = {
		upgrade_estimate_developed = 0
	}
	set_variable = {
		num_of_developed_states = 0
	}
	clear_array = upgrade_estimate_developed_states_array
	clear_array = upgrade_estimate_developed_states_cost_array
	set_variable = {
		upgrade_estimate_modern = 0
	}
	set_variable = {
		num_of_modern_states = 0
	}
	clear_array = upgrade_estimate_modern_states_array
	clear_array = upgrade_estimate_modern_states_cost_array
	set_variable = {
		upgrade_estimate_automated = 0
	}
	set_variable = {
		num_of_automated_states = 0
	}
	clear_array = upgrade_estimate_automated_states_array
	clear_array = upgrade_estimate_automated_states_cost_array
	##log = "starting upgrade state loop"
	every_owned_state = {
		full_upgrade_estimate = yes
	}
	##log = "end upgrade state loop - number of states: [?upgrade_estimate_preindustrial_states_array^num]"
}

social_indices = {
	#racial-related issues ebbed by equal rights and affirmative action#
	if = {
		#Equal rights makes people work it out
		limit = {
			has_idea = policy_minorities_temp_3
			check_variable = {
				segregationValue < 0
			}
		}
		add_to_variable = {
			var = segregationValue
			value = 0.0002
		}
	}
	else_if = {
		#Affirmative action tackles it
		limit = {
			has_idea = policy_minorities_temp_3a
			check_variable = {
				segregationValue < 0
			}
		}
		add_to_variable = {
			var = segregationValue
			value = 0.0005
		}
	}
	else_if = {
		#Systemic opposition makes it worse
		limit = {
			has_idea = policy_minorities_temp_1
			check_variable = {
				segregationValue > -0.05
			}
		}
		add_to_variable = {
			var = segregationValue
			value = -0.0005
		}
	}
	else_if = {
		#Systemic oppression makes it worse
		limit = {
			has_idea = policy_minorities_temp_0
			check_variable = {
				segregationValue > -0.1
			}
		}
		add_to_variable = {
			segregationValue = -0.001
		}
	}
	if = {
		#Normalize Values to acceptable levels/cap penalties
		limit = {
			check_variable = {
				segregationValue < -0.11
			}
		}
		add_to_variable = {
			segregationValue = 0.01
		}
	}
	if = {
		limit = {
			NOT = {
				has_dynamic_modifier = {
					modifier = segregation_dynamic_modifier
				}
			}
			check_variable = {
				segregationValue < -0.05
			}
			NOT = {
				has_country_flag = segregation_dynamic_set
			}
		}
		country_event = generic.31
		set_country_flag = segregation_dynamic_set
		add_dynamic_modifier = {
			modifier = segregation_dynamic_modifier
		}
	}
	else_if = {
		limit = {
			has_dynamic_modifier = {
				modifier = segregation_dynamic_modifier
			}
			check_variable = {
				segregationValue > -0.001
			}
		}
		country_event = generic.32
		clr_country_flag = segregation_dynamic_set
		remove_dynamic_modifier = {
			modifier = segregation_dynamic_modifier
		}
	}
}

state_population_category_check = {
	#Directory for optimization
	if = {
		limit = {
			OR = {
				has_state_category = pop1
				has_state_category = pop2
				has_state_category = pop3
				has_state_category = pop4
				has_state_category = pop5
				has_state_category = pop7
				has_state_category = pop10
				has_state_category = pop15
				has_state_category = pop20
			}
		}
		state_population_category_dev0 = yes
	}
	else_if = {
		limit = {
			OR = {
				has_state_category = pop1dev1
				has_state_category = pop2dev1
				has_state_category = pop3dev1
				has_state_category = pop4dev1
				has_state_category = pop5dev1
				has_state_category = pop7dev1
				has_state_category = pop10dev1
				has_state_category = pop15dev1
				has_state_category = pop20dev1
			}
		}
		state_population_category_dev1 = yes
	}
	else_if = {
		limit = {
			OR = {
				has_state_category = pop1dev2
				has_state_category = pop2dev2
				has_state_category = pop3dev2
				has_state_category = pop4dev2
				has_state_category = pop5dev2
				has_state_category = pop7dev2
				has_state_category = pop10dev2
				has_state_category = pop15dev2
				has_state_category = pop20dev2
			}
		}
		state_population_category_dev2 = yes
	}
	else_if = {
		limit = {
			OR = {
				has_state_category = pop1dev3
				has_state_category = pop2dev3
				has_state_category = pop3dev3
				has_state_category = pop4dev3
				has_state_category = pop5dev3
				has_state_category = pop7dev3
				has_state_category = pop10dev3
				has_state_category = pop15dev3
				has_state_category = pop20dev3
			}
		}
		state_population_category_dev3 = yes
	}
	else_if = {
		limit = {
			OR = {
				has_state_category = pop1dev4
				has_state_category = pop2dev4
				has_state_category = pop3dev4
				has_state_category = pop4dev4
				has_state_category = pop5dev4
				has_state_category = pop7dev4
				has_state_category = pop10dev4
				has_state_category = pop15dev4
				has_state_category = pop20dev4
			}
		}
		state_population_category_dev4 = yes
	}
}
credit_calculation_work = {
	if = {
		limit = {
			UNS = {
				NOT = {
					has_country_flag = Startup_Credit_Rating_Assigned
				}
			}
		}
		set_country_flag = Startup_Credit_Rating_Assigned
		USA = {
			set_starting_credit_ratings = yes
		}
		UNS = {
			set_starting_credit_ratings = yes
		}
		VTC = {
			set_starting_credit_ratings = yes
		}
		ENG = {
			set_starting_credit_ratings = yes
		}
		SOV = {
			set_starting_credit_ratings = yes
		}
	}
	#General
	if = {
		limit = {
			NOT = {
				has_country_flag = Startup_Credit_Rating_Assigned
			}
		}
		set_country_flag = Startup_Credit_Rating_Assigned
		set_starting_credit_ratings = yes
	}
	if = {
		limit = {
			check_variable = {
				development_base_value > 2
			}
		}
		set_variable = {
			industrial_base_tier = 6
		}
	}
	else_if = {
		limit = {
			check_variable = {
				development_base_value > 1.5
			}
		}
		set_variable = {
			industrial_base_tier = 5
		}
	}
	else_if = {
		limit = {
			check_variable = {
				development_base_value > 1.25
			}
		}
		set_variable = {
			industrial_base_tier = 4
		}
	}
	else_if = {
		limit = {
			check_variable = {
				development_base_value > 1
			}
		}
		set_variable = {
			industrial_base_tier = 3
		}
	}
	else_if = {
		limit = {
			check_variable = {
				development_base_value > 0.5
			}
		}
		set_variable = {
			industrial_base_tier = 2
		}
	}
	else = {
		set_variable = {
			industrial_base_tier = 1
		}
	}

}

#Industrial Base Tiers Defines
#6 	= Superior
#5	= Above Average
#4	= Average 
#3	= Below Average
#2	= Poor
#1 	= Shithole
#Credit Rating Defines
#10		AAA
#9		AA
#8		A
#7		BBB
#6		BB
#5		B
#4		CCC
#3		CC
#2		SD
#1		D
process_credit_rating = {
	if = {
		limit = {
			OR = {
				tag = USA
				tag = UNS
				tag = VTC
				tag = SOV
				tag = ENG
			}
		}
		set_variable = {
			Credit_Rating = 10
		}
	}
	else = {
		if = {
			limit = {
				NOT = {
					has_country_flag = Credit_Rating_Locked
				}
				check_variable = {
					industrial_base_tier = 6
				}
			}
			add_to_variable = {
				Credit_Progress = 1
			}
		}
		if = {
			limit = {
				NOT = {
					has_country_flag = Credit_Rating_Locked
				}
				check_variable = {
					Credit_Rating < 9
				}
				check_variable = {
					industrial_base_tier = 6
				}
			}
			add_to_variable = {
				Credit_Progress = 2
			}
		}
		if = {
			limit = {
				NOT = {
					has_country_flag = Credit_Rating_Locked
				}
				check_variable = {
					Credit_Rating < 8
				}
				check_variable = {
					industrial_base_tier = 6
				}
			}
			add_to_variable = {
				Credit_Progress = 2
			}
		}
		if = {
			limit = {
				NOT = {
					has_country_flag = Credit_Rating_Locked
				}
				check_variable = {
					Credit_Rating < 7
				}
				check_variable = {
					industrial_base_tier = 6
				}
			}
			add_to_variable = {
				Credit_Progress = 2
			}
		}
		if = {
			limit = {
				NOT = {
					has_country_flag = Credit_Rating_Locked
				}
				check_variable = {
					Credit_Rating < 6
				}
				check_variable = {
					industrial_base_tier = 6
				}
			}
			add_to_variable = {
				Credit_Progress = 2
			}
		}
		if = {
			limit = {
				NOT = {
					has_country_flag = Credit_Rating_Locked
				}
				check_variable = {
					Credit_Rating < 5
				}
				check_variable = {
					industrial_base_tier = 6
				}
			}
			add_to_variable = {
				Credit_Progress = 2
			}
		}
		if = {
			limit = {
				NOT = {
					has_country_flag = Credit_Rating_Locked
				}
				check_variable = {
					Credit_Rating < 9
				}
				check_variable = {
					industrial_base_tier = 5
				}
			}
			add_to_variable = {
				Credit_Progress = 1
			}
		}
		if = {
			limit = {
				NOT = {
					has_country_flag = Credit_Rating_Locked
				}
				check_variable = {
					Credit_Rating < 6
				}
				check_variable = {
					industrial_base_tier = 5
				}
			}
			add_to_variable = {
				Credit_Progress = 2
			}
		}
		if = {
			limit = {
				NOT = {
					has_country_flag = Credit_Rating_Locked
				}
				check_variable = {
					Credit_Rating < 4
				}
				check_variable = {
					industrial_base_tier = 5
				}
			}
			add_to_variable = {
				Credit_Progress = 4
			}
		}
		if = {
			limit = {
				NOT = {
					has_country_flag = Credit_Rating_Locked
				}
				check_variable = {
					Credit_Rating > 7
				}
				check_variable = {
					industrial_base_tier = 4
				}
			}
			add_to_variable = {
				Credit_Progress = -1
			}
		}
		if = {
			limit = {
				NOT = {
					has_country_flag = Credit_Rating_Locked
				}
				check_variable = {
					Credit_Rating < 6
				}
				check_variable = {
					industrial_base_tier = 4
				}
			}
			add_to_variable = {
				Credit_Progress = 1
			}
		}
		if = {
			limit = {
				NOT = {
					has_country_flag = Credit_Rating_Locked
				}
				has_idea = UN_Sanctions
			}
			add_to_variable = {
				Credit_Progress = -1
			}
		}
		if = {
			limit = {
				NOT = {
					has_country_flag = Credit_Rating_Locked
				}
				has_idea = unrecognized_state
			}
			add_to_variable = {
				Credit_Progress = -1
			}
		}
		if = {
			limit = {
				NOT = {
					has_country_flag = Credit_Rating_Locked
				}
				check_variable = {
					Credit_Rating < 4
				}
				check_variable = {
					industrial_base_tier = 4
				}
			}
			add_to_variable = {
				Credit_Progress = 1
			}
		}
		if = {
			limit = {
				NOT = {
					has_country_flag = Credit_Rating_Locked
				}
				check_variable = {
					Credit_Rating > 5
				}
				check_variable = {
					industrial_base_tier = 3
				}
			}
			add_to_variable = {
				Credit_Progress = -2
			}
		}
		if = {
			limit = {
				NOT = {
					has_country_flag = Credit_Rating_Locked
				}
				OR = {
					check_variable = {
						Credit_Rating = 2
					}
					check_variable = {
						Credit_Rating = 3
					}
				}
				check_variable = {
					Credit_Rating > 5
				}
				check_variable = {
					industrial_base_tier = 3
				}
			}
			add_to_variable = {
				Credit_Progress = 1
			}
		}
		if = {
			limit = {
				NOT = {
					has_country_flag = Credit_Rating_Locked
				}
				check_variable = {
					Credit_Rating > 4
				}
				check_variable = {
					industrial_base_tier = 2
				}
			}
			add_to_variable = {
				Credit_Progress = -2
			}
		}
		if = {
			limit = {
				NOT = {
					has_country_flag = Credit_Rating_Locked
				}
				check_variable = {
					Credit_Rating > 3
				}
				check_variable = {
					industrial_base_tier = 1
				}
			}
			add_to_variable = {
				Credit_Progress = -2
			}
		}
		if = {
			limit = {
				NOT = {
					has_country_flag = Credit_Rating_Locked
				}
				check_variable = {
					Credit_Rating = 1
				}
			}
			set_variable = {
				Credit_Progress = 0
			}
		}
		if = {
			limit = {
				NOT = {
					has_country_flag = Credit_Rating_Locked
				}
				check_variable = {
					Credit_Rating = 9
				}
			}
			set_variable = {
				Credit_Progress = 0
			}
		}
		if = {
			limit = {
				NOT = {
					has_country_flag = Credit_Rating_Locked
				}
				check_variable = {
					Credit_Rating > 6
				}
				check_variable = {
					industrial_base_tier < 5
				}
			}
			set_variable = {
				Credit_Progress = 0
			}
		}
		if = {
			limit = {
				NOT = {
					has_country_flag = Credit_Rating_Locked
				}
				has_border_war = yes
			}
			add_to_variable = {
				Credit_Progress = -1
			}
		}
		if = {
			limit = {
				NOT = {
					has_country_flag = Credit_Rating_Locked
				}
				has_country_flag = active_insurgency
			}
			add_to_variable = {
				Credit_Progress = -1
			}
		}
		if = {
			limit = {
				NOT = {
					has_country_flag = Credit_Rating_Locked
				}
				has_war = yes
			}
			add_to_variable = {
				Credit_Progress = -1
			}
		}
		if = {
			limit = {
				NOT = {
					has_country_flag = Credit_Rating_Locked
				}
				surrender_progress > 0.25
			}
			add_to_variable = {
				Credit_Progress = -1
			}
		}
		if = {
			limit = {
				NOT = {
					has_country_flag = Credit_Rating_Locked
				}
				surrender_progress > 0.5
			}
			add_to_variable = {
				Credit_Progress = -2
			}
		}
		if = {
			limit = {
				NOT = {
					has_country_flag = Credit_Rating_Locked
				}
				surrender_progress > 0.75
			}
			add_to_variable = {
				Credit_Progress = -3
			}
		}
		if = {
			limit = {
				NOT = {
					has_country_flag = Credit_Rating_Locked
				}
				has_capitulated = yes
			}
			add_to_variable = {
				Credit_Progress = -4
			}
		}
		set_variable = {
			DebtRiskAversionBad = grossdomesticproduct
		}
		set_variable = {
			DebtRiskAversionGood = grossdomesticproduct
		}
		if = {
			limit = {
				check_variable = {
					Credit_Rating = 9
				}
			}
			multiply_variable = {
				DebtRiskAversionBad = 8
			}
			multiply_variable = {
				DebtRiskAversionGood = 4
			}
		}
		else_if = {
			limit = {
				check_variable = {
					Credit_Rating = 8
				}
			}
			multiply_variable = {
				DebtRiskAversionBad = 6
			}
			multiply_variable = {
				DebtRiskAversionGood = 3
			}
		}
		else_if = {
			limit = {
				check_variable = {
					Credit_Rating = 7
				}
			}
			multiply_variable = {
				DebtRiskAversionBad = 5
			}
			multiply_variable = {
				DebtRiskAversionGood = 2.5
			}
		}
		else_if = {
			limit = {
				check_variable = {
					Credit_Rating = 6
				}
			}
			multiply_variable = {
				DebtRiskAversionBad = 4
			}
			multiply_variable = {
				DebtRiskAversionGood = 2
			}
		}
		else_if = {
			limit = {
				check_variable = {
					Credit_Rating = 5
				}
			}
			multiply_variable = {
				DebtRiskAversionBad = 3
			}
			multiply_variable = {
				DebtRiskAversionGood = 1.5
			}
		}
		else_if = {
			limit = {
				check_variable = {
					Credit_Rating = 4
				}
			}
			multiply_variable = {
				DebtRiskAversionBad = 2
			}
			multiply_variable = {
				DebtRiskAversionGood = 1
			}
		}
		else_if = {
			limit = {
				check_variable = {
					Credit_Rating = 3
				}
			}
			multiply_variable = {
				DebtRiskAversionBad = 1
			}
			multiply_variable = {
				DebtRiskAversionGood = 0.5
			}
		}
		else_if = {
			limit = {
				check_variable = {
					Credit_Rating = 2
				}
			}
			multiply_variable = {
				DebtRiskAversionBad = 0.75
			}
			multiply_variable = {
				DebtRiskAversionGood = 0.35
			}
		}
		if = {
			limit = {
				check_variable = {
					currentDebt > DebtRiskAversionBad
				}
			}
			add_to_variable = {
				Credit_Progress = -1
			}
		}
		if = {
			limit = {
				check_variable = {
					currentDebt < DebtRiskAversionGood
				}
			}
			add_to_variable = {
				Credit_Progress = 1
			}
		}
		if = {
			limit = {
				check_variable = {
					Credit_Progress > 99
				}
				NOT = {
					check_variable = {
						Credit_Rating = 1
					}
				}
				NOT = {
					check_variable = {
						Credit_Rating = 9
					}
				}
			}
			raise_credit_rating = yes
		}
		if = {
			limit = {
				check_variable = {
					Credit_Progress < 0
				}
				NOT = {
					check_variable = {
						Credit_Rating < 4
					}
				}
			}
			lower_credit_rating = yes
		}
	}
}

raise_credit_rating = {
	add_to_variable = {
		Credit_Rating = 1
	}
}

lower_credit_rating = {
	add_to_variable = {
		Credit_Rating = -1
	}
}

set_starting_credit_ratings = {
	#Change to GDP-Debt Ratio
	if = {
		limit = {
			OR = {
				tag = USA
				tag = UNS
				tag = VTC
				tag = SOV
				tag = ENG
			}
		}
		set_variable = {
			Credit_Rating = 10
		}
		set_country_flag = Credit_Rating_Locked
	}
	else_if = {
		if = {
			limit = {
				check_variable = {
					development_base_value > 1.799
				}
			}
			set_variable = {
				Credit_Rating = 9
			}
		}
		else_if = {
			limit = {
				check_variable = {
					starting_tax_credit_calc > 1.599
				}
			}
			set_variable = {
				Credit_Rating = 8
			}
		}
		else_if = {
			limit = {
				check_variable = {
					starting_tax_credit_calc > 1.399
				}
			}
			set_variable = {
				Credit_Rating = 7
			}
		}
		else_if = {
			limit = {
				check_variable = {
					starting_tax_credit_calc > 1.119
				}
			}
			set_variable = {
				Credit_Rating = 6
			}
		}
		else_if = {
			limit = {
				check_variable = {
					starting_tax_credit_calc > 0.99
				}
			}
			set_variable = {
				Credit_Rating = 5
			}
		}
		else_if = {
			limit = {
				check_variable = {
					starting_tax_credit_calc > 0.74
				}
			}
			set_variable = {
				Credit_Rating = 4
			}
		}
		else = {
			set_variable = {
				Credit_Rating = 3
			}
		}
	}
	else = {
		set_variable = {
			Credit_Rating = 3
		}
	}
}

set_interest_rates = {
	if = {
		limit = {
			check_variable = {
				Credit_Rating = 10
			}
		}
		set_variable = {
			Interest_Rate = 1.01
		}
		set_variable = {
			max_borrowable_modifier = 0.25
		}
	}
	else_if = {
		limit = {
			check_variable = {
				Credit_Rating = 9
			}
		}
		set_variable = {
			Interest_Rate = 1.015
		}
		set_variable = {
			default_multiplier = 15
		}
		set_variable = {
			austerity_multiplier = 8
		}
		set_variable = {
			max_borrowable_modifier = 0.2
		}
	}
	else_if = {
		limit = {
			check_variable = {
				Credit_Rating = 8
			}
		}
		set_variable = {
			Interest_Rate = 1.02
		}
		set_variable = {
			default_multiplier = 12
		}
		set_variable = {
			austerity_multiplier = 6
		}
		set_variable = {
			max_borrowable_modifier = 0.18
		}
	}
	else_if = {
		limit = {
			check_variable = {
				Credit_Rating = 7
			}
		}
		set_variable = {
			Interest_Rate = 1.05
		}
		set_variable = {
			default_multiplier = 10
		}
		set_variable = {
			austerity_multiplier = 5
		}
		set_variable = {
			max_borrowable_modifier = 0.16
		}
	}
	else_if = {
		limit = {
			check_variable = {
				Credit_Rating = 6
			}
		}
		set_variable = {
			Interest_Rate = 1.1
		}
		set_variable = {
			default_multiplier = 8
		}
		set_variable = {
			austerity_multiplier = 4
		}
		set_variable = {
			max_borrowable_modifier = 0.14
		}
	}
	else_if = {
		limit = {
			check_variable = {
				Credit_Rating = 5
			}
		}
		set_variable = {
			Interest_Rate = 1.15
		}
		set_variable = {
			default_multiplier = 6
		}
		set_variable = {
			austerity_multiplier = 3
		}
		set_variable = {
			max_borrowable_modifier = 0.12
		}
	}
	else_if = {
		limit = {
			check_variable = {
				Credit_Rating = 4
			}
		}
		set_variable = {
			Interest_Rate = 1.2
		}
		set_variable = {
			default_multiplier = 4
		}
		set_variable = {
			austerity_multiplier = 2
		}
		set_variable = {
			max_borrowable_modifier = 0.1
		}
	}
	else_if = {
		limit = {
			check_variable = {
				Credit_Rating = 3
			}
		}
		set_variable = {
			Interest_Rate = 1.25
		}
		set_variable = {
			default_multiplier = 3
		}
		set_variable = {
			austerity_multiplier = 1
		}
		set_variable = {
			max_borrowable_modifier = 0.1
		}
	}
	else_if = {
		limit = {
			check_variable = {
				Credit_Rating = 2
			}
		}
		set_variable = {
			Interest_Rate = 1.4
		}
		set_variable = {
			default_multiplier = 2
		}
		set_variable = {
			austerity_multiplier = 0.75
		}
		set_variable = {
			max_borrowable_modifier = 0.1
		}
	}
	else_if = {
		limit = {
			check_variable = {
				Credit_Rating = 1
			}
		}
		set_variable = {
			Interest_Rate = 1.5
		}
		set_variable = {
			default_multiplier = 1
		}
		set_variable = {
			austerity_multiplier = 0.5
		}
		set_variable = {
			max_borrowable_modifier = 0.1
		}
	}
	else = {
	}
}

test_gdp_script = {
#Antiquated
}

set_international_commercial_rates = {
	set_variable = {
		ParisCurrentInterestRate = Interest_Rate
	}
	multiply_variable = {
		ParisCurrentInterestRate = 1.25
	}
	set_variable = {
		BarclaysCurrentInterestRate = Interest_Rate
	}
	multiply_variable = {
		BarclaysCurrentInterestRate = 1.25
	}
	set_variable = {
		MitsubishiCurrentInterestRate = Interest_Rate
	}
	multiply_variable = {
		MitsubishiCurrentInterestRate = 1.3
	}
	set_variable = {
		MorganCurrentInterestRate = Interest_Rate
	}
	multiply_variable = {
		MorganCurrentInterestRate = 1.25
	}
	set_variable = {
		SuisseCurrentInterestRate = Interest_Rate
	}
	multiply_variable = {
		SuisseCurrentInterestRate = 2.25
	}
	set_variable = {
		DeutscheCurrentInterestRate = Interest_Rate
	}
	multiply_variable = {
		DeutscheCurrentInterestRate = 1.6
	}
	#International Max Borrowable
	#10% of GDP at CCC/lower and increase by 2% per level above CCC
	set_variable = {
		OldParisMaxBorrowable = ParisMaxBorrowable
	}
	set_variable = {
		ParisMaxBorrowable = grossdomesticproduct
	}
	multiply_variable = {
		ParisMaxBorrowable = max_borrowable_modifier
	}
	set_variable = {
		OldBarclaysMaxBorrowable = BarclaysMaxBorrowable
	}
	set_variable = {
		BarclaysMaxBorrowable = grossdomesticproduct
	}
	multiply_variable = {
		BarclaysMaxBorrowable = max_borrowable_modifier
	}
	set_variable = {
		OldMitsubishiMaxBorrowable = MitsubishiMaxBorrowable
	}
	set_variable = {
		MitsubishiMaxBorrowable = grossdomesticproduct
	}
	multiply_variable = {
		MitsubishiMaxBorrowable = max_borrowable_modifier
	}
	set_variable = {
		OldSuisseMaxBorrowable = SuisseMaxBorrowable
	}
	set_variable = {
		SuisseMaxBorrowable = grossdomesticproduct
	}
	multiply_variable = {
		SuisseMaxBorrowable = max_borrowable_modifier
	}
	set_variable = {
		OldDeutscheMaxBorrowable = DeutscheMaxBorrowable
	}
	set_variable = {
		DeutscheMaxBorrowable = grossdomesticproduct
	}
	multiply_variable = {
		DeutscheMaxBorrowable = max_borrowable_modifier
	}
	set_variable = {
		OldMorganMaxBorrowable = MorganMaxBorrowable
	}
	set_variable = {
		MorganMaxBorrowable = grossdomesticproduct
	}
	multiply_variable = {
		MorganMaxBorrowable = max_borrowable_modifier
	}
	#Transnational Borrowable Limits
	set_variable = {
		OldIMFMaxBorrowable = IMFMaxBorrowable
	}
	set_variable = {
		IMFMaxBorrowable = grossdomesticproduct
	}
	multiply_variable = {
		IMFMaxBorrowable = 1.5
	}
	set_variable = {
		OldWorldMaxBorrowable = WorldMaxBorrowable
	}
	set_variable = {
		WorldMaxBorrowable = grossdomesticproduct
	}
	multiply_variable = {
		WorldMaxBorrowable = 0.33
	}
}

set_reserve_rate = {
	set_variable = {
		ReserveCurrentInterestRate = Interest_Rate
	}
	multiply_variable = {
		ReserveCurrentInterestRate = 0.8
	}
	set_variable = {
		OldReserveMaxBorrowable = ReserveMaxBorrowable
	}
	set_variable = {
		ReserveMaxBorrowable = grossdomesticproduct
	}
	multiply_variable = {
		ReserveMaxBorrowable = 0.5
	}
}

calculate_loan_details = {
	set_variable = {
		potential_loan_total = purchase_amount
	}
	set_variable = {
		potential_loan_total_adj = purchase_amount
	}
	set_variable = {
		potential_loan_interest = currentInterestRateCalc^current_index
	}
	divide_variable = {
		potential_loan_interest = 100
	}
	multiply_variable = {
		potential_loan_total_adj = potential_loan_interest
	}
	add_to_variable = {
		potential_loan_total = potential_loan_total_adj
	}
	set_variable = {
		potential_loan_monthly_length = purchase_length^current_index
	}
	multiply_variable = {
		potential_loan_monthly_length = 12
	}
	set_variable = {
		potential_loan_monthly_cost = potential_loan_total
	}
	divide_variable = {
		potential_loan_monthly_cost = potential_loan_monthly_length
	}
}

automatic_loan_setting = {
	#Debt Calc
	set_variable = {
		potential_loan_total = pulse_deficit
	}
	set_variable = {
		potential_loan_total_adj = pulse_deficit
	}
	set_variable = {
		potential_loan_interest = currentInterestRateCalc^current_index
	}
	divide_variable = {
		potential_loan_interest = 100
	}
	multiply_variable = {
		potential_loan_total_adj = potential_loan_interest
	}
	add_to_variable = {
		potential_loan_total = potential_loan_total_adj
	}
	set_variable = {
		potential_loan_monthly_length = purchase_length^current_index
	}
	multiply_variable = {
		potential_loan_monthly_length = 12
	}
	set_variable = {
		potential_loan_monthly_cost = potential_loan_total
	}
	divide_variable = {
		potential_loan_monthly_cost = potential_loan_monthly_length
	}
	#Actual Setting
	set_variable = {
		loan_amount = potential_loan_total
	}
	add_to_array = {
		debtTotalsArray = loan_amount
	}
	add_to_array = {
		debtOwnerArray = global_event_target:this_loan_country
	}
	add_to_array = {
		debtOwnerDomesticStatusArray = bank_name_prompt
	}
	add_to_array = {
		debtInterestArray = potential_loan_interest
	}
	set_variable = {
		debtPayment = potential_loan_monthly_cost
	}
	add_to_array = {
		debtPaymentArray = debtPayment
	}
	add_to_variable = {
		currentDebtPayments = debtPayment
	}
	loan_set_assigning_borrowable = yes
}

loan_set_assigning_borrowable = {
	if = {
		limit = {
			check_variable = {
				bank_name_prompt = 1
			}
		}
		subtract_from_variable = {
			CurrentReserveMaxBorrowable = loan_amount
		}			#1
	}
	else_if = {
		limit = {
			check_variable = {
				bank_name_prompt = 10
			}
		}
		subtract_from_variable = {
			CurrentWorldMaxBorrowable = loan_amount
		}			#10
	}
	else_if = {
		limit = {
			check_variable = {
				bank_name_prompt = 8
			}
		}
		subtract_from_variable = {
			CurrentMorganMaxBorrowable = loan_amount
		}			#8
	}
	else_if = {
		limit = {
			check_variable = {
				bank_name_prompt = 3
			}
		}
		subtract_from_variable = {
			CurrentParisMaxBorrowable = loan_amount
		}			#3
	}
	else_if = {
		limit = {
			check_variable = {
				bank_name_prompt = 4
			}
		}
		subtract_from_variable = {
			CurrentBarclaysMaxBorrowable = loan_amount
		}			#4
	}
	else_if = {
		limit = {
			check_variable = {
				bank_name_prompt = 5
			}
		}
		subtract_from_variable = {
			CurrentMitsubishiMaxBorrowable = loan_amount
		}			#5
	}
	else_if = {
		limit = {
			check_variable = {
				bank_name_prompt = 7
			}
		}
		subtract_from_variable = {
			CurrentDeutscheMaxBorrowable = loan_amount
		}			#7
	}
	else_if = {
		limit = {
			check_variable = {
				bank_name_prompt = 6
			}
		}
		subtract_from_variable = {
			CurrentSuisseMaxBorrowable = loan_amount
		}			#6
	}
	else_if = {
		limit = {
			check_variable = {
				bank_name_prompt = 9
			}
		}
		subtract_from_variable = {
			CurrentIMFMaxBorrowable = loan_amount
		}			#9
	}
}

monthly_borrowing_and_interest_pulse = {
	#Should go in IC_Financial Pulse
	set_international_commercial_rates = yes
	set_reserve_rate = yes
	#if = {
	#	limit = {
	#		NOT = {
	#			has_country_flag = borrowing_setup_done
	#		}
	#	}
	#	set_country_flag = borrowing_setup_done
	#	set_variable = {
	#		ReserveMaxBorrowable
	#	}
	#	WorldMaxBorrowable
	#	MorganMaxBorrowable
	#	ParisMaxBorrowable
	#	BarclaysMaxBorrowable
	#}	
	subtract_from_variable = {
		OldReserveMaxBorrowable = ReserveMaxBorrowable
	}
	subtract_from_variable = {
		OldWorldMaxBorrowable = WorldMaxBorrowable
	}
	subtract_from_variable = {
		OldMorganMaxBorrowable = MorganMaxBorrowable
	}
	subtract_from_variable = {
		OldParisMaxBorrowable = ParisMaxBorrowable
	}
	subtract_from_variable = {
		OldBarclaysMaxBorrowable = BarclaysMaxBorrowable
	}
	subtract_from_variable = {
		OldMitsubishiMaxBorrowable = MitsubishiMaxBorrowable
	}
	subtract_from_variable = {
		OldDeutscheMaxBorrowable = DeutscheMaxBorrowable
	}
	subtract_from_variable = {
		OldSuisseMaxBorrowable = SuisseMaxBorrowable
	}
	subtract_from_variable = {
		OldIMFMaxBorrowable = IMFMaxBorrowable
	}
	#New
	multiply_variable = {
		OldReserveMaxBorrowable = -1
	}
	multiply_variable = {
		OldWorldMaxBorrowable = -1
	}
	multiply_variable = {
		OldMorganMaxBorrowable = -1
	}
	multiply_variable = {
		OldParisMaxBorrowable = -1
	}
	multiply_variable = {
		OldBarclaysMaxBorrowable = -1
	}
	multiply_variable = {
		OldMitsubishiMaxBorrowable = -1
	}
	multiply_variable = {
		OldDeutscheMaxBorrowable = -1
	}
	multiply_variable = {
		OldSuisseMaxBorrowable = -1
	}
	multiply_variable = {
		OldIMFMaxBorrowable = -1
	}
	#
	add_to_variable = {
		CurrentReserveMaxBorrowable = OldReserveMaxBorrowable
	}
	add_to_variable = {
		CurrentWorldMaxBorrowable = OldWorldMaxBorrowable
	}
	add_to_variable = {
		CurrentMorganMaxBorrowable = OldMorganMaxBorrowable
	}
	add_to_variable = {
		CurrentParisMaxBorrowable = OldParisMaxBorrowable
	}
	add_to_variable = {
		CurrentBarclaysMaxBorrowable = OldBarclaysMaxBorrowable
	}
	add_to_variable = {
		CurrentMitsubishiMaxBorrowable = OldMitsubishiMaxBorrowable
	}
	add_to_variable = {
		CurrentDeutscheMaxBorrowable = OldDeutscheMaxBorrowable
	}
	add_to_variable = {
		CurrentSuisseMaxBorrowable = OldSuisseMaxBorrowable
	}
	add_to_variable = {
		CurrentIMFMaxBorrowable = OldIMFMaxBorrowable
	}
}

loan_payoff_change_to_liquidity = {
	if = {
		limit = {
			check_variable = {
				debtOwnerDomesticStatusArray^i = 1
			}
		}
		add_to_variable = {
			CurrentReserveMaxBorrowable = debtPaymentArray^i
		}			#1
	}
	else_if = {
		#Uses Older System as Base
		limit = {
			check_variable = {
				debtOwnerDomesticStatusArray^i = 2
			}
		}
		subtract_from_variable = {
			domesticTotalDebt = debtPaymentArray^i
		}
	}
	else_if = {
		limit = {
			check_variable = {
				debtOwnerDomesticStatusArray^i = 10
			}
		}
		add_to_variable = {
			CurrentWorldMaxBorrowable = debtPaymentArray^i
		}			#10
	}
	else_if = {
		limit = {
			check_variable = {
				debtOwnerDomesticStatusArray^i = 8
			}
		}
		add_to_variable = {
			CurrentMorganMaxBorrowable = debtPaymentArray^i
		}			#8
	}
	else_if = {
		limit = {
			check_variable = {
				debtOwnerDomesticStatusArray^i = 3
			}
		}
		add_to_variable = {
			CurrentParisMaxBorrowable = debtPaymentArray^i
		}			#3
	}
	else_if = {
		limit = {
			check_variable = {
				debtOwnerDomesticStatusArray^i = 4
			}
		}
		add_to_variable = {
			CurrentBarclaysMaxBorrowable = debtPaymentArray^i
		}			#4
	}
	else_if = {
		limit = {
			check_variable = {
				debtOwnerDomesticStatusArray^i = 4
			}
		}
		add_to_variable = {
			CurrentMitsubishiMaxBorrowable = debtPaymentArray^i
		}			#5
	}
	else_if = {
		limit = {
			check_variable = {
				debtOwnerDomesticStatusArray^i = 4
			}
		}
		add_to_variable = {
			CurrentDeutscheMaxBorrowable = debtPaymentArray^i
		}			#7
	}
	else_if = {
		limit = {
			check_variable = {
				debtOwnerDomesticStatusArray^i = 4
			}
		}
		add_to_variable = {
			CurrentSuisseMaxBorrowable = debtPaymentArray^i
		}			#6
	}
	else_if = {
		limit = {
			check_variable = {
				debtOwnerDomesticStatusArray^i = 4
			}
		}
		add_to_variable = {
			CurrentIMFMaxBorrowable = debtPaymentArray^i
		}			#9
	}
}